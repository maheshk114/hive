/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class WriteEventInfo implements org.apache.thrift.TBase<WriteEventInfo, WriteEventInfo._Fields>, java.io.Serializable, Cloneable, Comparable<WriteEventInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WriteEventInfo");

  private static final org.apache.thrift.protocol.TField TXNID_FIELD_DESC = new org.apache.thrift.protocol.TField("txnid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DATABASES_FIELD_DESC = new org.apache.thrift.protocol.TField("databases", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("tables", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitions", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField WRITE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("writeIds", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField TABLE_OBJS_FIELD_DESC = new org.apache.thrift.protocol.TField("tableObjs", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("files", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField PARTITION_OBJS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionObjs", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WriteEventInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WriteEventInfoTupleSchemeFactory());
  }

  private long txnid; // required
  private List<String> databases; // optional
  private List<String> tables; // optional
  private List<String> partitions; // optional
  private List<Long> writeIds; // optional
  private List<String> tableObjs; // optional
  private List<String> files; // optional
  private List<String> partitionObjs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TXNID((short)1, "txnid"),
    DATABASES((short)2, "databases"),
    TABLES((short)3, "tables"),
    PARTITIONS((short)4, "partitions"),
    WRITE_IDS((short)5, "writeIds"),
    TABLE_OBJS((short)6, "tableObjs"),
    FILES((short)7, "files"),
    PARTITION_OBJS((short)8, "partitionObjs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TXNID
          return TXNID;
        case 2: // DATABASES
          return DATABASES;
        case 3: // TABLES
          return TABLES;
        case 4: // PARTITIONS
          return PARTITIONS;
        case 5: // WRITE_IDS
          return WRITE_IDS;
        case 6: // TABLE_OBJS
          return TABLE_OBJS;
        case 7: // FILES
          return FILES;
        case 8: // PARTITION_OBJS
          return PARTITION_OBJS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TXNID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DATABASES,_Fields.TABLES,_Fields.PARTITIONS,_Fields.WRITE_IDS,_Fields.TABLE_OBJS,_Fields.FILES,_Fields.PARTITION_OBJS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TXNID, new org.apache.thrift.meta_data.FieldMetaData("txnid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATABASES, new org.apache.thrift.meta_data.FieldMetaData("databases", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TABLES, new org.apache.thrift.meta_data.FieldMetaData("tables", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("partitions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.WRITE_IDS, new org.apache.thrift.meta_data.FieldMetaData("writeIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.TABLE_OBJS, new org.apache.thrift.meta_data.FieldMetaData("tableObjs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FILES, new org.apache.thrift.meta_data.FieldMetaData("files", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARTITION_OBJS, new org.apache.thrift.meta_data.FieldMetaData("partitionObjs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WriteEventInfo.class, metaDataMap);
  }

  public WriteEventInfo() {
  }

  public WriteEventInfo(
    long txnid)
  {
    this();
    this.txnid = txnid;
    setTxnidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WriteEventInfo(WriteEventInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.txnid = other.txnid;
    if (other.isSetDatabases()) {
      List<String> __this__databases = new ArrayList<String>(other.databases);
      this.databases = __this__databases;
    }
    if (other.isSetTables()) {
      List<String> __this__tables = new ArrayList<String>(other.tables);
      this.tables = __this__tables;
    }
    if (other.isSetPartitions()) {
      List<String> __this__partitions = new ArrayList<String>(other.partitions);
      this.partitions = __this__partitions;
    }
    if (other.isSetWriteIds()) {
      List<Long> __this__writeIds = new ArrayList<Long>(other.writeIds);
      this.writeIds = __this__writeIds;
    }
    if (other.isSetTableObjs()) {
      List<String> __this__tableObjs = new ArrayList<String>(other.tableObjs);
      this.tableObjs = __this__tableObjs;
    }
    if (other.isSetFiles()) {
      List<String> __this__files = new ArrayList<String>(other.files);
      this.files = __this__files;
    }
    if (other.isSetPartitionObjs()) {
      List<String> __this__partitionObjs = new ArrayList<String>(other.partitionObjs);
      this.partitionObjs = __this__partitionObjs;
    }
  }

  public WriteEventInfo deepCopy() {
    return new WriteEventInfo(this);
  }

  @Override
  public void clear() {
    setTxnidIsSet(false);
    this.txnid = 0;
    this.databases = null;
    this.tables = null;
    this.partitions = null;
    this.writeIds = null;
    this.tableObjs = null;
    this.files = null;
    this.partitionObjs = null;
  }

  public long getTxnid() {
    return this.txnid;
  }

  public void setTxnid(long txnid) {
    this.txnid = txnid;
    setTxnidIsSet(true);
  }

  public void unsetTxnid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TXNID_ISSET_ID);
  }

  /** Returns true if field txnid is set (has been assigned a value) and false otherwise */
  public boolean isSetTxnid() {
    return EncodingUtils.testBit(__isset_bitfield, __TXNID_ISSET_ID);
  }

  public void setTxnidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TXNID_ISSET_ID, value);
  }

  public int getDatabasesSize() {
    return (this.databases == null) ? 0 : this.databases.size();
  }

  public java.util.Iterator<String> getDatabasesIterator() {
    return (this.databases == null) ? null : this.databases.iterator();
  }

  public void addToDatabases(String elem) {
    if (this.databases == null) {
      this.databases = new ArrayList<String>();
    }
    this.databases.add(elem);
  }

  public List<String> getDatabases() {
    return this.databases;
  }

  public void setDatabases(List<String> databases) {
    this.databases = databases;
  }

  public void unsetDatabases() {
    this.databases = null;
  }

  /** Returns true if field databases is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabases() {
    return this.databases != null;
  }

  public void setDatabasesIsSet(boolean value) {
    if (!value) {
      this.databases = null;
    }
  }

  public int getTablesSize() {
    return (this.tables == null) ? 0 : this.tables.size();
  }

  public java.util.Iterator<String> getTablesIterator() {
    return (this.tables == null) ? null : this.tables.iterator();
  }

  public void addToTables(String elem) {
    if (this.tables == null) {
      this.tables = new ArrayList<String>();
    }
    this.tables.add(elem);
  }

  public List<String> getTables() {
    return this.tables;
  }

  public void setTables(List<String> tables) {
    this.tables = tables;
  }

  public void unsetTables() {
    this.tables = null;
  }

  /** Returns true if field tables is set (has been assigned a value) and false otherwise */
  public boolean isSetTables() {
    return this.tables != null;
  }

  public void setTablesIsSet(boolean value) {
    if (!value) {
      this.tables = null;
    }
  }

  public int getPartitionsSize() {
    return (this.partitions == null) ? 0 : this.partitions.size();
  }

  public java.util.Iterator<String> getPartitionsIterator() {
    return (this.partitions == null) ? null : this.partitions.iterator();
  }

  public void addToPartitions(String elem) {
    if (this.partitions == null) {
      this.partitions = new ArrayList<String>();
    }
    this.partitions.add(elem);
  }

  public List<String> getPartitions() {
    return this.partitions;
  }

  public void setPartitions(List<String> partitions) {
    this.partitions = partitions;
  }

  public void unsetPartitions() {
    this.partitions = null;
  }

  /** Returns true if field partitions is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitions() {
    return this.partitions != null;
  }

  public void setPartitionsIsSet(boolean value) {
    if (!value) {
      this.partitions = null;
    }
  }

  public int getWriteIdsSize() {
    return (this.writeIds == null) ? 0 : this.writeIds.size();
  }

  public java.util.Iterator<Long> getWriteIdsIterator() {
    return (this.writeIds == null) ? null : this.writeIds.iterator();
  }

  public void addToWriteIds(long elem) {
    if (this.writeIds == null) {
      this.writeIds = new ArrayList<Long>();
    }
    this.writeIds.add(elem);
  }

  public List<Long> getWriteIds() {
    return this.writeIds;
  }

  public void setWriteIds(List<Long> writeIds) {
    this.writeIds = writeIds;
  }

  public void unsetWriteIds() {
    this.writeIds = null;
  }

  /** Returns true if field writeIds is set (has been assigned a value) and false otherwise */
  public boolean isSetWriteIds() {
    return this.writeIds != null;
  }

  public void setWriteIdsIsSet(boolean value) {
    if (!value) {
      this.writeIds = null;
    }
  }

  public int getTableObjsSize() {
    return (this.tableObjs == null) ? 0 : this.tableObjs.size();
  }

  public java.util.Iterator<String> getTableObjsIterator() {
    return (this.tableObjs == null) ? null : this.tableObjs.iterator();
  }

  public void addToTableObjs(String elem) {
    if (this.tableObjs == null) {
      this.tableObjs = new ArrayList<String>();
    }
    this.tableObjs.add(elem);
  }

  public List<String> getTableObjs() {
    return this.tableObjs;
  }

  public void setTableObjs(List<String> tableObjs) {
    this.tableObjs = tableObjs;
  }

  public void unsetTableObjs() {
    this.tableObjs = null;
  }

  /** Returns true if field tableObjs is set (has been assigned a value) and false otherwise */
  public boolean isSetTableObjs() {
    return this.tableObjs != null;
  }

  public void setTableObjsIsSet(boolean value) {
    if (!value) {
      this.tableObjs = null;
    }
  }

  public int getFilesSize() {
    return (this.files == null) ? 0 : this.files.size();
  }

  public java.util.Iterator<String> getFilesIterator() {
    return (this.files == null) ? null : this.files.iterator();
  }

  public void addToFiles(String elem) {
    if (this.files == null) {
      this.files = new ArrayList<String>();
    }
    this.files.add(elem);
  }

  public List<String> getFiles() {
    return this.files;
  }

  public void setFiles(List<String> files) {
    this.files = files;
  }

  public void unsetFiles() {
    this.files = null;
  }

  /** Returns true if field files is set (has been assigned a value) and false otherwise */
  public boolean isSetFiles() {
    return this.files != null;
  }

  public void setFilesIsSet(boolean value) {
    if (!value) {
      this.files = null;
    }
  }

  public int getPartitionObjsSize() {
    return (this.partitionObjs == null) ? 0 : this.partitionObjs.size();
  }

  public java.util.Iterator<String> getPartitionObjsIterator() {
    return (this.partitionObjs == null) ? null : this.partitionObjs.iterator();
  }

  public void addToPartitionObjs(String elem) {
    if (this.partitionObjs == null) {
      this.partitionObjs = new ArrayList<String>();
    }
    this.partitionObjs.add(elem);
  }

  public List<String> getPartitionObjs() {
    return this.partitionObjs;
  }

  public void setPartitionObjs(List<String> partitionObjs) {
    this.partitionObjs = partitionObjs;
  }

  public void unsetPartitionObjs() {
    this.partitionObjs = null;
  }

  /** Returns true if field partitionObjs is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionObjs() {
    return this.partitionObjs != null;
  }

  public void setPartitionObjsIsSet(boolean value) {
    if (!value) {
      this.partitionObjs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TXNID:
      if (value == null) {
        unsetTxnid();
      } else {
        setTxnid((Long)value);
      }
      break;

    case DATABASES:
      if (value == null) {
        unsetDatabases();
      } else {
        setDatabases((List<String>)value);
      }
      break;

    case TABLES:
      if (value == null) {
        unsetTables();
      } else {
        setTables((List<String>)value);
      }
      break;

    case PARTITIONS:
      if (value == null) {
        unsetPartitions();
      } else {
        setPartitions((List<String>)value);
      }
      break;

    case WRITE_IDS:
      if (value == null) {
        unsetWriteIds();
      } else {
        setWriteIds((List<Long>)value);
      }
      break;

    case TABLE_OBJS:
      if (value == null) {
        unsetTableObjs();
      } else {
        setTableObjs((List<String>)value);
      }
      break;

    case FILES:
      if (value == null) {
        unsetFiles();
      } else {
        setFiles((List<String>)value);
      }
      break;

    case PARTITION_OBJS:
      if (value == null) {
        unsetPartitionObjs();
      } else {
        setPartitionObjs((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TXNID:
      return getTxnid();

    case DATABASES:
      return getDatabases();

    case TABLES:
      return getTables();

    case PARTITIONS:
      return getPartitions();

    case WRITE_IDS:
      return getWriteIds();

    case TABLE_OBJS:
      return getTableObjs();

    case FILES:
      return getFiles();

    case PARTITION_OBJS:
      return getPartitionObjs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TXNID:
      return isSetTxnid();
    case DATABASES:
      return isSetDatabases();
    case TABLES:
      return isSetTables();
    case PARTITIONS:
      return isSetPartitions();
    case WRITE_IDS:
      return isSetWriteIds();
    case TABLE_OBJS:
      return isSetTableObjs();
    case FILES:
      return isSetFiles();
    case PARTITION_OBJS:
      return isSetPartitionObjs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WriteEventInfo)
      return this.equals((WriteEventInfo)that);
    return false;
  }

  public boolean equals(WriteEventInfo that) {
    if (that == null)
      return false;

    boolean this_present_txnid = true;
    boolean that_present_txnid = true;
    if (this_present_txnid || that_present_txnid) {
      if (!(this_present_txnid && that_present_txnid))
        return false;
      if (this.txnid != that.txnid)
        return false;
    }

    boolean this_present_databases = true && this.isSetDatabases();
    boolean that_present_databases = true && that.isSetDatabases();
    if (this_present_databases || that_present_databases) {
      if (!(this_present_databases && that_present_databases))
        return false;
      if (!this.databases.equals(that.databases))
        return false;
    }

    boolean this_present_tables = true && this.isSetTables();
    boolean that_present_tables = true && that.isSetTables();
    if (this_present_tables || that_present_tables) {
      if (!(this_present_tables && that_present_tables))
        return false;
      if (!this.tables.equals(that.tables))
        return false;
    }

    boolean this_present_partitions = true && this.isSetPartitions();
    boolean that_present_partitions = true && that.isSetPartitions();
    if (this_present_partitions || that_present_partitions) {
      if (!(this_present_partitions && that_present_partitions))
        return false;
      if (!this.partitions.equals(that.partitions))
        return false;
    }

    boolean this_present_writeIds = true && this.isSetWriteIds();
    boolean that_present_writeIds = true && that.isSetWriteIds();
    if (this_present_writeIds || that_present_writeIds) {
      if (!(this_present_writeIds && that_present_writeIds))
        return false;
      if (!this.writeIds.equals(that.writeIds))
        return false;
    }

    boolean this_present_tableObjs = true && this.isSetTableObjs();
    boolean that_present_tableObjs = true && that.isSetTableObjs();
    if (this_present_tableObjs || that_present_tableObjs) {
      if (!(this_present_tableObjs && that_present_tableObjs))
        return false;
      if (!this.tableObjs.equals(that.tableObjs))
        return false;
    }

    boolean this_present_files = true && this.isSetFiles();
    boolean that_present_files = true && that.isSetFiles();
    if (this_present_files || that_present_files) {
      if (!(this_present_files && that_present_files))
        return false;
      if (!this.files.equals(that.files))
        return false;
    }

    boolean this_present_partitionObjs = true && this.isSetPartitionObjs();
    boolean that_present_partitionObjs = true && that.isSetPartitionObjs();
    if (this_present_partitionObjs || that_present_partitionObjs) {
      if (!(this_present_partitionObjs && that_present_partitionObjs))
        return false;
      if (!this.partitionObjs.equals(that.partitionObjs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_txnid = true;
    list.add(present_txnid);
    if (present_txnid)
      list.add(txnid);

    boolean present_databases = true && (isSetDatabases());
    list.add(present_databases);
    if (present_databases)
      list.add(databases);

    boolean present_tables = true && (isSetTables());
    list.add(present_tables);
    if (present_tables)
      list.add(tables);

    boolean present_partitions = true && (isSetPartitions());
    list.add(present_partitions);
    if (present_partitions)
      list.add(partitions);

    boolean present_writeIds = true && (isSetWriteIds());
    list.add(present_writeIds);
    if (present_writeIds)
      list.add(writeIds);

    boolean present_tableObjs = true && (isSetTableObjs());
    list.add(present_tableObjs);
    if (present_tableObjs)
      list.add(tableObjs);

    boolean present_files = true && (isSetFiles());
    list.add(present_files);
    if (present_files)
      list.add(files);

    boolean present_partitionObjs = true && (isSetPartitionObjs());
    list.add(present_partitionObjs);
    if (present_partitionObjs)
      list.add(partitionObjs);

    return list.hashCode();
  }

  @Override
  public int compareTo(WriteEventInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTxnid()).compareTo(other.isSetTxnid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxnid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnid, other.txnid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatabases()).compareTo(other.isSetDatabases());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabases()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.databases, other.databases);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTables()).compareTo(other.isSetTables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tables, other.tables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitions()).compareTo(other.isSetPartitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitions, other.partitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWriteIds()).compareTo(other.isSetWriteIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriteIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeIds, other.writeIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableObjs()).compareTo(other.isSetTableObjs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableObjs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableObjs, other.tableObjs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFiles()).compareTo(other.isSetFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.files, other.files);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitionObjs()).compareTo(other.isSetPartitionObjs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionObjs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionObjs, other.partitionObjs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WriteEventInfo(");
    boolean first = true;

    sb.append("txnid:");
    sb.append(this.txnid);
    first = false;
    if (isSetDatabases()) {
      if (!first) sb.append(", ");
      sb.append("databases:");
      if (this.databases == null) {
        sb.append("null");
      } else {
        sb.append(this.databases);
      }
      first = false;
    }
    if (isSetTables()) {
      if (!first) sb.append(", ");
      sb.append("tables:");
      if (this.tables == null) {
        sb.append("null");
      } else {
        sb.append(this.tables);
      }
      first = false;
    }
    if (isSetPartitions()) {
      if (!first) sb.append(", ");
      sb.append("partitions:");
      if (this.partitions == null) {
        sb.append("null");
      } else {
        sb.append(this.partitions);
      }
      first = false;
    }
    if (isSetWriteIds()) {
      if (!first) sb.append(", ");
      sb.append("writeIds:");
      if (this.writeIds == null) {
        sb.append("null");
      } else {
        sb.append(this.writeIds);
      }
      first = false;
    }
    if (isSetTableObjs()) {
      if (!first) sb.append(", ");
      sb.append("tableObjs:");
      if (this.tableObjs == null) {
        sb.append("null");
      } else {
        sb.append(this.tableObjs);
      }
      first = false;
    }
    if (isSetFiles()) {
      if (!first) sb.append(", ");
      sb.append("files:");
      if (this.files == null) {
        sb.append("null");
      } else {
        sb.append(this.files);
      }
      first = false;
    }
    if (isSetPartitionObjs()) {
      if (!first) sb.append(", ");
      sb.append("partitionObjs:");
      if (this.partitionObjs == null) {
        sb.append("null");
      } else {
        sb.append(this.partitionObjs);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetTxnid()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'txnid' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WriteEventInfoStandardSchemeFactory implements SchemeFactory {
    public WriteEventInfoStandardScheme getScheme() {
      return new WriteEventInfoStandardScheme();
    }
  }

  private static class WriteEventInfoStandardScheme extends StandardScheme<WriteEventInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WriteEventInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TXNID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.txnid = iprot.readI64();
              struct.setTxnidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATABASES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list612 = iprot.readListBegin();
                struct.databases = new ArrayList<String>(_list612.size);
                String _elem613;
                for (int _i614 = 0; _i614 < _list612.size; ++_i614)
                {
                  _elem613 = iprot.readString();
                  struct.databases.add(_elem613);
                }
                iprot.readListEnd();
              }
              struct.setDatabasesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list615 = iprot.readListBegin();
                struct.tables = new ArrayList<String>(_list615.size);
                String _elem616;
                for (int _i617 = 0; _i617 < _list615.size; ++_i617)
                {
                  _elem616 = iprot.readString();
                  struct.tables.add(_elem616);
                }
                iprot.readListEnd();
              }
              struct.setTablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list618 = iprot.readListBegin();
                struct.partitions = new ArrayList<String>(_list618.size);
                String _elem619;
                for (int _i620 = 0; _i620 < _list618.size; ++_i620)
                {
                  _elem619 = iprot.readString();
                  struct.partitions.add(_elem619);
                }
                iprot.readListEnd();
              }
              struct.setPartitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WRITE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list621 = iprot.readListBegin();
                struct.writeIds = new ArrayList<Long>(_list621.size);
                long _elem622;
                for (int _i623 = 0; _i623 < _list621.size; ++_i623)
                {
                  _elem622 = iprot.readI64();
                  struct.writeIds.add(_elem622);
                }
                iprot.readListEnd();
              }
              struct.setWriteIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TABLE_OBJS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list624 = iprot.readListBegin();
                struct.tableObjs = new ArrayList<String>(_list624.size);
                String _elem625;
                for (int _i626 = 0; _i626 < _list624.size; ++_i626)
                {
                  _elem625 = iprot.readString();
                  struct.tableObjs.add(_elem625);
                }
                iprot.readListEnd();
              }
              struct.setTableObjsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list627 = iprot.readListBegin();
                struct.files = new ArrayList<String>(_list627.size);
                String _elem628;
                for (int _i629 = 0; _i629 < _list627.size; ++_i629)
                {
                  _elem628 = iprot.readString();
                  struct.files.add(_elem628);
                }
                iprot.readListEnd();
              }
              struct.setFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARTITION_OBJS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list630 = iprot.readListBegin();
                struct.partitionObjs = new ArrayList<String>(_list630.size);
                String _elem631;
                for (int _i632 = 0; _i632 < _list630.size; ++_i632)
                {
                  _elem631 = iprot.readString();
                  struct.partitionObjs.add(_elem631);
                }
                iprot.readListEnd();
              }
              struct.setPartitionObjsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WriteEventInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TXNID_FIELD_DESC);
      oprot.writeI64(struct.txnid);
      oprot.writeFieldEnd();
      if (struct.databases != null) {
        if (struct.isSetDatabases()) {
          oprot.writeFieldBegin(DATABASES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.databases.size()));
            for (String _iter633 : struct.databases)
            {
              oprot.writeString(_iter633);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tables != null) {
        if (struct.isSetTables()) {
          oprot.writeFieldBegin(TABLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tables.size()));
            for (String _iter634 : struct.tables)
            {
              oprot.writeString(_iter634);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.partitions != null) {
        if (struct.isSetPartitions()) {
          oprot.writeFieldBegin(PARTITIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.partitions.size()));
            for (String _iter635 : struct.partitions)
            {
              oprot.writeString(_iter635);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.writeIds != null) {
        if (struct.isSetWriteIds()) {
          oprot.writeFieldBegin(WRITE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.writeIds.size()));
            for (long _iter636 : struct.writeIds)
            {
              oprot.writeI64(_iter636);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tableObjs != null) {
        if (struct.isSetTableObjs()) {
          oprot.writeFieldBegin(TABLE_OBJS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tableObjs.size()));
            for (String _iter637 : struct.tableObjs)
            {
              oprot.writeString(_iter637);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.files != null) {
        if (struct.isSetFiles()) {
          oprot.writeFieldBegin(FILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.files.size()));
            for (String _iter638 : struct.files)
            {
              oprot.writeString(_iter638);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.partitionObjs != null) {
        if (struct.isSetPartitionObjs()) {
          oprot.writeFieldBegin(PARTITION_OBJS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.partitionObjs.size()));
            for (String _iter639 : struct.partitionObjs)
            {
              oprot.writeString(_iter639);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WriteEventInfoTupleSchemeFactory implements SchemeFactory {
    public WriteEventInfoTupleScheme getScheme() {
      return new WriteEventInfoTupleScheme();
    }
  }

  private static class WriteEventInfoTupleScheme extends TupleScheme<WriteEventInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WriteEventInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.txnid);
      BitSet optionals = new BitSet();
      if (struct.isSetDatabases()) {
        optionals.set(0);
      }
      if (struct.isSetTables()) {
        optionals.set(1);
      }
      if (struct.isSetPartitions()) {
        optionals.set(2);
      }
      if (struct.isSetWriteIds()) {
        optionals.set(3);
      }
      if (struct.isSetTableObjs()) {
        optionals.set(4);
      }
      if (struct.isSetFiles()) {
        optionals.set(5);
      }
      if (struct.isSetPartitionObjs()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetDatabases()) {
        {
          oprot.writeI32(struct.databases.size());
          for (String _iter640 : struct.databases)
          {
            oprot.writeString(_iter640);
          }
        }
      }
      if (struct.isSetTables()) {
        {
          oprot.writeI32(struct.tables.size());
          for (String _iter641 : struct.tables)
          {
            oprot.writeString(_iter641);
          }
        }
      }
      if (struct.isSetPartitions()) {
        {
          oprot.writeI32(struct.partitions.size());
          for (String _iter642 : struct.partitions)
          {
            oprot.writeString(_iter642);
          }
        }
      }
      if (struct.isSetWriteIds()) {
        {
          oprot.writeI32(struct.writeIds.size());
          for (long _iter643 : struct.writeIds)
          {
            oprot.writeI64(_iter643);
          }
        }
      }
      if (struct.isSetTableObjs()) {
        {
          oprot.writeI32(struct.tableObjs.size());
          for (String _iter644 : struct.tableObjs)
          {
            oprot.writeString(_iter644);
          }
        }
      }
      if (struct.isSetFiles()) {
        {
          oprot.writeI32(struct.files.size());
          for (String _iter645 : struct.files)
          {
            oprot.writeString(_iter645);
          }
        }
      }
      if (struct.isSetPartitionObjs()) {
        {
          oprot.writeI32(struct.partitionObjs.size());
          for (String _iter646 : struct.partitionObjs)
          {
            oprot.writeString(_iter646);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WriteEventInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.txnid = iprot.readI64();
      struct.setTxnidIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list647 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.databases = new ArrayList<String>(_list647.size);
          String _elem648;
          for (int _i649 = 0; _i649 < _list647.size; ++_i649)
          {
            _elem648 = iprot.readString();
            struct.databases.add(_elem648);
          }
        }
        struct.setDatabasesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list650 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tables = new ArrayList<String>(_list650.size);
          String _elem651;
          for (int _i652 = 0; _i652 < _list650.size; ++_i652)
          {
            _elem651 = iprot.readString();
            struct.tables.add(_elem651);
          }
        }
        struct.setTablesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list653 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.partitions = new ArrayList<String>(_list653.size);
          String _elem654;
          for (int _i655 = 0; _i655 < _list653.size; ++_i655)
          {
            _elem654 = iprot.readString();
            struct.partitions.add(_elem654);
          }
        }
        struct.setPartitionsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list656 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.writeIds = new ArrayList<Long>(_list656.size);
          long _elem657;
          for (int _i658 = 0; _i658 < _list656.size; ++_i658)
          {
            _elem657 = iprot.readI64();
            struct.writeIds.add(_elem657);
          }
        }
        struct.setWriteIdsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list659 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tableObjs = new ArrayList<String>(_list659.size);
          String _elem660;
          for (int _i661 = 0; _i661 < _list659.size; ++_i661)
          {
            _elem660 = iprot.readString();
            struct.tableObjs.add(_elem660);
          }
        }
        struct.setTableObjsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list662 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.files = new ArrayList<String>(_list662.size);
          String _elem663;
          for (int _i664 = 0; _i664 < _list662.size; ++_i664)
          {
            _elem663 = iprot.readString();
            struct.files.add(_elem663);
          }
        }
        struct.setFilesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list665 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.partitionObjs = new ArrayList<String>(_list665.size);
          String _elem666;
          for (int _i667 = 0; _i667 < _list665.size; ++_i667)
          {
            _elem666 = iprot.readString();
            struct.partitionObjs.add(_elem666);
          }
        }
        struct.setPartitionObjsIsSet(true);
      }
    }
  }

}

