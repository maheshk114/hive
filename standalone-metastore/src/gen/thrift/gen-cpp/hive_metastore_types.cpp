/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "hive_metastore_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Apache { namespace Hadoop { namespace Hive {

int _kHiveObjectTypeValues[] = {
  HiveObjectType::GLOBAL,
  HiveObjectType::DATABASE,
  HiveObjectType::TABLE,
  HiveObjectType::PARTITION,
  HiveObjectType::COLUMN
};
const char* _kHiveObjectTypeNames[] = {
  "GLOBAL",
  "DATABASE",
  "TABLE",
  "PARTITION",
  "COLUMN"
};
const std::map<int, const char*> _HiveObjectType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kHiveObjectTypeValues, _kHiveObjectTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPrincipalTypeValues[] = {
  PrincipalType::USER,
  PrincipalType::ROLE,
  PrincipalType::GROUP
};
const char* _kPrincipalTypeNames[] = {
  "USER",
  "ROLE",
  "GROUP"
};
const std::map<int, const char*> _PrincipalType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kPrincipalTypeValues, _kPrincipalTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPartitionEventTypeValues[] = {
  PartitionEventType::LOAD_DONE
};
const char* _kPartitionEventTypeNames[] = {
  "LOAD_DONE"
};
const std::map<int, const char*> _PartitionEventType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kPartitionEventTypeValues, _kPartitionEventTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTxnStateValues[] = {
  TxnState::COMMITTED,
  TxnState::ABORTED,
  TxnState::OPEN
};
const char* _kTxnStateNames[] = {
  "COMMITTED",
  "ABORTED",
  "OPEN"
};
const std::map<int, const char*> _TxnState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTxnStateValues, _kTxnStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kLockLevelValues[] = {
  LockLevel::DB,
  LockLevel::TABLE,
  LockLevel::PARTITION
};
const char* _kLockLevelNames[] = {
  "DB",
  "TABLE",
  "PARTITION"
};
const std::map<int, const char*> _LockLevel_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kLockLevelValues, _kLockLevelNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kLockStateValues[] = {
  LockState::ACQUIRED,
  LockState::WAITING,
  LockState::ABORT,
  LockState::NOT_ACQUIRED
};
const char* _kLockStateNames[] = {
  "ACQUIRED",
  "WAITING",
  "ABORT",
  "NOT_ACQUIRED"
};
const std::map<int, const char*> _LockState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kLockStateValues, _kLockStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kLockTypeValues[] = {
  LockType::SHARED_READ,
  LockType::SHARED_WRITE,
  LockType::EXCLUSIVE
};
const char* _kLockTypeNames[] = {
  "SHARED_READ",
  "SHARED_WRITE",
  "EXCLUSIVE"
};
const std::map<int, const char*> _LockType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kLockTypeValues, _kLockTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCompactionTypeValues[] = {
  CompactionType::MINOR,
  CompactionType::MAJOR
};
const char* _kCompactionTypeNames[] = {
  "MINOR",
  "MAJOR"
};
const std::map<int, const char*> _CompactionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kCompactionTypeValues, _kCompactionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kGrantRevokeTypeValues[] = {
  GrantRevokeType::GRANT,
  GrantRevokeType::REVOKE
};
const char* _kGrantRevokeTypeNames[] = {
  "GRANT",
  "REVOKE"
};
const std::map<int, const char*> _GrantRevokeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kGrantRevokeTypeValues, _kGrantRevokeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDataOperationTypeValues[] = {
  DataOperationType::SELECT,
  DataOperationType::INSERT,
  DataOperationType::UPDATE,
  DataOperationType::DELETE,
  DataOperationType::UNSET,
  DataOperationType::NO_TXN
};
const char* _kDataOperationTypeNames[] = {
  "SELECT",
  "INSERT",
  "UPDATE",
  "DELETE",
  "UNSET",
  "NO_TXN"
};
const std::map<int, const char*> _DataOperationType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kDataOperationTypeValues, _kDataOperationTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kEventRequestTypeValues[] = {
  EventRequestType::INSERT,
  EventRequestType::UPDATE,
  EventRequestType::DELETE
};
const char* _kEventRequestTypeNames[] = {
  "INSERT",
  "UPDATE",
  "DELETE"
};
const std::map<int, const char*> _EventRequestType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kEventRequestTypeValues, _kEventRequestTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kFunctionTypeValues[] = {
  FunctionType::JAVA
};
const char* _kFunctionTypeNames[] = {
  "JAVA"
};
const std::map<int, const char*> _FunctionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kFunctionTypeValues, _kFunctionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kResourceTypeValues[] = {
  ResourceType::JAR,
  ResourceType::FILE,
  ResourceType::ARCHIVE
};
const char* _kResourceTypeNames[] = {
  "JAR",
  "FILE",
  "ARCHIVE"
};
const std::map<int, const char*> _ResourceType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kResourceTypeValues, _kResourceTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kFileMetadataExprTypeValues[] = {
  FileMetadataExprType::ORC_SARG
};
const char* _kFileMetadataExprTypeNames[] = {
  "ORC_SARG"
};
const std::map<int, const char*> _FileMetadataExprType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kFileMetadataExprTypeValues, _kFileMetadataExprTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kClientCapabilityValues[] = {
  ClientCapability::TEST_CAPABILITY,
  ClientCapability::INSERT_ONLY_TABLES
};
const char* _kClientCapabilityNames[] = {
  "TEST_CAPABILITY",
  "INSERT_ONLY_TABLES"
};
const std::map<int, const char*> _ClientCapability_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kClientCapabilityValues, _kClientCapabilityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kWMResourcePlanStatusValues[] = {
  WMResourcePlanStatus::ACTIVE,
  WMResourcePlanStatus::ENABLED,
  WMResourcePlanStatus::DISABLED
};
const char* _kWMResourcePlanStatusNames[] = {
  "ACTIVE",
  "ENABLED",
  "DISABLED"
};
const std::map<int, const char*> _WMResourcePlanStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kWMResourcePlanStatusValues, _kWMResourcePlanStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kWMPoolSchedulingPolicyValues[] = {
  WMPoolSchedulingPolicy::FAIR,
  WMPoolSchedulingPolicy::FIFO
};
const char* _kWMPoolSchedulingPolicyNames[] = {
  "FAIR",
  "FIFO"
};
const std::map<int, const char*> _WMPoolSchedulingPolicy_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kWMPoolSchedulingPolicyValues, _kWMPoolSchedulingPolicyNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Version::~Version() throw() {
}


void Version::__set_version(const std::string& val) {
  this->version = val;
}

void Version::__set_comments(const std::string& val) {
  this->comments = val;
}

uint32_t Version::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comments);
          this->__isset.comments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Version::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Version");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comments", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->comments);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Version &a, Version &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.comments, b.comments);
  swap(a.__isset, b.__isset);
}

Version::Version(const Version& other0) {
  version = other0.version;
  comments = other0.comments;
  __isset = other0.__isset;
}
Version& Version::operator=(const Version& other1) {
  version = other1.version;
  comments = other1.comments;
  __isset = other1.__isset;
  return *this;
}
void Version::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Version(";
  out << "version=" << to_string(version);
  out << ", " << "comments=" << to_string(comments);
  out << ")";
}


FieldSchema::~FieldSchema() throw() {
}


void FieldSchema::__set_name(const std::string& val) {
  this->name = val;
}

void FieldSchema::__set_type(const std::string& val) {
  this->type = val;
}

void FieldSchema::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t FieldSchema::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FieldSchema::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FieldSchema");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FieldSchema &a, FieldSchema &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.type, b.type);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

FieldSchema::FieldSchema(const FieldSchema& other2) {
  name = other2.name;
  type = other2.type;
  comment = other2.comment;
  __isset = other2.__isset;
}
FieldSchema& FieldSchema::operator=(const FieldSchema& other3) {
  name = other3.name;
  type = other3.type;
  comment = other3.comment;
  __isset = other3.__isset;
  return *this;
}
void FieldSchema::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FieldSchema(";
  out << "name=" << to_string(name);
  out << ", " << "type=" << to_string(type);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


SQLPrimaryKey::~SQLPrimaryKey() throw() {
}


void SQLPrimaryKey::__set_table_db(const std::string& val) {
  this->table_db = val;
}

void SQLPrimaryKey::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void SQLPrimaryKey::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void SQLPrimaryKey::__set_key_seq(const int32_t val) {
  this->key_seq = val;
}

void SQLPrimaryKey::__set_pk_name(const std::string& val) {
  this->pk_name = val;
}

void SQLPrimaryKey::__set_enable_cstr(const bool val) {
  this->enable_cstr = val;
}

void SQLPrimaryKey::__set_validate_cstr(const bool val) {
  this->validate_cstr = val;
}

void SQLPrimaryKey::__set_rely_cstr(const bool val) {
  this->rely_cstr = val;
}

uint32_t SQLPrimaryKey::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_db);
          this->__isset.table_db = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_name);
          this->__isset.column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->key_seq);
          this->__isset.key_seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pk_name);
          this->__isset.pk_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_cstr);
          this->__isset.enable_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->validate_cstr);
          this->__isset.validate_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->rely_cstr);
          this->__isset.rely_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SQLPrimaryKey::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SQLPrimaryKey");

  xfer += oprot->writeFieldBegin("table_db", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->table_db);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->column_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key_seq", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->key_seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pk_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->pk_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable_cstr", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->enable_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validate_cstr", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->validate_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rely_cstr", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->rely_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SQLPrimaryKey &a, SQLPrimaryKey &b) {
  using ::std::swap;
  swap(a.table_db, b.table_db);
  swap(a.table_name, b.table_name);
  swap(a.column_name, b.column_name);
  swap(a.key_seq, b.key_seq);
  swap(a.pk_name, b.pk_name);
  swap(a.enable_cstr, b.enable_cstr);
  swap(a.validate_cstr, b.validate_cstr);
  swap(a.rely_cstr, b.rely_cstr);
  swap(a.__isset, b.__isset);
}

SQLPrimaryKey::SQLPrimaryKey(const SQLPrimaryKey& other4) {
  table_db = other4.table_db;
  table_name = other4.table_name;
  column_name = other4.column_name;
  key_seq = other4.key_seq;
  pk_name = other4.pk_name;
  enable_cstr = other4.enable_cstr;
  validate_cstr = other4.validate_cstr;
  rely_cstr = other4.rely_cstr;
  __isset = other4.__isset;
}
SQLPrimaryKey& SQLPrimaryKey::operator=(const SQLPrimaryKey& other5) {
  table_db = other5.table_db;
  table_name = other5.table_name;
  column_name = other5.column_name;
  key_seq = other5.key_seq;
  pk_name = other5.pk_name;
  enable_cstr = other5.enable_cstr;
  validate_cstr = other5.validate_cstr;
  rely_cstr = other5.rely_cstr;
  __isset = other5.__isset;
  return *this;
}
void SQLPrimaryKey::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SQLPrimaryKey(";
  out << "table_db=" << to_string(table_db);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "column_name=" << to_string(column_name);
  out << ", " << "key_seq=" << to_string(key_seq);
  out << ", " << "pk_name=" << to_string(pk_name);
  out << ", " << "enable_cstr=" << to_string(enable_cstr);
  out << ", " << "validate_cstr=" << to_string(validate_cstr);
  out << ", " << "rely_cstr=" << to_string(rely_cstr);
  out << ")";
}


SQLForeignKey::~SQLForeignKey() throw() {
}


void SQLForeignKey::__set_pktable_db(const std::string& val) {
  this->pktable_db = val;
}

void SQLForeignKey::__set_pktable_name(const std::string& val) {
  this->pktable_name = val;
}

void SQLForeignKey::__set_pkcolumn_name(const std::string& val) {
  this->pkcolumn_name = val;
}

void SQLForeignKey::__set_fktable_db(const std::string& val) {
  this->fktable_db = val;
}

void SQLForeignKey::__set_fktable_name(const std::string& val) {
  this->fktable_name = val;
}

void SQLForeignKey::__set_fkcolumn_name(const std::string& val) {
  this->fkcolumn_name = val;
}

void SQLForeignKey::__set_key_seq(const int32_t val) {
  this->key_seq = val;
}

void SQLForeignKey::__set_update_rule(const int32_t val) {
  this->update_rule = val;
}

void SQLForeignKey::__set_delete_rule(const int32_t val) {
  this->delete_rule = val;
}

void SQLForeignKey::__set_fk_name(const std::string& val) {
  this->fk_name = val;
}

void SQLForeignKey::__set_pk_name(const std::string& val) {
  this->pk_name = val;
}

void SQLForeignKey::__set_enable_cstr(const bool val) {
  this->enable_cstr = val;
}

void SQLForeignKey::__set_validate_cstr(const bool val) {
  this->validate_cstr = val;
}

void SQLForeignKey::__set_rely_cstr(const bool val) {
  this->rely_cstr = val;
}

uint32_t SQLForeignKey::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pktable_db);
          this->__isset.pktable_db = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pktable_name);
          this->__isset.pktable_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pkcolumn_name);
          this->__isset.pkcolumn_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fktable_db);
          this->__isset.fktable_db = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fktable_name);
          this->__isset.fktable_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fkcolumn_name);
          this->__isset.fkcolumn_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->key_seq);
          this->__isset.key_seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->update_rule);
          this->__isset.update_rule = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->delete_rule);
          this->__isset.delete_rule = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fk_name);
          this->__isset.fk_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pk_name);
          this->__isset.pk_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_cstr);
          this->__isset.enable_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->validate_cstr);
          this->__isset.validate_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->rely_cstr);
          this->__isset.rely_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SQLForeignKey::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SQLForeignKey");

  xfer += oprot->writeFieldBegin("pktable_db", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->pktable_db);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pktable_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->pktable_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pkcolumn_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->pkcolumn_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fktable_db", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->fktable_db);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fktable_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->fktable_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fkcolumn_name", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->fkcolumn_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key_seq", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->key_seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("update_rule", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->update_rule);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("delete_rule", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->delete_rule);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fk_name", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->fk_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pk_name", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->pk_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable_cstr", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->enable_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validate_cstr", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->validate_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rely_cstr", ::apache::thrift::protocol::T_BOOL, 14);
  xfer += oprot->writeBool(this->rely_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SQLForeignKey &a, SQLForeignKey &b) {
  using ::std::swap;
  swap(a.pktable_db, b.pktable_db);
  swap(a.pktable_name, b.pktable_name);
  swap(a.pkcolumn_name, b.pkcolumn_name);
  swap(a.fktable_db, b.fktable_db);
  swap(a.fktable_name, b.fktable_name);
  swap(a.fkcolumn_name, b.fkcolumn_name);
  swap(a.key_seq, b.key_seq);
  swap(a.update_rule, b.update_rule);
  swap(a.delete_rule, b.delete_rule);
  swap(a.fk_name, b.fk_name);
  swap(a.pk_name, b.pk_name);
  swap(a.enable_cstr, b.enable_cstr);
  swap(a.validate_cstr, b.validate_cstr);
  swap(a.rely_cstr, b.rely_cstr);
  swap(a.__isset, b.__isset);
}

SQLForeignKey::SQLForeignKey(const SQLForeignKey& other6) {
  pktable_db = other6.pktable_db;
  pktable_name = other6.pktable_name;
  pkcolumn_name = other6.pkcolumn_name;
  fktable_db = other6.fktable_db;
  fktable_name = other6.fktable_name;
  fkcolumn_name = other6.fkcolumn_name;
  key_seq = other6.key_seq;
  update_rule = other6.update_rule;
  delete_rule = other6.delete_rule;
  fk_name = other6.fk_name;
  pk_name = other6.pk_name;
  enable_cstr = other6.enable_cstr;
  validate_cstr = other6.validate_cstr;
  rely_cstr = other6.rely_cstr;
  __isset = other6.__isset;
}
SQLForeignKey& SQLForeignKey::operator=(const SQLForeignKey& other7) {
  pktable_db = other7.pktable_db;
  pktable_name = other7.pktable_name;
  pkcolumn_name = other7.pkcolumn_name;
  fktable_db = other7.fktable_db;
  fktable_name = other7.fktable_name;
  fkcolumn_name = other7.fkcolumn_name;
  key_seq = other7.key_seq;
  update_rule = other7.update_rule;
  delete_rule = other7.delete_rule;
  fk_name = other7.fk_name;
  pk_name = other7.pk_name;
  enable_cstr = other7.enable_cstr;
  validate_cstr = other7.validate_cstr;
  rely_cstr = other7.rely_cstr;
  __isset = other7.__isset;
  return *this;
}
void SQLForeignKey::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SQLForeignKey(";
  out << "pktable_db=" << to_string(pktable_db);
  out << ", " << "pktable_name=" << to_string(pktable_name);
  out << ", " << "pkcolumn_name=" << to_string(pkcolumn_name);
  out << ", " << "fktable_db=" << to_string(fktable_db);
  out << ", " << "fktable_name=" << to_string(fktable_name);
  out << ", " << "fkcolumn_name=" << to_string(fkcolumn_name);
  out << ", " << "key_seq=" << to_string(key_seq);
  out << ", " << "update_rule=" << to_string(update_rule);
  out << ", " << "delete_rule=" << to_string(delete_rule);
  out << ", " << "fk_name=" << to_string(fk_name);
  out << ", " << "pk_name=" << to_string(pk_name);
  out << ", " << "enable_cstr=" << to_string(enable_cstr);
  out << ", " << "validate_cstr=" << to_string(validate_cstr);
  out << ", " << "rely_cstr=" << to_string(rely_cstr);
  out << ")";
}


SQLUniqueConstraint::~SQLUniqueConstraint() throw() {
}


void SQLUniqueConstraint::__set_table_db(const std::string& val) {
  this->table_db = val;
}

void SQLUniqueConstraint::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void SQLUniqueConstraint::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void SQLUniqueConstraint::__set_key_seq(const int32_t val) {
  this->key_seq = val;
}

void SQLUniqueConstraint::__set_uk_name(const std::string& val) {
  this->uk_name = val;
}

void SQLUniqueConstraint::__set_enable_cstr(const bool val) {
  this->enable_cstr = val;
}

void SQLUniqueConstraint::__set_validate_cstr(const bool val) {
  this->validate_cstr = val;
}

void SQLUniqueConstraint::__set_rely_cstr(const bool val) {
  this->rely_cstr = val;
}

uint32_t SQLUniqueConstraint::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_db);
          this->__isset.table_db = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_name);
          this->__isset.column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->key_seq);
          this->__isset.key_seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uk_name);
          this->__isset.uk_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_cstr);
          this->__isset.enable_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->validate_cstr);
          this->__isset.validate_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->rely_cstr);
          this->__isset.rely_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SQLUniqueConstraint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SQLUniqueConstraint");

  xfer += oprot->writeFieldBegin("table_db", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->table_db);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->column_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key_seq", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->key_seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uk_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->uk_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable_cstr", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->enable_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validate_cstr", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->validate_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rely_cstr", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->rely_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SQLUniqueConstraint &a, SQLUniqueConstraint &b) {
  using ::std::swap;
  swap(a.table_db, b.table_db);
  swap(a.table_name, b.table_name);
  swap(a.column_name, b.column_name);
  swap(a.key_seq, b.key_seq);
  swap(a.uk_name, b.uk_name);
  swap(a.enable_cstr, b.enable_cstr);
  swap(a.validate_cstr, b.validate_cstr);
  swap(a.rely_cstr, b.rely_cstr);
  swap(a.__isset, b.__isset);
}

SQLUniqueConstraint::SQLUniqueConstraint(const SQLUniqueConstraint& other8) {
  table_db = other8.table_db;
  table_name = other8.table_name;
  column_name = other8.column_name;
  key_seq = other8.key_seq;
  uk_name = other8.uk_name;
  enable_cstr = other8.enable_cstr;
  validate_cstr = other8.validate_cstr;
  rely_cstr = other8.rely_cstr;
  __isset = other8.__isset;
}
SQLUniqueConstraint& SQLUniqueConstraint::operator=(const SQLUniqueConstraint& other9) {
  table_db = other9.table_db;
  table_name = other9.table_name;
  column_name = other9.column_name;
  key_seq = other9.key_seq;
  uk_name = other9.uk_name;
  enable_cstr = other9.enable_cstr;
  validate_cstr = other9.validate_cstr;
  rely_cstr = other9.rely_cstr;
  __isset = other9.__isset;
  return *this;
}
void SQLUniqueConstraint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SQLUniqueConstraint(";
  out << "table_db=" << to_string(table_db);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "column_name=" << to_string(column_name);
  out << ", " << "key_seq=" << to_string(key_seq);
  out << ", " << "uk_name=" << to_string(uk_name);
  out << ", " << "enable_cstr=" << to_string(enable_cstr);
  out << ", " << "validate_cstr=" << to_string(validate_cstr);
  out << ", " << "rely_cstr=" << to_string(rely_cstr);
  out << ")";
}


SQLNotNullConstraint::~SQLNotNullConstraint() throw() {
}


void SQLNotNullConstraint::__set_table_db(const std::string& val) {
  this->table_db = val;
}

void SQLNotNullConstraint::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void SQLNotNullConstraint::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void SQLNotNullConstraint::__set_nn_name(const std::string& val) {
  this->nn_name = val;
}

void SQLNotNullConstraint::__set_enable_cstr(const bool val) {
  this->enable_cstr = val;
}

void SQLNotNullConstraint::__set_validate_cstr(const bool val) {
  this->validate_cstr = val;
}

void SQLNotNullConstraint::__set_rely_cstr(const bool val) {
  this->rely_cstr = val;
}

uint32_t SQLNotNullConstraint::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_db);
          this->__isset.table_db = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_name);
          this->__isset.column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nn_name);
          this->__isset.nn_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_cstr);
          this->__isset.enable_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->validate_cstr);
          this->__isset.validate_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->rely_cstr);
          this->__isset.rely_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SQLNotNullConstraint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SQLNotNullConstraint");

  xfer += oprot->writeFieldBegin("table_db", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->table_db);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->column_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nn_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->nn_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable_cstr", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->enable_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validate_cstr", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->validate_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rely_cstr", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->rely_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SQLNotNullConstraint &a, SQLNotNullConstraint &b) {
  using ::std::swap;
  swap(a.table_db, b.table_db);
  swap(a.table_name, b.table_name);
  swap(a.column_name, b.column_name);
  swap(a.nn_name, b.nn_name);
  swap(a.enable_cstr, b.enable_cstr);
  swap(a.validate_cstr, b.validate_cstr);
  swap(a.rely_cstr, b.rely_cstr);
  swap(a.__isset, b.__isset);
}

SQLNotNullConstraint::SQLNotNullConstraint(const SQLNotNullConstraint& other10) {
  table_db = other10.table_db;
  table_name = other10.table_name;
  column_name = other10.column_name;
  nn_name = other10.nn_name;
  enable_cstr = other10.enable_cstr;
  validate_cstr = other10.validate_cstr;
  rely_cstr = other10.rely_cstr;
  __isset = other10.__isset;
}
SQLNotNullConstraint& SQLNotNullConstraint::operator=(const SQLNotNullConstraint& other11) {
  table_db = other11.table_db;
  table_name = other11.table_name;
  column_name = other11.column_name;
  nn_name = other11.nn_name;
  enable_cstr = other11.enable_cstr;
  validate_cstr = other11.validate_cstr;
  rely_cstr = other11.rely_cstr;
  __isset = other11.__isset;
  return *this;
}
void SQLNotNullConstraint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SQLNotNullConstraint(";
  out << "table_db=" << to_string(table_db);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "column_name=" << to_string(column_name);
  out << ", " << "nn_name=" << to_string(nn_name);
  out << ", " << "enable_cstr=" << to_string(enable_cstr);
  out << ", " << "validate_cstr=" << to_string(validate_cstr);
  out << ", " << "rely_cstr=" << to_string(rely_cstr);
  out << ")";
}


SQLDefaultConstraint::~SQLDefaultConstraint() throw() {
}


void SQLDefaultConstraint::__set_table_db(const std::string& val) {
  this->table_db = val;
}

void SQLDefaultConstraint::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void SQLDefaultConstraint::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void SQLDefaultConstraint::__set_default_value(const std::string& val) {
  this->default_value = val;
}

void SQLDefaultConstraint::__set_dc_name(const std::string& val) {
  this->dc_name = val;
}

void SQLDefaultConstraint::__set_enable_cstr(const bool val) {
  this->enable_cstr = val;
}

void SQLDefaultConstraint::__set_validate_cstr(const bool val) {
  this->validate_cstr = val;
}

void SQLDefaultConstraint::__set_rely_cstr(const bool val) {
  this->rely_cstr = val;
}

uint32_t SQLDefaultConstraint::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_db);
          this->__isset.table_db = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_name);
          this->__isset.column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->default_value);
          this->__isset.default_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dc_name);
          this->__isset.dc_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_cstr);
          this->__isset.enable_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->validate_cstr);
          this->__isset.validate_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->rely_cstr);
          this->__isset.rely_cstr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SQLDefaultConstraint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SQLDefaultConstraint");

  xfer += oprot->writeFieldBegin("table_db", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->table_db);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->column_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("default_value", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->default_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dc_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->dc_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable_cstr", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->enable_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validate_cstr", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->validate_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rely_cstr", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->rely_cstr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SQLDefaultConstraint &a, SQLDefaultConstraint &b) {
  using ::std::swap;
  swap(a.table_db, b.table_db);
  swap(a.table_name, b.table_name);
  swap(a.column_name, b.column_name);
  swap(a.default_value, b.default_value);
  swap(a.dc_name, b.dc_name);
  swap(a.enable_cstr, b.enable_cstr);
  swap(a.validate_cstr, b.validate_cstr);
  swap(a.rely_cstr, b.rely_cstr);
  swap(a.__isset, b.__isset);
}

SQLDefaultConstraint::SQLDefaultConstraint(const SQLDefaultConstraint& other12) {
  table_db = other12.table_db;
  table_name = other12.table_name;
  column_name = other12.column_name;
  default_value = other12.default_value;
  dc_name = other12.dc_name;
  enable_cstr = other12.enable_cstr;
  validate_cstr = other12.validate_cstr;
  rely_cstr = other12.rely_cstr;
  __isset = other12.__isset;
}
SQLDefaultConstraint& SQLDefaultConstraint::operator=(const SQLDefaultConstraint& other13) {
  table_db = other13.table_db;
  table_name = other13.table_name;
  column_name = other13.column_name;
  default_value = other13.default_value;
  dc_name = other13.dc_name;
  enable_cstr = other13.enable_cstr;
  validate_cstr = other13.validate_cstr;
  rely_cstr = other13.rely_cstr;
  __isset = other13.__isset;
  return *this;
}
void SQLDefaultConstraint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SQLDefaultConstraint(";
  out << "table_db=" << to_string(table_db);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "column_name=" << to_string(column_name);
  out << ", " << "default_value=" << to_string(default_value);
  out << ", " << "dc_name=" << to_string(dc_name);
  out << ", " << "enable_cstr=" << to_string(enable_cstr);
  out << ", " << "validate_cstr=" << to_string(validate_cstr);
  out << ", " << "rely_cstr=" << to_string(rely_cstr);
  out << ")";
}


Type::~Type() throw() {
}


void Type::__set_name(const std::string& val) {
  this->name = val;
}

void Type::__set_type1(const std::string& val) {
  this->type1 = val;
__isset.type1 = true;
}

void Type::__set_type2(const std::string& val) {
  this->type2 = val;
__isset.type2 = true;
}

void Type::__set_fields(const std::vector<FieldSchema> & val) {
  this->fields = val;
__isset.fields = true;
}

uint32_t Type::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type1);
          this->__isset.type1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type2);
          this->__isset.type2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fields.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            xfer += iprot->readListBegin(_etype17, _size14);
            this->fields.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += this->fields[_i18].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.fields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Type::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Type");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.type1) {
    xfer += oprot->writeFieldBegin("type1", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->type1);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.type2) {
    xfer += oprot->writeFieldBegin("type2", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->type2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fields) {
    xfer += oprot->writeFieldBegin("fields", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fields.size()));
      std::vector<FieldSchema> ::const_iterator _iter19;
      for (_iter19 = this->fields.begin(); _iter19 != this->fields.end(); ++_iter19)
      {
        xfer += (*_iter19).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Type &a, Type &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.type1, b.type1);
  swap(a.type2, b.type2);
  swap(a.fields, b.fields);
  swap(a.__isset, b.__isset);
}

Type::Type(const Type& other20) {
  name = other20.name;
  type1 = other20.type1;
  type2 = other20.type2;
  fields = other20.fields;
  __isset = other20.__isset;
}
Type& Type::operator=(const Type& other21) {
  name = other21.name;
  type1 = other21.type1;
  type2 = other21.type2;
  fields = other21.fields;
  __isset = other21.__isset;
  return *this;
}
void Type::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Type(";
  out << "name=" << to_string(name);
  out << ", " << "type1="; (__isset.type1 ? (out << to_string(type1)) : (out << "<null>"));
  out << ", " << "type2="; (__isset.type2 ? (out << to_string(type2)) : (out << "<null>"));
  out << ", " << "fields="; (__isset.fields ? (out << to_string(fields)) : (out << "<null>"));
  out << ")";
}


HiveObjectRef::~HiveObjectRef() throw() {
}


void HiveObjectRef::__set_objectType(const HiveObjectType::type val) {
  this->objectType = val;
}

void HiveObjectRef::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void HiveObjectRef::__set_objectName(const std::string& val) {
  this->objectName = val;
}

void HiveObjectRef::__set_partValues(const std::vector<std::string> & val) {
  this->partValues = val;
}

void HiveObjectRef::__set_columnName(const std::string& val) {
  this->columnName = val;
}

uint32_t HiveObjectRef::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast22;
          xfer += iprot->readI32(ecast22);
          this->objectType = (HiveObjectType::type)ecast22;
          this->__isset.objectType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          this->__isset.dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->objectName);
          this->__isset.objectName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partValues.clear();
            uint32_t _size23;
            ::apache::thrift::protocol::TType _etype26;
            xfer += iprot->readListBegin(_etype26, _size23);
            this->partValues.resize(_size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              xfer += iprot->readString(this->partValues[_i27]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partValues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->columnName);
          this->__isset.columnName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HiveObjectRef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HiveObjectRef");

  xfer += oprot->writeFieldBegin("objectType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->objectType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objectName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->objectName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partValues", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->partValues.size()));
    std::vector<std::string> ::const_iterator _iter28;
    for (_iter28 = this->partValues.begin(); _iter28 != this->partValues.end(); ++_iter28)
    {
      xfer += oprot->writeString((*_iter28));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("columnName", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->columnName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HiveObjectRef &a, HiveObjectRef &b) {
  using ::std::swap;
  swap(a.objectType, b.objectType);
  swap(a.dbName, b.dbName);
  swap(a.objectName, b.objectName);
  swap(a.partValues, b.partValues);
  swap(a.columnName, b.columnName);
  swap(a.__isset, b.__isset);
}

HiveObjectRef::HiveObjectRef(const HiveObjectRef& other29) {
  objectType = other29.objectType;
  dbName = other29.dbName;
  objectName = other29.objectName;
  partValues = other29.partValues;
  columnName = other29.columnName;
  __isset = other29.__isset;
}
HiveObjectRef& HiveObjectRef::operator=(const HiveObjectRef& other30) {
  objectType = other30.objectType;
  dbName = other30.dbName;
  objectName = other30.objectName;
  partValues = other30.partValues;
  columnName = other30.columnName;
  __isset = other30.__isset;
  return *this;
}
void HiveObjectRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HiveObjectRef(";
  out << "objectType=" << to_string(objectType);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "objectName=" << to_string(objectName);
  out << ", " << "partValues=" << to_string(partValues);
  out << ", " << "columnName=" << to_string(columnName);
  out << ")";
}


PrivilegeGrantInfo::~PrivilegeGrantInfo() throw() {
}


void PrivilegeGrantInfo::__set_privilege(const std::string& val) {
  this->privilege = val;
}

void PrivilegeGrantInfo::__set_createTime(const int32_t val) {
  this->createTime = val;
}

void PrivilegeGrantInfo::__set_grantor(const std::string& val) {
  this->grantor = val;
}

void PrivilegeGrantInfo::__set_grantorType(const PrincipalType::type val) {
  this->grantorType = val;
}

void PrivilegeGrantInfo::__set_grantOption(const bool val) {
  this->grantOption = val;
}

uint32_t PrivilegeGrantInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->privilege);
          this->__isset.privilege = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->grantor);
          this->__isset.grantor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast31;
          xfer += iprot->readI32(ecast31);
          this->grantorType = (PrincipalType::type)ecast31;
          this->__isset.grantorType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->grantOption);
          this->__isset.grantOption = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PrivilegeGrantInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PrivilegeGrantInfo");

  xfer += oprot->writeFieldBegin("privilege", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->privilege);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grantor", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->grantor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grantorType", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->grantorType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grantOption", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->grantOption);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PrivilegeGrantInfo &a, PrivilegeGrantInfo &b) {
  using ::std::swap;
  swap(a.privilege, b.privilege);
  swap(a.createTime, b.createTime);
  swap(a.grantor, b.grantor);
  swap(a.grantorType, b.grantorType);
  swap(a.grantOption, b.grantOption);
  swap(a.__isset, b.__isset);
}

PrivilegeGrantInfo::PrivilegeGrantInfo(const PrivilegeGrantInfo& other32) {
  privilege = other32.privilege;
  createTime = other32.createTime;
  grantor = other32.grantor;
  grantorType = other32.grantorType;
  grantOption = other32.grantOption;
  __isset = other32.__isset;
}
PrivilegeGrantInfo& PrivilegeGrantInfo::operator=(const PrivilegeGrantInfo& other33) {
  privilege = other33.privilege;
  createTime = other33.createTime;
  grantor = other33.grantor;
  grantorType = other33.grantorType;
  grantOption = other33.grantOption;
  __isset = other33.__isset;
  return *this;
}
void PrivilegeGrantInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PrivilegeGrantInfo(";
  out << "privilege=" << to_string(privilege);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "grantor=" << to_string(grantor);
  out << ", " << "grantorType=" << to_string(grantorType);
  out << ", " << "grantOption=" << to_string(grantOption);
  out << ")";
}


HiveObjectPrivilege::~HiveObjectPrivilege() throw() {
}


void HiveObjectPrivilege::__set_hiveObject(const HiveObjectRef& val) {
  this->hiveObject = val;
}

void HiveObjectPrivilege::__set_principalName(const std::string& val) {
  this->principalName = val;
}

void HiveObjectPrivilege::__set_principalType(const PrincipalType::type val) {
  this->principalType = val;
}

void HiveObjectPrivilege::__set_grantInfo(const PrivilegeGrantInfo& val) {
  this->grantInfo = val;
}

uint32_t HiveObjectPrivilege::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->hiveObject.read(iprot);
          this->__isset.hiveObject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->principalName);
          this->__isset.principalName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast34;
          xfer += iprot->readI32(ecast34);
          this->principalType = (PrincipalType::type)ecast34;
          this->__isset.principalType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->grantInfo.read(iprot);
          this->__isset.grantInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HiveObjectPrivilege::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HiveObjectPrivilege");

  xfer += oprot->writeFieldBegin("hiveObject", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->hiveObject.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("principalName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->principalName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("principalType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->principalType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grantInfo", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->grantInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HiveObjectPrivilege &a, HiveObjectPrivilege &b) {
  using ::std::swap;
  swap(a.hiveObject, b.hiveObject);
  swap(a.principalName, b.principalName);
  swap(a.principalType, b.principalType);
  swap(a.grantInfo, b.grantInfo);
  swap(a.__isset, b.__isset);
}

HiveObjectPrivilege::HiveObjectPrivilege(const HiveObjectPrivilege& other35) {
  hiveObject = other35.hiveObject;
  principalName = other35.principalName;
  principalType = other35.principalType;
  grantInfo = other35.grantInfo;
  __isset = other35.__isset;
}
HiveObjectPrivilege& HiveObjectPrivilege::operator=(const HiveObjectPrivilege& other36) {
  hiveObject = other36.hiveObject;
  principalName = other36.principalName;
  principalType = other36.principalType;
  grantInfo = other36.grantInfo;
  __isset = other36.__isset;
  return *this;
}
void HiveObjectPrivilege::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HiveObjectPrivilege(";
  out << "hiveObject=" << to_string(hiveObject);
  out << ", " << "principalName=" << to_string(principalName);
  out << ", " << "principalType=" << to_string(principalType);
  out << ", " << "grantInfo=" << to_string(grantInfo);
  out << ")";
}


PrivilegeBag::~PrivilegeBag() throw() {
}


void PrivilegeBag::__set_privileges(const std::vector<HiveObjectPrivilege> & val) {
  this->privileges = val;
}

uint32_t PrivilegeBag::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->privileges.clear();
            uint32_t _size37;
            ::apache::thrift::protocol::TType _etype40;
            xfer += iprot->readListBegin(_etype40, _size37);
            this->privileges.resize(_size37);
            uint32_t _i41;
            for (_i41 = 0; _i41 < _size37; ++_i41)
            {
              xfer += this->privileges[_i41].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.privileges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PrivilegeBag::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PrivilegeBag");

  xfer += oprot->writeFieldBegin("privileges", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->privileges.size()));
    std::vector<HiveObjectPrivilege> ::const_iterator _iter42;
    for (_iter42 = this->privileges.begin(); _iter42 != this->privileges.end(); ++_iter42)
    {
      xfer += (*_iter42).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PrivilegeBag &a, PrivilegeBag &b) {
  using ::std::swap;
  swap(a.privileges, b.privileges);
  swap(a.__isset, b.__isset);
}

PrivilegeBag::PrivilegeBag(const PrivilegeBag& other43) {
  privileges = other43.privileges;
  __isset = other43.__isset;
}
PrivilegeBag& PrivilegeBag::operator=(const PrivilegeBag& other44) {
  privileges = other44.privileges;
  __isset = other44.__isset;
  return *this;
}
void PrivilegeBag::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PrivilegeBag(";
  out << "privileges=" << to_string(privileges);
  out << ")";
}


PrincipalPrivilegeSet::~PrincipalPrivilegeSet() throw() {
}


void PrincipalPrivilegeSet::__set_userPrivileges(const std::map<std::string, std::vector<PrivilegeGrantInfo> > & val) {
  this->userPrivileges = val;
}

void PrincipalPrivilegeSet::__set_groupPrivileges(const std::map<std::string, std::vector<PrivilegeGrantInfo> > & val) {
  this->groupPrivileges = val;
}

void PrincipalPrivilegeSet::__set_rolePrivileges(const std::map<std::string, std::vector<PrivilegeGrantInfo> > & val) {
  this->rolePrivileges = val;
}

uint32_t PrincipalPrivilegeSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->userPrivileges.clear();
            uint32_t _size45;
            ::apache::thrift::protocol::TType _ktype46;
            ::apache::thrift::protocol::TType _vtype47;
            xfer += iprot->readMapBegin(_ktype46, _vtype47, _size45);
            uint32_t _i49;
            for (_i49 = 0; _i49 < _size45; ++_i49)
            {
              std::string _key50;
              xfer += iprot->readString(_key50);
              std::vector<PrivilegeGrantInfo> & _val51 = this->userPrivileges[_key50];
              {
                _val51.clear();
                uint32_t _size52;
                ::apache::thrift::protocol::TType _etype55;
                xfer += iprot->readListBegin(_etype55, _size52);
                _val51.resize(_size52);
                uint32_t _i56;
                for (_i56 = 0; _i56 < _size52; ++_i56)
                {
                  xfer += _val51[_i56].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.userPrivileges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->groupPrivileges.clear();
            uint32_t _size57;
            ::apache::thrift::protocol::TType _ktype58;
            ::apache::thrift::protocol::TType _vtype59;
            xfer += iprot->readMapBegin(_ktype58, _vtype59, _size57);
            uint32_t _i61;
            for (_i61 = 0; _i61 < _size57; ++_i61)
            {
              std::string _key62;
              xfer += iprot->readString(_key62);
              std::vector<PrivilegeGrantInfo> & _val63 = this->groupPrivileges[_key62];
              {
                _val63.clear();
                uint32_t _size64;
                ::apache::thrift::protocol::TType _etype67;
                xfer += iprot->readListBegin(_etype67, _size64);
                _val63.resize(_size64);
                uint32_t _i68;
                for (_i68 = 0; _i68 < _size64; ++_i68)
                {
                  xfer += _val63[_i68].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.groupPrivileges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->rolePrivileges.clear();
            uint32_t _size69;
            ::apache::thrift::protocol::TType _ktype70;
            ::apache::thrift::protocol::TType _vtype71;
            xfer += iprot->readMapBegin(_ktype70, _vtype71, _size69);
            uint32_t _i73;
            for (_i73 = 0; _i73 < _size69; ++_i73)
            {
              std::string _key74;
              xfer += iprot->readString(_key74);
              std::vector<PrivilegeGrantInfo> & _val75 = this->rolePrivileges[_key74];
              {
                _val75.clear();
                uint32_t _size76;
                ::apache::thrift::protocol::TType _etype79;
                xfer += iprot->readListBegin(_etype79, _size76);
                _val75.resize(_size76);
                uint32_t _i80;
                for (_i80 = 0; _i80 < _size76; ++_i80)
                {
                  xfer += _val75[_i80].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.rolePrivileges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PrincipalPrivilegeSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PrincipalPrivilegeSet");

  xfer += oprot->writeFieldBegin("userPrivileges", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->userPrivileges.size()));
    std::map<std::string, std::vector<PrivilegeGrantInfo> > ::const_iterator _iter81;
    for (_iter81 = this->userPrivileges.begin(); _iter81 != this->userPrivileges.end(); ++_iter81)
    {
      xfer += oprot->writeString(_iter81->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter81->second.size()));
        std::vector<PrivilegeGrantInfo> ::const_iterator _iter82;
        for (_iter82 = _iter81->second.begin(); _iter82 != _iter81->second.end(); ++_iter82)
        {
          xfer += (*_iter82).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groupPrivileges", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->groupPrivileges.size()));
    std::map<std::string, std::vector<PrivilegeGrantInfo> > ::const_iterator _iter83;
    for (_iter83 = this->groupPrivileges.begin(); _iter83 != this->groupPrivileges.end(); ++_iter83)
    {
      xfer += oprot->writeString(_iter83->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter83->second.size()));
        std::vector<PrivilegeGrantInfo> ::const_iterator _iter84;
        for (_iter84 = _iter83->second.begin(); _iter84 != _iter83->second.end(); ++_iter84)
        {
          xfer += (*_iter84).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rolePrivileges", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->rolePrivileges.size()));
    std::map<std::string, std::vector<PrivilegeGrantInfo> > ::const_iterator _iter85;
    for (_iter85 = this->rolePrivileges.begin(); _iter85 != this->rolePrivileges.end(); ++_iter85)
    {
      xfer += oprot->writeString(_iter85->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter85->second.size()));
        std::vector<PrivilegeGrantInfo> ::const_iterator _iter86;
        for (_iter86 = _iter85->second.begin(); _iter86 != _iter85->second.end(); ++_iter86)
        {
          xfer += (*_iter86).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PrincipalPrivilegeSet &a, PrincipalPrivilegeSet &b) {
  using ::std::swap;
  swap(a.userPrivileges, b.userPrivileges);
  swap(a.groupPrivileges, b.groupPrivileges);
  swap(a.rolePrivileges, b.rolePrivileges);
  swap(a.__isset, b.__isset);
}

PrincipalPrivilegeSet::PrincipalPrivilegeSet(const PrincipalPrivilegeSet& other87) {
  userPrivileges = other87.userPrivileges;
  groupPrivileges = other87.groupPrivileges;
  rolePrivileges = other87.rolePrivileges;
  __isset = other87.__isset;
}
PrincipalPrivilegeSet& PrincipalPrivilegeSet::operator=(const PrincipalPrivilegeSet& other88) {
  userPrivileges = other88.userPrivileges;
  groupPrivileges = other88.groupPrivileges;
  rolePrivileges = other88.rolePrivileges;
  __isset = other88.__isset;
  return *this;
}
void PrincipalPrivilegeSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PrincipalPrivilegeSet(";
  out << "userPrivileges=" << to_string(userPrivileges);
  out << ", " << "groupPrivileges=" << to_string(groupPrivileges);
  out << ", " << "rolePrivileges=" << to_string(rolePrivileges);
  out << ")";
}


GrantRevokePrivilegeRequest::~GrantRevokePrivilegeRequest() throw() {
}


void GrantRevokePrivilegeRequest::__set_requestType(const GrantRevokeType::type val) {
  this->requestType = val;
}

void GrantRevokePrivilegeRequest::__set_privileges(const PrivilegeBag& val) {
  this->privileges = val;
}

void GrantRevokePrivilegeRequest::__set_revokeGrantOption(const bool val) {
  this->revokeGrantOption = val;
__isset.revokeGrantOption = true;
}

uint32_t GrantRevokePrivilegeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast89;
          xfer += iprot->readI32(ecast89);
          this->requestType = (GrantRevokeType::type)ecast89;
          this->__isset.requestType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->privileges.read(iprot);
          this->__isset.privileges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->revokeGrantOption);
          this->__isset.revokeGrantOption = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GrantRevokePrivilegeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GrantRevokePrivilegeRequest");

  xfer += oprot->writeFieldBegin("requestType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->requestType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("privileges", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->privileges.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.revokeGrantOption) {
    xfer += oprot->writeFieldBegin("revokeGrantOption", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->revokeGrantOption);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GrantRevokePrivilegeRequest &a, GrantRevokePrivilegeRequest &b) {
  using ::std::swap;
  swap(a.requestType, b.requestType);
  swap(a.privileges, b.privileges);
  swap(a.revokeGrantOption, b.revokeGrantOption);
  swap(a.__isset, b.__isset);
}

GrantRevokePrivilegeRequest::GrantRevokePrivilegeRequest(const GrantRevokePrivilegeRequest& other90) {
  requestType = other90.requestType;
  privileges = other90.privileges;
  revokeGrantOption = other90.revokeGrantOption;
  __isset = other90.__isset;
}
GrantRevokePrivilegeRequest& GrantRevokePrivilegeRequest::operator=(const GrantRevokePrivilegeRequest& other91) {
  requestType = other91.requestType;
  privileges = other91.privileges;
  revokeGrantOption = other91.revokeGrantOption;
  __isset = other91.__isset;
  return *this;
}
void GrantRevokePrivilegeRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GrantRevokePrivilegeRequest(";
  out << "requestType=" << to_string(requestType);
  out << ", " << "privileges=" << to_string(privileges);
  out << ", " << "revokeGrantOption="; (__isset.revokeGrantOption ? (out << to_string(revokeGrantOption)) : (out << "<null>"));
  out << ")";
}


GrantRevokePrivilegeResponse::~GrantRevokePrivilegeResponse() throw() {
}


void GrantRevokePrivilegeResponse::__set_success(const bool val) {
  this->success = val;
__isset.success = true;
}

uint32_t GrantRevokePrivilegeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GrantRevokePrivilegeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GrantRevokePrivilegeResponse");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GrantRevokePrivilegeResponse &a, GrantRevokePrivilegeResponse &b) {
  using ::std::swap;
  swap(a.success, b.success);
  swap(a.__isset, b.__isset);
}

GrantRevokePrivilegeResponse::GrantRevokePrivilegeResponse(const GrantRevokePrivilegeResponse& other92) {
  success = other92.success;
  __isset = other92.__isset;
}
GrantRevokePrivilegeResponse& GrantRevokePrivilegeResponse::operator=(const GrantRevokePrivilegeResponse& other93) {
  success = other93.success;
  __isset = other93.__isset;
  return *this;
}
void GrantRevokePrivilegeResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GrantRevokePrivilegeResponse(";
  out << "success="; (__isset.success ? (out << to_string(success)) : (out << "<null>"));
  out << ")";
}


Role::~Role() throw() {
}


void Role::__set_roleName(const std::string& val) {
  this->roleName = val;
}

void Role::__set_createTime(const int32_t val) {
  this->createTime = val;
}

void Role::__set_ownerName(const std::string& val) {
  this->ownerName = val;
}

uint32_t Role::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roleName);
          this->__isset.roleName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ownerName);
          this->__isset.ownerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Role::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Role");

  xfer += oprot->writeFieldBegin("roleName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->roleName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ownerName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->ownerName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Role &a, Role &b) {
  using ::std::swap;
  swap(a.roleName, b.roleName);
  swap(a.createTime, b.createTime);
  swap(a.ownerName, b.ownerName);
  swap(a.__isset, b.__isset);
}

Role::Role(const Role& other94) {
  roleName = other94.roleName;
  createTime = other94.createTime;
  ownerName = other94.ownerName;
  __isset = other94.__isset;
}
Role& Role::operator=(const Role& other95) {
  roleName = other95.roleName;
  createTime = other95.createTime;
  ownerName = other95.ownerName;
  __isset = other95.__isset;
  return *this;
}
void Role::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Role(";
  out << "roleName=" << to_string(roleName);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "ownerName=" << to_string(ownerName);
  out << ")";
}


RolePrincipalGrant::~RolePrincipalGrant() throw() {
}


void RolePrincipalGrant::__set_roleName(const std::string& val) {
  this->roleName = val;
}

void RolePrincipalGrant::__set_principalName(const std::string& val) {
  this->principalName = val;
}

void RolePrincipalGrant::__set_principalType(const PrincipalType::type val) {
  this->principalType = val;
}

void RolePrincipalGrant::__set_grantOption(const bool val) {
  this->grantOption = val;
}

void RolePrincipalGrant::__set_grantTime(const int32_t val) {
  this->grantTime = val;
}

void RolePrincipalGrant::__set_grantorName(const std::string& val) {
  this->grantorName = val;
}

void RolePrincipalGrant::__set_grantorPrincipalType(const PrincipalType::type val) {
  this->grantorPrincipalType = val;
}

uint32_t RolePrincipalGrant::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roleName);
          this->__isset.roleName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->principalName);
          this->__isset.principalName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast96;
          xfer += iprot->readI32(ecast96);
          this->principalType = (PrincipalType::type)ecast96;
          this->__isset.principalType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->grantOption);
          this->__isset.grantOption = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->grantTime);
          this->__isset.grantTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->grantorName);
          this->__isset.grantorName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast97;
          xfer += iprot->readI32(ecast97);
          this->grantorPrincipalType = (PrincipalType::type)ecast97;
          this->__isset.grantorPrincipalType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RolePrincipalGrant::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RolePrincipalGrant");

  xfer += oprot->writeFieldBegin("roleName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->roleName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("principalName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->principalName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("principalType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->principalType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grantOption", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->grantOption);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grantTime", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->grantTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grantorName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->grantorName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("grantorPrincipalType", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->grantorPrincipalType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RolePrincipalGrant &a, RolePrincipalGrant &b) {
  using ::std::swap;
  swap(a.roleName, b.roleName);
  swap(a.principalName, b.principalName);
  swap(a.principalType, b.principalType);
  swap(a.grantOption, b.grantOption);
  swap(a.grantTime, b.grantTime);
  swap(a.grantorName, b.grantorName);
  swap(a.grantorPrincipalType, b.grantorPrincipalType);
  swap(a.__isset, b.__isset);
}

RolePrincipalGrant::RolePrincipalGrant(const RolePrincipalGrant& other98) {
  roleName = other98.roleName;
  principalName = other98.principalName;
  principalType = other98.principalType;
  grantOption = other98.grantOption;
  grantTime = other98.grantTime;
  grantorName = other98.grantorName;
  grantorPrincipalType = other98.grantorPrincipalType;
  __isset = other98.__isset;
}
RolePrincipalGrant& RolePrincipalGrant::operator=(const RolePrincipalGrant& other99) {
  roleName = other99.roleName;
  principalName = other99.principalName;
  principalType = other99.principalType;
  grantOption = other99.grantOption;
  grantTime = other99.grantTime;
  grantorName = other99.grantorName;
  grantorPrincipalType = other99.grantorPrincipalType;
  __isset = other99.__isset;
  return *this;
}
void RolePrincipalGrant::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RolePrincipalGrant(";
  out << "roleName=" << to_string(roleName);
  out << ", " << "principalName=" << to_string(principalName);
  out << ", " << "principalType=" << to_string(principalType);
  out << ", " << "grantOption=" << to_string(grantOption);
  out << ", " << "grantTime=" << to_string(grantTime);
  out << ", " << "grantorName=" << to_string(grantorName);
  out << ", " << "grantorPrincipalType=" << to_string(grantorPrincipalType);
  out << ")";
}


GetRoleGrantsForPrincipalRequest::~GetRoleGrantsForPrincipalRequest() throw() {
}


void GetRoleGrantsForPrincipalRequest::__set_principal_name(const std::string& val) {
  this->principal_name = val;
}

void GetRoleGrantsForPrincipalRequest::__set_principal_type(const PrincipalType::type val) {
  this->principal_type = val;
}

uint32_t GetRoleGrantsForPrincipalRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_principal_name = false;
  bool isset_principal_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->principal_name);
          isset_principal_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast100;
          xfer += iprot->readI32(ecast100);
          this->principal_type = (PrincipalType::type)ecast100;
          isset_principal_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_principal_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_principal_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetRoleGrantsForPrincipalRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetRoleGrantsForPrincipalRequest");

  xfer += oprot->writeFieldBegin("principal_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->principal_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("principal_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->principal_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetRoleGrantsForPrincipalRequest &a, GetRoleGrantsForPrincipalRequest &b) {
  using ::std::swap;
  swap(a.principal_name, b.principal_name);
  swap(a.principal_type, b.principal_type);
}

GetRoleGrantsForPrincipalRequest::GetRoleGrantsForPrincipalRequest(const GetRoleGrantsForPrincipalRequest& other101) {
  principal_name = other101.principal_name;
  principal_type = other101.principal_type;
}
GetRoleGrantsForPrincipalRequest& GetRoleGrantsForPrincipalRequest::operator=(const GetRoleGrantsForPrincipalRequest& other102) {
  principal_name = other102.principal_name;
  principal_type = other102.principal_type;
  return *this;
}
void GetRoleGrantsForPrincipalRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetRoleGrantsForPrincipalRequest(";
  out << "principal_name=" << to_string(principal_name);
  out << ", " << "principal_type=" << to_string(principal_type);
  out << ")";
}


GetRoleGrantsForPrincipalResponse::~GetRoleGrantsForPrincipalResponse() throw() {
}


void GetRoleGrantsForPrincipalResponse::__set_principalGrants(const std::vector<RolePrincipalGrant> & val) {
  this->principalGrants = val;
}

uint32_t GetRoleGrantsForPrincipalResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_principalGrants = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->principalGrants.clear();
            uint32_t _size103;
            ::apache::thrift::protocol::TType _etype106;
            xfer += iprot->readListBegin(_etype106, _size103);
            this->principalGrants.resize(_size103);
            uint32_t _i107;
            for (_i107 = 0; _i107 < _size103; ++_i107)
            {
              xfer += this->principalGrants[_i107].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_principalGrants = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_principalGrants)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetRoleGrantsForPrincipalResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetRoleGrantsForPrincipalResponse");

  xfer += oprot->writeFieldBegin("principalGrants", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->principalGrants.size()));
    std::vector<RolePrincipalGrant> ::const_iterator _iter108;
    for (_iter108 = this->principalGrants.begin(); _iter108 != this->principalGrants.end(); ++_iter108)
    {
      xfer += (*_iter108).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetRoleGrantsForPrincipalResponse &a, GetRoleGrantsForPrincipalResponse &b) {
  using ::std::swap;
  swap(a.principalGrants, b.principalGrants);
}

GetRoleGrantsForPrincipalResponse::GetRoleGrantsForPrincipalResponse(const GetRoleGrantsForPrincipalResponse& other109) {
  principalGrants = other109.principalGrants;
}
GetRoleGrantsForPrincipalResponse& GetRoleGrantsForPrincipalResponse::operator=(const GetRoleGrantsForPrincipalResponse& other110) {
  principalGrants = other110.principalGrants;
  return *this;
}
void GetRoleGrantsForPrincipalResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetRoleGrantsForPrincipalResponse(";
  out << "principalGrants=" << to_string(principalGrants);
  out << ")";
}


GetPrincipalsInRoleRequest::~GetPrincipalsInRoleRequest() throw() {
}


void GetPrincipalsInRoleRequest::__set_roleName(const std::string& val) {
  this->roleName = val;
}

uint32_t GetPrincipalsInRoleRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_roleName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roleName);
          isset_roleName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_roleName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetPrincipalsInRoleRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetPrincipalsInRoleRequest");

  xfer += oprot->writeFieldBegin("roleName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->roleName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetPrincipalsInRoleRequest &a, GetPrincipalsInRoleRequest &b) {
  using ::std::swap;
  swap(a.roleName, b.roleName);
}

GetPrincipalsInRoleRequest::GetPrincipalsInRoleRequest(const GetPrincipalsInRoleRequest& other111) {
  roleName = other111.roleName;
}
GetPrincipalsInRoleRequest& GetPrincipalsInRoleRequest::operator=(const GetPrincipalsInRoleRequest& other112) {
  roleName = other112.roleName;
  return *this;
}
void GetPrincipalsInRoleRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetPrincipalsInRoleRequest(";
  out << "roleName=" << to_string(roleName);
  out << ")";
}


GetPrincipalsInRoleResponse::~GetPrincipalsInRoleResponse() throw() {
}


void GetPrincipalsInRoleResponse::__set_principalGrants(const std::vector<RolePrincipalGrant> & val) {
  this->principalGrants = val;
}

uint32_t GetPrincipalsInRoleResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_principalGrants = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->principalGrants.clear();
            uint32_t _size113;
            ::apache::thrift::protocol::TType _etype116;
            xfer += iprot->readListBegin(_etype116, _size113);
            this->principalGrants.resize(_size113);
            uint32_t _i117;
            for (_i117 = 0; _i117 < _size113; ++_i117)
            {
              xfer += this->principalGrants[_i117].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_principalGrants = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_principalGrants)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetPrincipalsInRoleResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetPrincipalsInRoleResponse");

  xfer += oprot->writeFieldBegin("principalGrants", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->principalGrants.size()));
    std::vector<RolePrincipalGrant> ::const_iterator _iter118;
    for (_iter118 = this->principalGrants.begin(); _iter118 != this->principalGrants.end(); ++_iter118)
    {
      xfer += (*_iter118).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetPrincipalsInRoleResponse &a, GetPrincipalsInRoleResponse &b) {
  using ::std::swap;
  swap(a.principalGrants, b.principalGrants);
}

GetPrincipalsInRoleResponse::GetPrincipalsInRoleResponse(const GetPrincipalsInRoleResponse& other119) {
  principalGrants = other119.principalGrants;
}
GetPrincipalsInRoleResponse& GetPrincipalsInRoleResponse::operator=(const GetPrincipalsInRoleResponse& other120) {
  principalGrants = other120.principalGrants;
  return *this;
}
void GetPrincipalsInRoleResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetPrincipalsInRoleResponse(";
  out << "principalGrants=" << to_string(principalGrants);
  out << ")";
}


GrantRevokeRoleRequest::~GrantRevokeRoleRequest() throw() {
}


void GrantRevokeRoleRequest::__set_requestType(const GrantRevokeType::type val) {
  this->requestType = val;
}

void GrantRevokeRoleRequest::__set_roleName(const std::string& val) {
  this->roleName = val;
}

void GrantRevokeRoleRequest::__set_principalName(const std::string& val) {
  this->principalName = val;
}

void GrantRevokeRoleRequest::__set_principalType(const PrincipalType::type val) {
  this->principalType = val;
}

void GrantRevokeRoleRequest::__set_grantor(const std::string& val) {
  this->grantor = val;
__isset.grantor = true;
}

void GrantRevokeRoleRequest::__set_grantorType(const PrincipalType::type val) {
  this->grantorType = val;
__isset.grantorType = true;
}

void GrantRevokeRoleRequest::__set_grantOption(const bool val) {
  this->grantOption = val;
__isset.grantOption = true;
}

uint32_t GrantRevokeRoleRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast121;
          xfer += iprot->readI32(ecast121);
          this->requestType = (GrantRevokeType::type)ecast121;
          this->__isset.requestType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roleName);
          this->__isset.roleName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->principalName);
          this->__isset.principalName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast122;
          xfer += iprot->readI32(ecast122);
          this->principalType = (PrincipalType::type)ecast122;
          this->__isset.principalType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->grantor);
          this->__isset.grantor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast123;
          xfer += iprot->readI32(ecast123);
          this->grantorType = (PrincipalType::type)ecast123;
          this->__isset.grantorType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->grantOption);
          this->__isset.grantOption = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GrantRevokeRoleRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GrantRevokeRoleRequest");

  xfer += oprot->writeFieldBegin("requestType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->requestType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roleName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->roleName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("principalName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->principalName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("principalType", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->principalType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.grantor) {
    xfer += oprot->writeFieldBegin("grantor", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->grantor);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.grantorType) {
    xfer += oprot->writeFieldBegin("grantorType", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32((int32_t)this->grantorType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.grantOption) {
    xfer += oprot->writeFieldBegin("grantOption", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->grantOption);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GrantRevokeRoleRequest &a, GrantRevokeRoleRequest &b) {
  using ::std::swap;
  swap(a.requestType, b.requestType);
  swap(a.roleName, b.roleName);
  swap(a.principalName, b.principalName);
  swap(a.principalType, b.principalType);
  swap(a.grantor, b.grantor);
  swap(a.grantorType, b.grantorType);
  swap(a.grantOption, b.grantOption);
  swap(a.__isset, b.__isset);
}

GrantRevokeRoleRequest::GrantRevokeRoleRequest(const GrantRevokeRoleRequest& other124) {
  requestType = other124.requestType;
  roleName = other124.roleName;
  principalName = other124.principalName;
  principalType = other124.principalType;
  grantor = other124.grantor;
  grantorType = other124.grantorType;
  grantOption = other124.grantOption;
  __isset = other124.__isset;
}
GrantRevokeRoleRequest& GrantRevokeRoleRequest::operator=(const GrantRevokeRoleRequest& other125) {
  requestType = other125.requestType;
  roleName = other125.roleName;
  principalName = other125.principalName;
  principalType = other125.principalType;
  grantor = other125.grantor;
  grantorType = other125.grantorType;
  grantOption = other125.grantOption;
  __isset = other125.__isset;
  return *this;
}
void GrantRevokeRoleRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GrantRevokeRoleRequest(";
  out << "requestType=" << to_string(requestType);
  out << ", " << "roleName=" << to_string(roleName);
  out << ", " << "principalName=" << to_string(principalName);
  out << ", " << "principalType=" << to_string(principalType);
  out << ", " << "grantor="; (__isset.grantor ? (out << to_string(grantor)) : (out << "<null>"));
  out << ", " << "grantorType="; (__isset.grantorType ? (out << to_string(grantorType)) : (out << "<null>"));
  out << ", " << "grantOption="; (__isset.grantOption ? (out << to_string(grantOption)) : (out << "<null>"));
  out << ")";
}


GrantRevokeRoleResponse::~GrantRevokeRoleResponse() throw() {
}


void GrantRevokeRoleResponse::__set_success(const bool val) {
  this->success = val;
__isset.success = true;
}

uint32_t GrantRevokeRoleResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GrantRevokeRoleResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GrantRevokeRoleResponse");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GrantRevokeRoleResponse &a, GrantRevokeRoleResponse &b) {
  using ::std::swap;
  swap(a.success, b.success);
  swap(a.__isset, b.__isset);
}

GrantRevokeRoleResponse::GrantRevokeRoleResponse(const GrantRevokeRoleResponse& other126) {
  success = other126.success;
  __isset = other126.__isset;
}
GrantRevokeRoleResponse& GrantRevokeRoleResponse::operator=(const GrantRevokeRoleResponse& other127) {
  success = other127.success;
  __isset = other127.__isset;
  return *this;
}
void GrantRevokeRoleResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GrantRevokeRoleResponse(";
  out << "success="; (__isset.success ? (out << to_string(success)) : (out << "<null>"));
  out << ")";
}


Database::~Database() throw() {
}


void Database::__set_name(const std::string& val) {
  this->name = val;
}

void Database::__set_description(const std::string& val) {
  this->description = val;
}

void Database::__set_locationUri(const std::string& val) {
  this->locationUri = val;
}

void Database::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

void Database::__set_privileges(const PrincipalPrivilegeSet& val) {
  this->privileges = val;
__isset.privileges = true;
}

void Database::__set_ownerName(const std::string& val) {
  this->ownerName = val;
__isset.ownerName = true;
}

void Database::__set_ownerType(const PrincipalType::type val) {
  this->ownerType = val;
__isset.ownerType = true;
}

uint32_t Database::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locationUri);
          this->__isset.locationUri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->parameters.clear();
            uint32_t _size128;
            ::apache::thrift::protocol::TType _ktype129;
            ::apache::thrift::protocol::TType _vtype130;
            xfer += iprot->readMapBegin(_ktype129, _vtype130, _size128);
            uint32_t _i132;
            for (_i132 = 0; _i132 < _size128; ++_i132)
            {
              std::string _key133;
              xfer += iprot->readString(_key133);
              std::string& _val134 = this->parameters[_key133];
              xfer += iprot->readString(_val134);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->privileges.read(iprot);
          this->__isset.privileges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ownerName);
          this->__isset.ownerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast135;
          xfer += iprot->readI32(ecast135);
          this->ownerType = (PrincipalType::type)ecast135;
          this->__isset.ownerType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Database::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Database");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locationUri", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->locationUri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameters.size()));
    std::map<std::string, std::string> ::const_iterator _iter136;
    for (_iter136 = this->parameters.begin(); _iter136 != this->parameters.end(); ++_iter136)
    {
      xfer += oprot->writeString(_iter136->first);
      xfer += oprot->writeString(_iter136->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.privileges) {
    xfer += oprot->writeFieldBegin("privileges", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->privileges.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ownerName) {
    xfer += oprot->writeFieldBegin("ownerName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->ownerName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ownerType) {
    xfer += oprot->writeFieldBegin("ownerType", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->ownerType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Database &a, Database &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.description, b.description);
  swap(a.locationUri, b.locationUri);
  swap(a.parameters, b.parameters);
  swap(a.privileges, b.privileges);
  swap(a.ownerName, b.ownerName);
  swap(a.ownerType, b.ownerType);
  swap(a.__isset, b.__isset);
}

Database::Database(const Database& other137) {
  name = other137.name;
  description = other137.description;
  locationUri = other137.locationUri;
  parameters = other137.parameters;
  privileges = other137.privileges;
  ownerName = other137.ownerName;
  ownerType = other137.ownerType;
  __isset = other137.__isset;
}
Database& Database::operator=(const Database& other138) {
  name = other138.name;
  description = other138.description;
  locationUri = other138.locationUri;
  parameters = other138.parameters;
  privileges = other138.privileges;
  ownerName = other138.ownerName;
  ownerType = other138.ownerType;
  __isset = other138.__isset;
  return *this;
}
void Database::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Database(";
  out << "name=" << to_string(name);
  out << ", " << "description=" << to_string(description);
  out << ", " << "locationUri=" << to_string(locationUri);
  out << ", " << "parameters=" << to_string(parameters);
  out << ", " << "privileges="; (__isset.privileges ? (out << to_string(privileges)) : (out << "<null>"));
  out << ", " << "ownerName="; (__isset.ownerName ? (out << to_string(ownerName)) : (out << "<null>"));
  out << ", " << "ownerType="; (__isset.ownerType ? (out << to_string(ownerType)) : (out << "<null>"));
  out << ")";
}


SerDeInfo::~SerDeInfo() throw() {
}


void SerDeInfo::__set_name(const std::string& val) {
  this->name = val;
}

void SerDeInfo::__set_serializationLib(const std::string& val) {
  this->serializationLib = val;
}

void SerDeInfo::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

uint32_t SerDeInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serializationLib);
          this->__isset.serializationLib = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->parameters.clear();
            uint32_t _size139;
            ::apache::thrift::protocol::TType _ktype140;
            ::apache::thrift::protocol::TType _vtype141;
            xfer += iprot->readMapBegin(_ktype140, _vtype141, _size139);
            uint32_t _i143;
            for (_i143 = 0; _i143 < _size139; ++_i143)
            {
              std::string _key144;
              xfer += iprot->readString(_key144);
              std::string& _val145 = this->parameters[_key144];
              xfer += iprot->readString(_val145);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SerDeInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SerDeInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serializationLib", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->serializationLib);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameters.size()));
    std::map<std::string, std::string> ::const_iterator _iter146;
    for (_iter146 = this->parameters.begin(); _iter146 != this->parameters.end(); ++_iter146)
    {
      xfer += oprot->writeString(_iter146->first);
      xfer += oprot->writeString(_iter146->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SerDeInfo &a, SerDeInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.serializationLib, b.serializationLib);
  swap(a.parameters, b.parameters);
  swap(a.__isset, b.__isset);
}

SerDeInfo::SerDeInfo(const SerDeInfo& other147) {
  name = other147.name;
  serializationLib = other147.serializationLib;
  parameters = other147.parameters;
  __isset = other147.__isset;
}
SerDeInfo& SerDeInfo::operator=(const SerDeInfo& other148) {
  name = other148.name;
  serializationLib = other148.serializationLib;
  parameters = other148.parameters;
  __isset = other148.__isset;
  return *this;
}
void SerDeInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SerDeInfo(";
  out << "name=" << to_string(name);
  out << ", " << "serializationLib=" << to_string(serializationLib);
  out << ", " << "parameters=" << to_string(parameters);
  out << ")";
}


Order::~Order() throw() {
}


void Order::__set_col(const std::string& val) {
  this->col = val;
}

void Order::__set_order(const int32_t val) {
  this->order = val;
}

uint32_t Order::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->col);
          this->__isset.col = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order);
          this->__isset.order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Order::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Order");

  xfer += oprot->writeFieldBegin("col", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->col);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->order);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Order &a, Order &b) {
  using ::std::swap;
  swap(a.col, b.col);
  swap(a.order, b.order);
  swap(a.__isset, b.__isset);
}

Order::Order(const Order& other149) {
  col = other149.col;
  order = other149.order;
  __isset = other149.__isset;
}
Order& Order::operator=(const Order& other150) {
  col = other150.col;
  order = other150.order;
  __isset = other150.__isset;
  return *this;
}
void Order::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Order(";
  out << "col=" << to_string(col);
  out << ", " << "order=" << to_string(order);
  out << ")";
}


SkewedInfo::~SkewedInfo() throw() {
}


void SkewedInfo::__set_skewedColNames(const std::vector<std::string> & val) {
  this->skewedColNames = val;
}

void SkewedInfo::__set_skewedColValues(const std::vector<std::vector<std::string> > & val) {
  this->skewedColValues = val;
}

void SkewedInfo::__set_skewedColValueLocationMaps(const std::map<std::vector<std::string> , std::string> & val) {
  this->skewedColValueLocationMaps = val;
}

uint32_t SkewedInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->skewedColNames.clear();
            uint32_t _size151;
            ::apache::thrift::protocol::TType _etype154;
            xfer += iprot->readListBegin(_etype154, _size151);
            this->skewedColNames.resize(_size151);
            uint32_t _i155;
            for (_i155 = 0; _i155 < _size151; ++_i155)
            {
              xfer += iprot->readString(this->skewedColNames[_i155]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.skewedColNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->skewedColValues.clear();
            uint32_t _size156;
            ::apache::thrift::protocol::TType _etype159;
            xfer += iprot->readListBegin(_etype159, _size156);
            this->skewedColValues.resize(_size156);
            uint32_t _i160;
            for (_i160 = 0; _i160 < _size156; ++_i160)
            {
              {
                this->skewedColValues[_i160].clear();
                uint32_t _size161;
                ::apache::thrift::protocol::TType _etype164;
                xfer += iprot->readListBegin(_etype164, _size161);
                this->skewedColValues[_i160].resize(_size161);
                uint32_t _i165;
                for (_i165 = 0; _i165 < _size161; ++_i165)
                {
                  xfer += iprot->readString(this->skewedColValues[_i160][_i165]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.skewedColValues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->skewedColValueLocationMaps.clear();
            uint32_t _size166;
            ::apache::thrift::protocol::TType _ktype167;
            ::apache::thrift::protocol::TType _vtype168;
            xfer += iprot->readMapBegin(_ktype167, _vtype168, _size166);
            uint32_t _i170;
            for (_i170 = 0; _i170 < _size166; ++_i170)
            {
              std::vector<std::string>  _key171;
              {
                _key171.clear();
                uint32_t _size173;
                ::apache::thrift::protocol::TType _etype176;
                xfer += iprot->readListBegin(_etype176, _size173);
                _key171.resize(_size173);
                uint32_t _i177;
                for (_i177 = 0; _i177 < _size173; ++_i177)
                {
                  xfer += iprot->readString(_key171[_i177]);
                }
                xfer += iprot->readListEnd();
              }
              std::string& _val172 = this->skewedColValueLocationMaps[_key171];
              xfer += iprot->readString(_val172);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.skewedColValueLocationMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SkewedInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SkewedInfo");

  xfer += oprot->writeFieldBegin("skewedColNames", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->skewedColNames.size()));
    std::vector<std::string> ::const_iterator _iter178;
    for (_iter178 = this->skewedColNames.begin(); _iter178 != this->skewedColNames.end(); ++_iter178)
    {
      xfer += oprot->writeString((*_iter178));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("skewedColValues", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->skewedColValues.size()));
    std::vector<std::vector<std::string> > ::const_iterator _iter179;
    for (_iter179 = this->skewedColValues.begin(); _iter179 != this->skewedColValues.end(); ++_iter179)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter179).size()));
        std::vector<std::string> ::const_iterator _iter180;
        for (_iter180 = (*_iter179).begin(); _iter180 != (*_iter179).end(); ++_iter180)
        {
          xfer += oprot->writeString((*_iter180));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("skewedColValueLocationMaps", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_LIST, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->skewedColValueLocationMaps.size()));
    std::map<std::vector<std::string> , std::string> ::const_iterator _iter181;
    for (_iter181 = this->skewedColValueLocationMaps.begin(); _iter181 != this->skewedColValueLocationMaps.end(); ++_iter181)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(_iter181->first.size()));
        std::vector<std::string> ::const_iterator _iter182;
        for (_iter182 = _iter181->first.begin(); _iter182 != _iter181->first.end(); ++_iter182)
        {
          xfer += oprot->writeString((*_iter182));
        }
        xfer += oprot->writeListEnd();
      }
      xfer += oprot->writeString(_iter181->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SkewedInfo &a, SkewedInfo &b) {
  using ::std::swap;
  swap(a.skewedColNames, b.skewedColNames);
  swap(a.skewedColValues, b.skewedColValues);
  swap(a.skewedColValueLocationMaps, b.skewedColValueLocationMaps);
  swap(a.__isset, b.__isset);
}

SkewedInfo::SkewedInfo(const SkewedInfo& other183) {
  skewedColNames = other183.skewedColNames;
  skewedColValues = other183.skewedColValues;
  skewedColValueLocationMaps = other183.skewedColValueLocationMaps;
  __isset = other183.__isset;
}
SkewedInfo& SkewedInfo::operator=(const SkewedInfo& other184) {
  skewedColNames = other184.skewedColNames;
  skewedColValues = other184.skewedColValues;
  skewedColValueLocationMaps = other184.skewedColValueLocationMaps;
  __isset = other184.__isset;
  return *this;
}
void SkewedInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SkewedInfo(";
  out << "skewedColNames=" << to_string(skewedColNames);
  out << ", " << "skewedColValues=" << to_string(skewedColValues);
  out << ", " << "skewedColValueLocationMaps=" << to_string(skewedColValueLocationMaps);
  out << ")";
}


StorageDescriptor::~StorageDescriptor() throw() {
}


void StorageDescriptor::__set_cols(const std::vector<FieldSchema> & val) {
  this->cols = val;
}

void StorageDescriptor::__set_location(const std::string& val) {
  this->location = val;
}

void StorageDescriptor::__set_inputFormat(const std::string& val) {
  this->inputFormat = val;
}

void StorageDescriptor::__set_outputFormat(const std::string& val) {
  this->outputFormat = val;
}

void StorageDescriptor::__set_compressed(const bool val) {
  this->compressed = val;
}

void StorageDescriptor::__set_numBuckets(const int32_t val) {
  this->numBuckets = val;
}

void StorageDescriptor::__set_serdeInfo(const SerDeInfo& val) {
  this->serdeInfo = val;
}

void StorageDescriptor::__set_bucketCols(const std::vector<std::string> & val) {
  this->bucketCols = val;
}

void StorageDescriptor::__set_sortCols(const std::vector<Order> & val) {
  this->sortCols = val;
}

void StorageDescriptor::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

void StorageDescriptor::__set_skewedInfo(const SkewedInfo& val) {
  this->skewedInfo = val;
__isset.skewedInfo = true;
}

void StorageDescriptor::__set_storedAsSubDirectories(const bool val) {
  this->storedAsSubDirectories = val;
__isset.storedAsSubDirectories = true;
}

uint32_t StorageDescriptor::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->cols.clear();
            uint32_t _size185;
            ::apache::thrift::protocol::TType _etype188;
            xfer += iprot->readListBegin(_etype188, _size185);
            this->cols.resize(_size185);
            uint32_t _i189;
            for (_i189 = 0; _i189 < _size185; ++_i189)
            {
              xfer += this->cols[_i189].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.cols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->location);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->inputFormat);
          this->__isset.inputFormat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->outputFormat);
          this->__isset.outputFormat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->compressed);
          this->__isset.compressed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numBuckets);
          this->__isset.numBuckets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->serdeInfo.read(iprot);
          this->__isset.serdeInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->bucketCols.clear();
            uint32_t _size190;
            ::apache::thrift::protocol::TType _etype193;
            xfer += iprot->readListBegin(_etype193, _size190);
            this->bucketCols.resize(_size190);
            uint32_t _i194;
            for (_i194 = 0; _i194 < _size190; ++_i194)
            {
              xfer += iprot->readString(this->bucketCols[_i194]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.bucketCols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sortCols.clear();
            uint32_t _size195;
            ::apache::thrift::protocol::TType _etype198;
            xfer += iprot->readListBegin(_etype198, _size195);
            this->sortCols.resize(_size195);
            uint32_t _i199;
            for (_i199 = 0; _i199 < _size195; ++_i199)
            {
              xfer += this->sortCols[_i199].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sortCols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->parameters.clear();
            uint32_t _size200;
            ::apache::thrift::protocol::TType _ktype201;
            ::apache::thrift::protocol::TType _vtype202;
            xfer += iprot->readMapBegin(_ktype201, _vtype202, _size200);
            uint32_t _i204;
            for (_i204 = 0; _i204 < _size200; ++_i204)
            {
              std::string _key205;
              xfer += iprot->readString(_key205);
              std::string& _val206 = this->parameters[_key205];
              xfer += iprot->readString(_val206);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->skewedInfo.read(iprot);
          this->__isset.skewedInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->storedAsSubDirectories);
          this->__isset.storedAsSubDirectories = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StorageDescriptor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StorageDescriptor");

  xfer += oprot->writeFieldBegin("cols", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->cols.size()));
    std::vector<FieldSchema> ::const_iterator _iter207;
    for (_iter207 = this->cols.begin(); _iter207 != this->cols.end(); ++_iter207)
    {
      xfer += (*_iter207).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->location);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inputFormat", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->inputFormat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("outputFormat", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->outputFormat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("compressed", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->compressed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numBuckets", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->numBuckets);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serdeInfo", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->serdeInfo.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bucketCols", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->bucketCols.size()));
    std::vector<std::string> ::const_iterator _iter208;
    for (_iter208 = this->bucketCols.begin(); _iter208 != this->bucketCols.end(); ++_iter208)
    {
      xfer += oprot->writeString((*_iter208));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sortCols", ::apache::thrift::protocol::T_LIST, 9);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sortCols.size()));
    std::vector<Order> ::const_iterator _iter209;
    for (_iter209 = this->sortCols.begin(); _iter209 != this->sortCols.end(); ++_iter209)
    {
      xfer += (*_iter209).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_MAP, 10);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameters.size()));
    std::map<std::string, std::string> ::const_iterator _iter210;
    for (_iter210 = this->parameters.begin(); _iter210 != this->parameters.end(); ++_iter210)
    {
      xfer += oprot->writeString(_iter210->first);
      xfer += oprot->writeString(_iter210->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.skewedInfo) {
    xfer += oprot->writeFieldBegin("skewedInfo", ::apache::thrift::protocol::T_STRUCT, 11);
    xfer += this->skewedInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.storedAsSubDirectories) {
    xfer += oprot->writeFieldBegin("storedAsSubDirectories", ::apache::thrift::protocol::T_BOOL, 12);
    xfer += oprot->writeBool(this->storedAsSubDirectories);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StorageDescriptor &a, StorageDescriptor &b) {
  using ::std::swap;
  swap(a.cols, b.cols);
  swap(a.location, b.location);
  swap(a.inputFormat, b.inputFormat);
  swap(a.outputFormat, b.outputFormat);
  swap(a.compressed, b.compressed);
  swap(a.numBuckets, b.numBuckets);
  swap(a.serdeInfo, b.serdeInfo);
  swap(a.bucketCols, b.bucketCols);
  swap(a.sortCols, b.sortCols);
  swap(a.parameters, b.parameters);
  swap(a.skewedInfo, b.skewedInfo);
  swap(a.storedAsSubDirectories, b.storedAsSubDirectories);
  swap(a.__isset, b.__isset);
}

StorageDescriptor::StorageDescriptor(const StorageDescriptor& other211) {
  cols = other211.cols;
  location = other211.location;
  inputFormat = other211.inputFormat;
  outputFormat = other211.outputFormat;
  compressed = other211.compressed;
  numBuckets = other211.numBuckets;
  serdeInfo = other211.serdeInfo;
  bucketCols = other211.bucketCols;
  sortCols = other211.sortCols;
  parameters = other211.parameters;
  skewedInfo = other211.skewedInfo;
  storedAsSubDirectories = other211.storedAsSubDirectories;
  __isset = other211.__isset;
}
StorageDescriptor& StorageDescriptor::operator=(const StorageDescriptor& other212) {
  cols = other212.cols;
  location = other212.location;
  inputFormat = other212.inputFormat;
  outputFormat = other212.outputFormat;
  compressed = other212.compressed;
  numBuckets = other212.numBuckets;
  serdeInfo = other212.serdeInfo;
  bucketCols = other212.bucketCols;
  sortCols = other212.sortCols;
  parameters = other212.parameters;
  skewedInfo = other212.skewedInfo;
  storedAsSubDirectories = other212.storedAsSubDirectories;
  __isset = other212.__isset;
  return *this;
}
void StorageDescriptor::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StorageDescriptor(";
  out << "cols=" << to_string(cols);
  out << ", " << "location=" << to_string(location);
  out << ", " << "inputFormat=" << to_string(inputFormat);
  out << ", " << "outputFormat=" << to_string(outputFormat);
  out << ", " << "compressed=" << to_string(compressed);
  out << ", " << "numBuckets=" << to_string(numBuckets);
  out << ", " << "serdeInfo=" << to_string(serdeInfo);
  out << ", " << "bucketCols=" << to_string(bucketCols);
  out << ", " << "sortCols=" << to_string(sortCols);
  out << ", " << "parameters=" << to_string(parameters);
  out << ", " << "skewedInfo="; (__isset.skewedInfo ? (out << to_string(skewedInfo)) : (out << "<null>"));
  out << ", " << "storedAsSubDirectories="; (__isset.storedAsSubDirectories ? (out << to_string(storedAsSubDirectories)) : (out << "<null>"));
  out << ")";
}


Table::~Table() throw() {
}


void Table::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void Table::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void Table::__set_owner(const std::string& val) {
  this->owner = val;
}

void Table::__set_createTime(const int32_t val) {
  this->createTime = val;
}

void Table::__set_lastAccessTime(const int32_t val) {
  this->lastAccessTime = val;
}

void Table::__set_retention(const int32_t val) {
  this->retention = val;
}

void Table::__set_sd(const StorageDescriptor& val) {
  this->sd = val;
}

void Table::__set_partitionKeys(const std::vector<FieldSchema> & val) {
  this->partitionKeys = val;
}

void Table::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

void Table::__set_viewOriginalText(const std::string& val) {
  this->viewOriginalText = val;
}

void Table::__set_viewExpandedText(const std::string& val) {
  this->viewExpandedText = val;
}

void Table::__set_tableType(const std::string& val) {
  this->tableType = val;
}

void Table::__set_privileges(const PrincipalPrivilegeSet& val) {
  this->privileges = val;
__isset.privileges = true;
}

void Table::__set_temporary(const bool val) {
  this->temporary = val;
__isset.temporary = true;
}

void Table::__set_rewriteEnabled(const bool val) {
  this->rewriteEnabled = val;
__isset.rewriteEnabled = true;
}

void Table::__set_creationMetadata(const CreationMetadata& val) {
  this->creationMetadata = val;
__isset.creationMetadata = true;
}

uint32_t Table::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          this->__isset.dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->owner);
          this->__isset.owner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lastAccessTime);
          this->__isset.lastAccessTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->retention);
          this->__isset.retention = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sd.read(iprot);
          this->__isset.sd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitionKeys.clear();
            uint32_t _size213;
            ::apache::thrift::protocol::TType _etype216;
            xfer += iprot->readListBegin(_etype216, _size213);
            this->partitionKeys.resize(_size213);
            uint32_t _i217;
            for (_i217 = 0; _i217 < _size213; ++_i217)
            {
              xfer += this->partitionKeys[_i217].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partitionKeys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->parameters.clear();
            uint32_t _size218;
            ::apache::thrift::protocol::TType _ktype219;
            ::apache::thrift::protocol::TType _vtype220;
            xfer += iprot->readMapBegin(_ktype219, _vtype220, _size218);
            uint32_t _i222;
            for (_i222 = 0; _i222 < _size218; ++_i222)
            {
              std::string _key223;
              xfer += iprot->readString(_key223);
              std::string& _val224 = this->parameters[_key223];
              xfer += iprot->readString(_val224);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->viewOriginalText);
          this->__isset.viewOriginalText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->viewExpandedText);
          this->__isset.viewExpandedText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableType);
          this->__isset.tableType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->privileges.read(iprot);
          this->__isset.privileges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->temporary);
          this->__isset.temporary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->rewriteEnabled);
          this->__isset.rewriteEnabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->creationMetadata.read(iprot);
          this->__isset.creationMetadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Table::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Table");

  xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tableName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("owner", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->owner);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastAccessTime", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->lastAccessTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("retention", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->retention);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sd", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->sd.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partitionKeys", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitionKeys.size()));
    std::vector<FieldSchema> ::const_iterator _iter225;
    for (_iter225 = this->partitionKeys.begin(); _iter225 != this->partitionKeys.end(); ++_iter225)
    {
      xfer += (*_iter225).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_MAP, 9);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameters.size()));
    std::map<std::string, std::string> ::const_iterator _iter226;
    for (_iter226 = this->parameters.begin(); _iter226 != this->parameters.end(); ++_iter226)
    {
      xfer += oprot->writeString(_iter226->first);
      xfer += oprot->writeString(_iter226->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("viewOriginalText", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->viewOriginalText);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("viewExpandedText", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->viewExpandedText);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tableType", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->tableType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.privileges) {
    xfer += oprot->writeFieldBegin("privileges", ::apache::thrift::protocol::T_STRUCT, 13);
    xfer += this->privileges.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.temporary) {
    xfer += oprot->writeFieldBegin("temporary", ::apache::thrift::protocol::T_BOOL, 14);
    xfer += oprot->writeBool(this->temporary);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rewriteEnabled) {
    xfer += oprot->writeFieldBegin("rewriteEnabled", ::apache::thrift::protocol::T_BOOL, 15);
    xfer += oprot->writeBool(this->rewriteEnabled);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.creationMetadata) {
    xfer += oprot->writeFieldBegin("creationMetadata", ::apache::thrift::protocol::T_STRUCT, 16);
    xfer += this->creationMetadata.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Table &a, Table &b) {
  using ::std::swap;
  swap(a.tableName, b.tableName);
  swap(a.dbName, b.dbName);
  swap(a.owner, b.owner);
  swap(a.createTime, b.createTime);
  swap(a.lastAccessTime, b.lastAccessTime);
  swap(a.retention, b.retention);
  swap(a.sd, b.sd);
  swap(a.partitionKeys, b.partitionKeys);
  swap(a.parameters, b.parameters);
  swap(a.viewOriginalText, b.viewOriginalText);
  swap(a.viewExpandedText, b.viewExpandedText);
  swap(a.tableType, b.tableType);
  swap(a.privileges, b.privileges);
  swap(a.temporary, b.temporary);
  swap(a.rewriteEnabled, b.rewriteEnabled);
  swap(a.creationMetadata, b.creationMetadata);
  swap(a.__isset, b.__isset);
}

Table::Table(const Table& other227) {
  tableName = other227.tableName;
  dbName = other227.dbName;
  owner = other227.owner;
  createTime = other227.createTime;
  lastAccessTime = other227.lastAccessTime;
  retention = other227.retention;
  sd = other227.sd;
  partitionKeys = other227.partitionKeys;
  parameters = other227.parameters;
  viewOriginalText = other227.viewOriginalText;
  viewExpandedText = other227.viewExpandedText;
  tableType = other227.tableType;
  privileges = other227.privileges;
  temporary = other227.temporary;
  rewriteEnabled = other227.rewriteEnabled;
  creationMetadata = other227.creationMetadata;
  __isset = other227.__isset;
}
Table& Table::operator=(const Table& other228) {
  tableName = other228.tableName;
  dbName = other228.dbName;
  owner = other228.owner;
  createTime = other228.createTime;
  lastAccessTime = other228.lastAccessTime;
  retention = other228.retention;
  sd = other228.sd;
  partitionKeys = other228.partitionKeys;
  parameters = other228.parameters;
  viewOriginalText = other228.viewOriginalText;
  viewExpandedText = other228.viewExpandedText;
  tableType = other228.tableType;
  privileges = other228.privileges;
  temporary = other228.temporary;
  rewriteEnabled = other228.rewriteEnabled;
  creationMetadata = other228.creationMetadata;
  __isset = other228.__isset;
  return *this;
}
void Table::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Table(";
  out << "tableName=" << to_string(tableName);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "owner=" << to_string(owner);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "lastAccessTime=" << to_string(lastAccessTime);
  out << ", " << "retention=" << to_string(retention);
  out << ", " << "sd=" << to_string(sd);
  out << ", " << "partitionKeys=" << to_string(partitionKeys);
  out << ", " << "parameters=" << to_string(parameters);
  out << ", " << "viewOriginalText=" << to_string(viewOriginalText);
  out << ", " << "viewExpandedText=" << to_string(viewExpandedText);
  out << ", " << "tableType=" << to_string(tableType);
  out << ", " << "privileges="; (__isset.privileges ? (out << to_string(privileges)) : (out << "<null>"));
  out << ", " << "temporary="; (__isset.temporary ? (out << to_string(temporary)) : (out << "<null>"));
  out << ", " << "rewriteEnabled="; (__isset.rewriteEnabled ? (out << to_string(rewriteEnabled)) : (out << "<null>"));
  out << ", " << "creationMetadata="; (__isset.creationMetadata ? (out << to_string(creationMetadata)) : (out << "<null>"));
  out << ")";
}


Partition::~Partition() throw() {
}


void Partition::__set_values(const std::vector<std::string> & val) {
  this->values = val;
}

void Partition::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void Partition::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void Partition::__set_createTime(const int32_t val) {
  this->createTime = val;
}

void Partition::__set_lastAccessTime(const int32_t val) {
  this->lastAccessTime = val;
}

void Partition::__set_sd(const StorageDescriptor& val) {
  this->sd = val;
}

void Partition::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

void Partition::__set_privileges(const PrincipalPrivilegeSet& val) {
  this->privileges = val;
__isset.privileges = true;
}

uint32_t Partition::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
            uint32_t _size229;
            ::apache::thrift::protocol::TType _etype232;
            xfer += iprot->readListBegin(_etype232, _size229);
            this->values.resize(_size229);
            uint32_t _i233;
            for (_i233 = 0; _i233 < _size229; ++_i233)
            {
              xfer += iprot->readString(this->values[_i233]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          this->__isset.dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lastAccessTime);
          this->__isset.lastAccessTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sd.read(iprot);
          this->__isset.sd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->parameters.clear();
            uint32_t _size234;
            ::apache::thrift::protocol::TType _ktype235;
            ::apache::thrift::protocol::TType _vtype236;
            xfer += iprot->readMapBegin(_ktype235, _vtype236, _size234);
            uint32_t _i238;
            for (_i238 = 0; _i238 < _size234; ++_i238)
            {
              std::string _key239;
              xfer += iprot->readString(_key239);
              std::string& _val240 = this->parameters[_key239];
              xfer += iprot->readString(_val240);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->privileges.read(iprot);
          this->__isset.privileges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Partition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Partition");

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->values.size()));
    std::vector<std::string> ::const_iterator _iter241;
    for (_iter241 = this->values.begin(); _iter241 != this->values.end(); ++_iter241)
    {
      xfer += oprot->writeString((*_iter241));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->tableName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastAccessTime", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->lastAccessTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sd", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->sd.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_MAP, 7);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameters.size()));
    std::map<std::string, std::string> ::const_iterator _iter242;
    for (_iter242 = this->parameters.begin(); _iter242 != this->parameters.end(); ++_iter242)
    {
      xfer += oprot->writeString(_iter242->first);
      xfer += oprot->writeString(_iter242->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.privileges) {
    xfer += oprot->writeFieldBegin("privileges", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->privileges.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Partition &a, Partition &b) {
  using ::std::swap;
  swap(a.values, b.values);
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.createTime, b.createTime);
  swap(a.lastAccessTime, b.lastAccessTime);
  swap(a.sd, b.sd);
  swap(a.parameters, b.parameters);
  swap(a.privileges, b.privileges);
  swap(a.__isset, b.__isset);
}

Partition::Partition(const Partition& other243) {
  values = other243.values;
  dbName = other243.dbName;
  tableName = other243.tableName;
  createTime = other243.createTime;
  lastAccessTime = other243.lastAccessTime;
  sd = other243.sd;
  parameters = other243.parameters;
  privileges = other243.privileges;
  __isset = other243.__isset;
}
Partition& Partition::operator=(const Partition& other244) {
  values = other244.values;
  dbName = other244.dbName;
  tableName = other244.tableName;
  createTime = other244.createTime;
  lastAccessTime = other244.lastAccessTime;
  sd = other244.sd;
  parameters = other244.parameters;
  privileges = other244.privileges;
  __isset = other244.__isset;
  return *this;
}
void Partition::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Partition(";
  out << "values=" << to_string(values);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "lastAccessTime=" << to_string(lastAccessTime);
  out << ", " << "sd=" << to_string(sd);
  out << ", " << "parameters=" << to_string(parameters);
  out << ", " << "privileges="; (__isset.privileges ? (out << to_string(privileges)) : (out << "<null>"));
  out << ")";
}


PartitionWithoutSD::~PartitionWithoutSD() throw() {
}


void PartitionWithoutSD::__set_values(const std::vector<std::string> & val) {
  this->values = val;
}

void PartitionWithoutSD::__set_createTime(const int32_t val) {
  this->createTime = val;
}

void PartitionWithoutSD::__set_lastAccessTime(const int32_t val) {
  this->lastAccessTime = val;
}

void PartitionWithoutSD::__set_relativePath(const std::string& val) {
  this->relativePath = val;
}

void PartitionWithoutSD::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

void PartitionWithoutSD::__set_privileges(const PrincipalPrivilegeSet& val) {
  this->privileges = val;
__isset.privileges = true;
}

uint32_t PartitionWithoutSD::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
            uint32_t _size245;
            ::apache::thrift::protocol::TType _etype248;
            xfer += iprot->readListBegin(_etype248, _size245);
            this->values.resize(_size245);
            uint32_t _i249;
            for (_i249 = 0; _i249 < _size245; ++_i249)
            {
              xfer += iprot->readString(this->values[_i249]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lastAccessTime);
          this->__isset.lastAccessTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->relativePath);
          this->__isset.relativePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->parameters.clear();
            uint32_t _size250;
            ::apache::thrift::protocol::TType _ktype251;
            ::apache::thrift::protocol::TType _vtype252;
            xfer += iprot->readMapBegin(_ktype251, _vtype252, _size250);
            uint32_t _i254;
            for (_i254 = 0; _i254 < _size250; ++_i254)
            {
              std::string _key255;
              xfer += iprot->readString(_key255);
              std::string& _val256 = this->parameters[_key255];
              xfer += iprot->readString(_val256);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->privileges.read(iprot);
          this->__isset.privileges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PartitionWithoutSD::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionWithoutSD");

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->values.size()));
    std::vector<std::string> ::const_iterator _iter257;
    for (_iter257 = this->values.begin(); _iter257 != this->values.end(); ++_iter257)
    {
      xfer += oprot->writeString((*_iter257));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastAccessTime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->lastAccessTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relativePath", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->relativePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_MAP, 5);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameters.size()));
    std::map<std::string, std::string> ::const_iterator _iter258;
    for (_iter258 = this->parameters.begin(); _iter258 != this->parameters.end(); ++_iter258)
    {
      xfer += oprot->writeString(_iter258->first);
      xfer += oprot->writeString(_iter258->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.privileges) {
    xfer += oprot->writeFieldBegin("privileges", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->privileges.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionWithoutSD &a, PartitionWithoutSD &b) {
  using ::std::swap;
  swap(a.values, b.values);
  swap(a.createTime, b.createTime);
  swap(a.lastAccessTime, b.lastAccessTime);
  swap(a.relativePath, b.relativePath);
  swap(a.parameters, b.parameters);
  swap(a.privileges, b.privileges);
  swap(a.__isset, b.__isset);
}

PartitionWithoutSD::PartitionWithoutSD(const PartitionWithoutSD& other259) {
  values = other259.values;
  createTime = other259.createTime;
  lastAccessTime = other259.lastAccessTime;
  relativePath = other259.relativePath;
  parameters = other259.parameters;
  privileges = other259.privileges;
  __isset = other259.__isset;
}
PartitionWithoutSD& PartitionWithoutSD::operator=(const PartitionWithoutSD& other260) {
  values = other260.values;
  createTime = other260.createTime;
  lastAccessTime = other260.lastAccessTime;
  relativePath = other260.relativePath;
  parameters = other260.parameters;
  privileges = other260.privileges;
  __isset = other260.__isset;
  return *this;
}
void PartitionWithoutSD::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionWithoutSD(";
  out << "values=" << to_string(values);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "lastAccessTime=" << to_string(lastAccessTime);
  out << ", " << "relativePath=" << to_string(relativePath);
  out << ", " << "parameters=" << to_string(parameters);
  out << ", " << "privileges="; (__isset.privileges ? (out << to_string(privileges)) : (out << "<null>"));
  out << ")";
}


PartitionSpecWithSharedSD::~PartitionSpecWithSharedSD() throw() {
}


void PartitionSpecWithSharedSD::__set_partitions(const std::vector<PartitionWithoutSD> & val) {
  this->partitions = val;
}

void PartitionSpecWithSharedSD::__set_sd(const StorageDescriptor& val) {
  this->sd = val;
}

uint32_t PartitionSpecWithSharedSD::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitions.clear();
            uint32_t _size261;
            ::apache::thrift::protocol::TType _etype264;
            xfer += iprot->readListBegin(_etype264, _size261);
            this->partitions.resize(_size261);
            uint32_t _i265;
            for (_i265 = 0; _i265 < _size261; ++_i265)
            {
              xfer += this->partitions[_i265].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partitions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sd.read(iprot);
          this->__isset.sd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PartitionSpecWithSharedSD::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionSpecWithSharedSD");

  xfer += oprot->writeFieldBegin("partitions", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitions.size()));
    std::vector<PartitionWithoutSD> ::const_iterator _iter266;
    for (_iter266 = this->partitions.begin(); _iter266 != this->partitions.end(); ++_iter266)
    {
      xfer += (*_iter266).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sd", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->sd.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionSpecWithSharedSD &a, PartitionSpecWithSharedSD &b) {
  using ::std::swap;
  swap(a.partitions, b.partitions);
  swap(a.sd, b.sd);
  swap(a.__isset, b.__isset);
}

PartitionSpecWithSharedSD::PartitionSpecWithSharedSD(const PartitionSpecWithSharedSD& other267) {
  partitions = other267.partitions;
  sd = other267.sd;
  __isset = other267.__isset;
}
PartitionSpecWithSharedSD& PartitionSpecWithSharedSD::operator=(const PartitionSpecWithSharedSD& other268) {
  partitions = other268.partitions;
  sd = other268.sd;
  __isset = other268.__isset;
  return *this;
}
void PartitionSpecWithSharedSD::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionSpecWithSharedSD(";
  out << "partitions=" << to_string(partitions);
  out << ", " << "sd=" << to_string(sd);
  out << ")";
}


PartitionListComposingSpec::~PartitionListComposingSpec() throw() {
}


void PartitionListComposingSpec::__set_partitions(const std::vector<Partition> & val) {
  this->partitions = val;
}

uint32_t PartitionListComposingSpec::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitions.clear();
            uint32_t _size269;
            ::apache::thrift::protocol::TType _etype272;
            xfer += iprot->readListBegin(_etype272, _size269);
            this->partitions.resize(_size269);
            uint32_t _i273;
            for (_i273 = 0; _i273 < _size269; ++_i273)
            {
              xfer += this->partitions[_i273].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partitions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PartitionListComposingSpec::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionListComposingSpec");

  xfer += oprot->writeFieldBegin("partitions", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitions.size()));
    std::vector<Partition> ::const_iterator _iter274;
    for (_iter274 = this->partitions.begin(); _iter274 != this->partitions.end(); ++_iter274)
    {
      xfer += (*_iter274).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionListComposingSpec &a, PartitionListComposingSpec &b) {
  using ::std::swap;
  swap(a.partitions, b.partitions);
  swap(a.__isset, b.__isset);
}

PartitionListComposingSpec::PartitionListComposingSpec(const PartitionListComposingSpec& other275) {
  partitions = other275.partitions;
  __isset = other275.__isset;
}
PartitionListComposingSpec& PartitionListComposingSpec::operator=(const PartitionListComposingSpec& other276) {
  partitions = other276.partitions;
  __isset = other276.__isset;
  return *this;
}
void PartitionListComposingSpec::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionListComposingSpec(";
  out << "partitions=" << to_string(partitions);
  out << ")";
}


PartitionSpec::~PartitionSpec() throw() {
}


void PartitionSpec::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void PartitionSpec::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void PartitionSpec::__set_rootPath(const std::string& val) {
  this->rootPath = val;
}

void PartitionSpec::__set_sharedSDPartitionSpec(const PartitionSpecWithSharedSD& val) {
  this->sharedSDPartitionSpec = val;
__isset.sharedSDPartitionSpec = true;
}

void PartitionSpec::__set_partitionList(const PartitionListComposingSpec& val) {
  this->partitionList = val;
__isset.partitionList = true;
}

uint32_t PartitionSpec::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          this->__isset.dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rootPath);
          this->__isset.rootPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sharedSDPartitionSpec.read(iprot);
          this->__isset.sharedSDPartitionSpec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->partitionList.read(iprot);
          this->__isset.partitionList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PartitionSpec::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionSpec");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tableName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rootPath", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->rootPath);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.sharedSDPartitionSpec) {
    xfer += oprot->writeFieldBegin("sharedSDPartitionSpec", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->sharedSDPartitionSpec.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partitionList) {
    xfer += oprot->writeFieldBegin("partitionList", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->partitionList.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionSpec &a, PartitionSpec &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.rootPath, b.rootPath);
  swap(a.sharedSDPartitionSpec, b.sharedSDPartitionSpec);
  swap(a.partitionList, b.partitionList);
  swap(a.__isset, b.__isset);
}

PartitionSpec::PartitionSpec(const PartitionSpec& other277) {
  dbName = other277.dbName;
  tableName = other277.tableName;
  rootPath = other277.rootPath;
  sharedSDPartitionSpec = other277.sharedSDPartitionSpec;
  partitionList = other277.partitionList;
  __isset = other277.__isset;
}
PartitionSpec& PartitionSpec::operator=(const PartitionSpec& other278) {
  dbName = other278.dbName;
  tableName = other278.tableName;
  rootPath = other278.rootPath;
  sharedSDPartitionSpec = other278.sharedSDPartitionSpec;
  partitionList = other278.partitionList;
  __isset = other278.__isset;
  return *this;
}
void PartitionSpec::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionSpec(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ", " << "rootPath=" << to_string(rootPath);
  out << ", " << "sharedSDPartitionSpec="; (__isset.sharedSDPartitionSpec ? (out << to_string(sharedSDPartitionSpec)) : (out << "<null>"));
  out << ", " << "partitionList="; (__isset.partitionList ? (out << to_string(partitionList)) : (out << "<null>"));
  out << ")";
}


Index::~Index() throw() {
}


void Index::__set_indexName(const std::string& val) {
  this->indexName = val;
}

void Index::__set_indexHandlerClass(const std::string& val) {
  this->indexHandlerClass = val;
}

void Index::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void Index::__set_origTableName(const std::string& val) {
  this->origTableName = val;
}

void Index::__set_createTime(const int32_t val) {
  this->createTime = val;
}

void Index::__set_lastAccessTime(const int32_t val) {
  this->lastAccessTime = val;
}

void Index::__set_indexTableName(const std::string& val) {
  this->indexTableName = val;
}

void Index::__set_sd(const StorageDescriptor& val) {
  this->sd = val;
}

void Index::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

void Index::__set_deferredRebuild(const bool val) {
  this->deferredRebuild = val;
}

uint32_t Index::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->indexName);
          this->__isset.indexName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->indexHandlerClass);
          this->__isset.indexHandlerClass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          this->__isset.dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->origTableName);
          this->__isset.origTableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->lastAccessTime);
          this->__isset.lastAccessTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->indexTableName);
          this->__isset.indexTableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sd.read(iprot);
          this->__isset.sd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->parameters.clear();
            uint32_t _size279;
            ::apache::thrift::protocol::TType _ktype280;
            ::apache::thrift::protocol::TType _vtype281;
            xfer += iprot->readMapBegin(_ktype280, _vtype281, _size279);
            uint32_t _i283;
            for (_i283 = 0; _i283 < _size279; ++_i283)
            {
              std::string _key284;
              xfer += iprot->readString(_key284);
              std::string& _val285 = this->parameters[_key284];
              xfer += iprot->readString(_val285);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->deferredRebuild);
          this->__isset.deferredRebuild = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Index::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Index");

  xfer += oprot->writeFieldBegin("indexName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->indexName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("indexHandlerClass", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->indexHandlerClass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("origTableName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->origTableName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastAccessTime", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->lastAccessTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("indexTableName", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->indexTableName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sd", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->sd.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_MAP, 9);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->parameters.size()));
    std::map<std::string, std::string> ::const_iterator _iter286;
    for (_iter286 = this->parameters.begin(); _iter286 != this->parameters.end(); ++_iter286)
    {
      xfer += oprot->writeString(_iter286->first);
      xfer += oprot->writeString(_iter286->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deferredRebuild", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->deferredRebuild);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Index &a, Index &b) {
  using ::std::swap;
  swap(a.indexName, b.indexName);
  swap(a.indexHandlerClass, b.indexHandlerClass);
  swap(a.dbName, b.dbName);
  swap(a.origTableName, b.origTableName);
  swap(a.createTime, b.createTime);
  swap(a.lastAccessTime, b.lastAccessTime);
  swap(a.indexTableName, b.indexTableName);
  swap(a.sd, b.sd);
  swap(a.parameters, b.parameters);
  swap(a.deferredRebuild, b.deferredRebuild);
  swap(a.__isset, b.__isset);
}

Index::Index(const Index& other287) {
  indexName = other287.indexName;
  indexHandlerClass = other287.indexHandlerClass;
  dbName = other287.dbName;
  origTableName = other287.origTableName;
  createTime = other287.createTime;
  lastAccessTime = other287.lastAccessTime;
  indexTableName = other287.indexTableName;
  sd = other287.sd;
  parameters = other287.parameters;
  deferredRebuild = other287.deferredRebuild;
  __isset = other287.__isset;
}
Index& Index::operator=(const Index& other288) {
  indexName = other288.indexName;
  indexHandlerClass = other288.indexHandlerClass;
  dbName = other288.dbName;
  origTableName = other288.origTableName;
  createTime = other288.createTime;
  lastAccessTime = other288.lastAccessTime;
  indexTableName = other288.indexTableName;
  sd = other288.sd;
  parameters = other288.parameters;
  deferredRebuild = other288.deferredRebuild;
  __isset = other288.__isset;
  return *this;
}
void Index::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Index(";
  out << "indexName=" << to_string(indexName);
  out << ", " << "indexHandlerClass=" << to_string(indexHandlerClass);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "origTableName=" << to_string(origTableName);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "lastAccessTime=" << to_string(lastAccessTime);
  out << ", " << "indexTableName=" << to_string(indexTableName);
  out << ", " << "sd=" << to_string(sd);
  out << ", " << "parameters=" << to_string(parameters);
  out << ", " << "deferredRebuild=" << to_string(deferredRebuild);
  out << ")";
}


BooleanColumnStatsData::~BooleanColumnStatsData() throw() {
}


void BooleanColumnStatsData::__set_numTrues(const int64_t val) {
  this->numTrues = val;
}

void BooleanColumnStatsData::__set_numFalses(const int64_t val) {
  this->numFalses = val;
}

void BooleanColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void BooleanColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}

uint32_t BooleanColumnStatsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_numTrues = false;
  bool isset_numFalses = false;
  bool isset_numNulls = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numTrues);
          isset_numTrues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numFalses);
          isset_numFalses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numNulls);
          isset_numNulls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bitVectors);
          this->__isset.bitVectors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_numTrues)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numFalses)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numNulls)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BooleanColumnStatsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BooleanColumnStatsData");

  xfer += oprot->writeFieldBegin("numTrues", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->numTrues);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numFalses", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->numFalses);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numNulls", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->numNulls);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bitVectors) {
    xfer += oprot->writeFieldBegin("bitVectors", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeBinary(this->bitVectors);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BooleanColumnStatsData &a, BooleanColumnStatsData &b) {
  using ::std::swap;
  swap(a.numTrues, b.numTrues);
  swap(a.numFalses, b.numFalses);
  swap(a.numNulls, b.numNulls);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

BooleanColumnStatsData::BooleanColumnStatsData(const BooleanColumnStatsData& other289) {
  numTrues = other289.numTrues;
  numFalses = other289.numFalses;
  numNulls = other289.numNulls;
  bitVectors = other289.bitVectors;
  __isset = other289.__isset;
}
BooleanColumnStatsData& BooleanColumnStatsData::operator=(const BooleanColumnStatsData& other290) {
  numTrues = other290.numTrues;
  numFalses = other290.numFalses;
  numNulls = other290.numNulls;
  bitVectors = other290.bitVectors;
  __isset = other290.__isset;
  return *this;
}
void BooleanColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BooleanColumnStatsData(";
  out << "numTrues=" << to_string(numTrues);
  out << ", " << "numFalses=" << to_string(numFalses);
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


DoubleColumnStatsData::~DoubleColumnStatsData() throw() {
}


void DoubleColumnStatsData::__set_lowValue(const double val) {
  this->lowValue = val;
__isset.lowValue = true;
}

void DoubleColumnStatsData::__set_highValue(const double val) {
  this->highValue = val;
__isset.highValue = true;
}

void DoubleColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void DoubleColumnStatsData::__set_numDVs(const int64_t val) {
  this->numDVs = val;
}

void DoubleColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}

uint32_t DoubleColumnStatsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_numNulls = false;
  bool isset_numDVs = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lowValue);
          this->__isset.lowValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->highValue);
          this->__isset.highValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numNulls);
          isset_numNulls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numDVs);
          isset_numDVs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bitVectors);
          this->__isset.bitVectors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_numNulls)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numDVs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DoubleColumnStatsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DoubleColumnStatsData");

  if (this->__isset.lowValue) {
    xfer += oprot->writeFieldBegin("lowValue", ::apache::thrift::protocol::T_DOUBLE, 1);
    xfer += oprot->writeDouble(this->lowValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.highValue) {
    xfer += oprot->writeFieldBegin("highValue", ::apache::thrift::protocol::T_DOUBLE, 2);
    xfer += oprot->writeDouble(this->highValue);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("numNulls", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->numNulls);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numDVs", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->numDVs);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bitVectors) {
    xfer += oprot->writeFieldBegin("bitVectors", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeBinary(this->bitVectors);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DoubleColumnStatsData &a, DoubleColumnStatsData &b) {
  using ::std::swap;
  swap(a.lowValue, b.lowValue);
  swap(a.highValue, b.highValue);
  swap(a.numNulls, b.numNulls);
  swap(a.numDVs, b.numDVs);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

DoubleColumnStatsData::DoubleColumnStatsData(const DoubleColumnStatsData& other291) {
  lowValue = other291.lowValue;
  highValue = other291.highValue;
  numNulls = other291.numNulls;
  numDVs = other291.numDVs;
  bitVectors = other291.bitVectors;
  __isset = other291.__isset;
}
DoubleColumnStatsData& DoubleColumnStatsData::operator=(const DoubleColumnStatsData& other292) {
  lowValue = other292.lowValue;
  highValue = other292.highValue;
  numNulls = other292.numNulls;
  numDVs = other292.numDVs;
  bitVectors = other292.bitVectors;
  __isset = other292.__isset;
  return *this;
}
void DoubleColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DoubleColumnStatsData(";
  out << "lowValue="; (__isset.lowValue ? (out << to_string(lowValue)) : (out << "<null>"));
  out << ", " << "highValue="; (__isset.highValue ? (out << to_string(highValue)) : (out << "<null>"));
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "numDVs=" << to_string(numDVs);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


LongColumnStatsData::~LongColumnStatsData() throw() {
}


void LongColumnStatsData::__set_lowValue(const int64_t val) {
  this->lowValue = val;
__isset.lowValue = true;
}

void LongColumnStatsData::__set_highValue(const int64_t val) {
  this->highValue = val;
__isset.highValue = true;
}

void LongColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void LongColumnStatsData::__set_numDVs(const int64_t val) {
  this->numDVs = val;
}

void LongColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}

uint32_t LongColumnStatsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_numNulls = false;
  bool isset_numDVs = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lowValue);
          this->__isset.lowValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->highValue);
          this->__isset.highValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numNulls);
          isset_numNulls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numDVs);
          isset_numDVs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bitVectors);
          this->__isset.bitVectors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_numNulls)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numDVs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LongColumnStatsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LongColumnStatsData");

  if (this->__isset.lowValue) {
    xfer += oprot->writeFieldBegin("lowValue", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->lowValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.highValue) {
    xfer += oprot->writeFieldBegin("highValue", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->highValue);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("numNulls", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->numNulls);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numDVs", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->numDVs);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bitVectors) {
    xfer += oprot->writeFieldBegin("bitVectors", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeBinary(this->bitVectors);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LongColumnStatsData &a, LongColumnStatsData &b) {
  using ::std::swap;
  swap(a.lowValue, b.lowValue);
  swap(a.highValue, b.highValue);
  swap(a.numNulls, b.numNulls);
  swap(a.numDVs, b.numDVs);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

LongColumnStatsData::LongColumnStatsData(const LongColumnStatsData& other293) {
  lowValue = other293.lowValue;
  highValue = other293.highValue;
  numNulls = other293.numNulls;
  numDVs = other293.numDVs;
  bitVectors = other293.bitVectors;
  __isset = other293.__isset;
}
LongColumnStatsData& LongColumnStatsData::operator=(const LongColumnStatsData& other294) {
  lowValue = other294.lowValue;
  highValue = other294.highValue;
  numNulls = other294.numNulls;
  numDVs = other294.numDVs;
  bitVectors = other294.bitVectors;
  __isset = other294.__isset;
  return *this;
}
void LongColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LongColumnStatsData(";
  out << "lowValue="; (__isset.lowValue ? (out << to_string(lowValue)) : (out << "<null>"));
  out << ", " << "highValue="; (__isset.highValue ? (out << to_string(highValue)) : (out << "<null>"));
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "numDVs=" << to_string(numDVs);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


StringColumnStatsData::~StringColumnStatsData() throw() {
}


void StringColumnStatsData::__set_maxColLen(const int64_t val) {
  this->maxColLen = val;
}

void StringColumnStatsData::__set_avgColLen(const double val) {
  this->avgColLen = val;
}

void StringColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void StringColumnStatsData::__set_numDVs(const int64_t val) {
  this->numDVs = val;
}

void StringColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}

uint32_t StringColumnStatsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_maxColLen = false;
  bool isset_avgColLen = false;
  bool isset_numNulls = false;
  bool isset_numDVs = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->maxColLen);
          isset_maxColLen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->avgColLen);
          isset_avgColLen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numNulls);
          isset_numNulls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numDVs);
          isset_numDVs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bitVectors);
          this->__isset.bitVectors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_maxColLen)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_avgColLen)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numNulls)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numDVs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StringColumnStatsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StringColumnStatsData");

  xfer += oprot->writeFieldBegin("maxColLen", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->maxColLen);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avgColLen", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->avgColLen);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numNulls", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->numNulls);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numDVs", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->numDVs);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bitVectors) {
    xfer += oprot->writeFieldBegin("bitVectors", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeBinary(this->bitVectors);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StringColumnStatsData &a, StringColumnStatsData &b) {
  using ::std::swap;
  swap(a.maxColLen, b.maxColLen);
  swap(a.avgColLen, b.avgColLen);
  swap(a.numNulls, b.numNulls);
  swap(a.numDVs, b.numDVs);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

StringColumnStatsData::StringColumnStatsData(const StringColumnStatsData& other295) {
  maxColLen = other295.maxColLen;
  avgColLen = other295.avgColLen;
  numNulls = other295.numNulls;
  numDVs = other295.numDVs;
  bitVectors = other295.bitVectors;
  __isset = other295.__isset;
}
StringColumnStatsData& StringColumnStatsData::operator=(const StringColumnStatsData& other296) {
  maxColLen = other296.maxColLen;
  avgColLen = other296.avgColLen;
  numNulls = other296.numNulls;
  numDVs = other296.numDVs;
  bitVectors = other296.bitVectors;
  __isset = other296.__isset;
  return *this;
}
void StringColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StringColumnStatsData(";
  out << "maxColLen=" << to_string(maxColLen);
  out << ", " << "avgColLen=" << to_string(avgColLen);
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "numDVs=" << to_string(numDVs);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


BinaryColumnStatsData::~BinaryColumnStatsData() throw() {
}


void BinaryColumnStatsData::__set_maxColLen(const int64_t val) {
  this->maxColLen = val;
}

void BinaryColumnStatsData::__set_avgColLen(const double val) {
  this->avgColLen = val;
}

void BinaryColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void BinaryColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}

uint32_t BinaryColumnStatsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_maxColLen = false;
  bool isset_avgColLen = false;
  bool isset_numNulls = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->maxColLen);
          isset_maxColLen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->avgColLen);
          isset_avgColLen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numNulls);
          isset_numNulls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bitVectors);
          this->__isset.bitVectors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_maxColLen)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_avgColLen)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numNulls)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BinaryColumnStatsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BinaryColumnStatsData");

  xfer += oprot->writeFieldBegin("maxColLen", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->maxColLen);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avgColLen", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->avgColLen);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numNulls", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->numNulls);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bitVectors) {
    xfer += oprot->writeFieldBegin("bitVectors", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeBinary(this->bitVectors);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BinaryColumnStatsData &a, BinaryColumnStatsData &b) {
  using ::std::swap;
  swap(a.maxColLen, b.maxColLen);
  swap(a.avgColLen, b.avgColLen);
  swap(a.numNulls, b.numNulls);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

BinaryColumnStatsData::BinaryColumnStatsData(const BinaryColumnStatsData& other297) {
  maxColLen = other297.maxColLen;
  avgColLen = other297.avgColLen;
  numNulls = other297.numNulls;
  bitVectors = other297.bitVectors;
  __isset = other297.__isset;
}
BinaryColumnStatsData& BinaryColumnStatsData::operator=(const BinaryColumnStatsData& other298) {
  maxColLen = other298.maxColLen;
  avgColLen = other298.avgColLen;
  numNulls = other298.numNulls;
  bitVectors = other298.bitVectors;
  __isset = other298.__isset;
  return *this;
}
void BinaryColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BinaryColumnStatsData(";
  out << "maxColLen=" << to_string(maxColLen);
  out << ", " << "avgColLen=" << to_string(avgColLen);
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


Decimal::~Decimal() throw() {
}


void Decimal::__set_unscaled(const std::string& val) {
  this->unscaled = val;
}

void Decimal::__set_scale(const int16_t val) {
  this->scale = val;
}

uint32_t Decimal::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_unscaled = false;
  bool isset_scale = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->unscaled);
          isset_unscaled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->scale);
          isset_scale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_unscaled)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scale)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Decimal::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Decimal");

  xfer += oprot->writeFieldBegin("unscaled", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->unscaled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scale", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->scale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Decimal &a, Decimal &b) {
  using ::std::swap;
  swap(a.unscaled, b.unscaled);
  swap(a.scale, b.scale);
}

Decimal::Decimal(const Decimal& other299) {
  unscaled = other299.unscaled;
  scale = other299.scale;
}
Decimal& Decimal::operator=(const Decimal& other300) {
  unscaled = other300.unscaled;
  scale = other300.scale;
  return *this;
}
void Decimal::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Decimal(";
  out << "unscaled=" << to_string(unscaled);
  out << ", " << "scale=" << to_string(scale);
  out << ")";
}


DecimalColumnStatsData::~DecimalColumnStatsData() throw() {
}


void DecimalColumnStatsData::__set_lowValue(const Decimal& val) {
  this->lowValue = val;
__isset.lowValue = true;
}

void DecimalColumnStatsData::__set_highValue(const Decimal& val) {
  this->highValue = val;
__isset.highValue = true;
}

void DecimalColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void DecimalColumnStatsData::__set_numDVs(const int64_t val) {
  this->numDVs = val;
}

void DecimalColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}

uint32_t DecimalColumnStatsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_numNulls = false;
  bool isset_numDVs = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->lowValue.read(iprot);
          this->__isset.lowValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->highValue.read(iprot);
          this->__isset.highValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numNulls);
          isset_numNulls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numDVs);
          isset_numDVs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bitVectors);
          this->__isset.bitVectors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_numNulls)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numDVs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DecimalColumnStatsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DecimalColumnStatsData");

  if (this->__isset.lowValue) {
    xfer += oprot->writeFieldBegin("lowValue", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->lowValue.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.highValue) {
    xfer += oprot->writeFieldBegin("highValue", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->highValue.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("numNulls", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->numNulls);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numDVs", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->numDVs);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bitVectors) {
    xfer += oprot->writeFieldBegin("bitVectors", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeBinary(this->bitVectors);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DecimalColumnStatsData &a, DecimalColumnStatsData &b) {
  using ::std::swap;
  swap(a.lowValue, b.lowValue);
  swap(a.highValue, b.highValue);
  swap(a.numNulls, b.numNulls);
  swap(a.numDVs, b.numDVs);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

DecimalColumnStatsData::DecimalColumnStatsData(const DecimalColumnStatsData& other301) {
  lowValue = other301.lowValue;
  highValue = other301.highValue;
  numNulls = other301.numNulls;
  numDVs = other301.numDVs;
  bitVectors = other301.bitVectors;
  __isset = other301.__isset;
}
DecimalColumnStatsData& DecimalColumnStatsData::operator=(const DecimalColumnStatsData& other302) {
  lowValue = other302.lowValue;
  highValue = other302.highValue;
  numNulls = other302.numNulls;
  numDVs = other302.numDVs;
  bitVectors = other302.bitVectors;
  __isset = other302.__isset;
  return *this;
}
void DecimalColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DecimalColumnStatsData(";
  out << "lowValue="; (__isset.lowValue ? (out << to_string(lowValue)) : (out << "<null>"));
  out << ", " << "highValue="; (__isset.highValue ? (out << to_string(highValue)) : (out << "<null>"));
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "numDVs=" << to_string(numDVs);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


Date::~Date() throw() {
}


void Date::__set_daysSinceEpoch(const int64_t val) {
  this->daysSinceEpoch = val;
}

uint32_t Date::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_daysSinceEpoch = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->daysSinceEpoch);
          isset_daysSinceEpoch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_daysSinceEpoch)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Date::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Date");

  xfer += oprot->writeFieldBegin("daysSinceEpoch", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->daysSinceEpoch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Date &a, Date &b) {
  using ::std::swap;
  swap(a.daysSinceEpoch, b.daysSinceEpoch);
}

Date::Date(const Date& other303) {
  daysSinceEpoch = other303.daysSinceEpoch;
}
Date& Date::operator=(const Date& other304) {
  daysSinceEpoch = other304.daysSinceEpoch;
  return *this;
}
void Date::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Date(";
  out << "daysSinceEpoch=" << to_string(daysSinceEpoch);
  out << ")";
}


DateColumnStatsData::~DateColumnStatsData() throw() {
}


void DateColumnStatsData::__set_lowValue(const Date& val) {
  this->lowValue = val;
__isset.lowValue = true;
}

void DateColumnStatsData::__set_highValue(const Date& val) {
  this->highValue = val;
__isset.highValue = true;
}

void DateColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void DateColumnStatsData::__set_numDVs(const int64_t val) {
  this->numDVs = val;
}

void DateColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}

uint32_t DateColumnStatsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_numNulls = false;
  bool isset_numDVs = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->lowValue.read(iprot);
          this->__isset.lowValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->highValue.read(iprot);
          this->__isset.highValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numNulls);
          isset_numNulls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numDVs);
          isset_numDVs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bitVectors);
          this->__isset.bitVectors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_numNulls)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numDVs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DateColumnStatsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DateColumnStatsData");

  if (this->__isset.lowValue) {
    xfer += oprot->writeFieldBegin("lowValue", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->lowValue.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.highValue) {
    xfer += oprot->writeFieldBegin("highValue", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->highValue.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("numNulls", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->numNulls);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numDVs", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->numDVs);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bitVectors) {
    xfer += oprot->writeFieldBegin("bitVectors", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeBinary(this->bitVectors);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DateColumnStatsData &a, DateColumnStatsData &b) {
  using ::std::swap;
  swap(a.lowValue, b.lowValue);
  swap(a.highValue, b.highValue);
  swap(a.numNulls, b.numNulls);
  swap(a.numDVs, b.numDVs);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

DateColumnStatsData::DateColumnStatsData(const DateColumnStatsData& other305) {
  lowValue = other305.lowValue;
  highValue = other305.highValue;
  numNulls = other305.numNulls;
  numDVs = other305.numDVs;
  bitVectors = other305.bitVectors;
  __isset = other305.__isset;
}
DateColumnStatsData& DateColumnStatsData::operator=(const DateColumnStatsData& other306) {
  lowValue = other306.lowValue;
  highValue = other306.highValue;
  numNulls = other306.numNulls;
  numDVs = other306.numDVs;
  bitVectors = other306.bitVectors;
  __isset = other306.__isset;
  return *this;
}
void DateColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DateColumnStatsData(";
  out << "lowValue="; (__isset.lowValue ? (out << to_string(lowValue)) : (out << "<null>"));
  out << ", " << "highValue="; (__isset.highValue ? (out << to_string(highValue)) : (out << "<null>"));
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "numDVs=" << to_string(numDVs);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


ColumnStatisticsData::~ColumnStatisticsData() throw() {
}


void ColumnStatisticsData::__set_booleanStats(const BooleanColumnStatsData& val) {
  this->booleanStats = val;
}

void ColumnStatisticsData::__set_longStats(const LongColumnStatsData& val) {
  this->longStats = val;
}

void ColumnStatisticsData::__set_doubleStats(const DoubleColumnStatsData& val) {
  this->doubleStats = val;
}

void ColumnStatisticsData::__set_stringStats(const StringColumnStatsData& val) {
  this->stringStats = val;
}

void ColumnStatisticsData::__set_binaryStats(const BinaryColumnStatsData& val) {
  this->binaryStats = val;
}

void ColumnStatisticsData::__set_decimalStats(const DecimalColumnStatsData& val) {
  this->decimalStats = val;
}

void ColumnStatisticsData::__set_dateStats(const DateColumnStatsData& val) {
  this->dateStats = val;
}

uint32_t ColumnStatisticsData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->booleanStats.read(iprot);
          this->__isset.booleanStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->longStats.read(iprot);
          this->__isset.longStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->doubleStats.read(iprot);
          this->__isset.doubleStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->stringStats.read(iprot);
          this->__isset.stringStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->binaryStats.read(iprot);
          this->__isset.binaryStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->decimalStats.read(iprot);
          this->__isset.decimalStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dateStats.read(iprot);
          this->__isset.dateStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ColumnStatisticsData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ColumnStatisticsData");

  xfer += oprot->writeFieldBegin("booleanStats", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->booleanStats.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("longStats", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->longStats.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("doubleStats", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->doubleStats.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stringStats", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->stringStats.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("binaryStats", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->binaryStats.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("decimalStats", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->decimalStats.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dateStats", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->dateStats.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ColumnStatisticsData &a, ColumnStatisticsData &b) {
  using ::std::swap;
  swap(a.booleanStats, b.booleanStats);
  swap(a.longStats, b.longStats);
  swap(a.doubleStats, b.doubleStats);
  swap(a.stringStats, b.stringStats);
  swap(a.binaryStats, b.binaryStats);
  swap(a.decimalStats, b.decimalStats);
  swap(a.dateStats, b.dateStats);
  swap(a.__isset, b.__isset);
}

ColumnStatisticsData::ColumnStatisticsData(const ColumnStatisticsData& other307) {
  booleanStats = other307.booleanStats;
  longStats = other307.longStats;
  doubleStats = other307.doubleStats;
  stringStats = other307.stringStats;
  binaryStats = other307.binaryStats;
  decimalStats = other307.decimalStats;
  dateStats = other307.dateStats;
  __isset = other307.__isset;
}
ColumnStatisticsData& ColumnStatisticsData::operator=(const ColumnStatisticsData& other308) {
  booleanStats = other308.booleanStats;
  longStats = other308.longStats;
  doubleStats = other308.doubleStats;
  stringStats = other308.stringStats;
  binaryStats = other308.binaryStats;
  decimalStats = other308.decimalStats;
  dateStats = other308.dateStats;
  __isset = other308.__isset;
  return *this;
}
void ColumnStatisticsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnStatisticsData(";
  out << "booleanStats=" << to_string(booleanStats);
  out << ", " << "longStats=" << to_string(longStats);
  out << ", " << "doubleStats=" << to_string(doubleStats);
  out << ", " << "stringStats=" << to_string(stringStats);
  out << ", " << "binaryStats=" << to_string(binaryStats);
  out << ", " << "decimalStats=" << to_string(decimalStats);
  out << ", " << "dateStats=" << to_string(dateStats);
  out << ")";
}


ColumnStatisticsObj::~ColumnStatisticsObj() throw() {
}


void ColumnStatisticsObj::__set_colName(const std::string& val) {
  this->colName = val;
}

void ColumnStatisticsObj::__set_colType(const std::string& val) {
  this->colType = val;
}

void ColumnStatisticsObj::__set_statsData(const ColumnStatisticsData& val) {
  this->statsData = val;
}

uint32_t ColumnStatisticsObj::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_colName = false;
  bool isset_colType = false;
  bool isset_statsData = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->colName);
          isset_colName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->colType);
          isset_colType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->statsData.read(iprot);
          isset_statsData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_colName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_colType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_statsData)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ColumnStatisticsObj::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ColumnStatisticsObj");

  xfer += oprot->writeFieldBegin("colName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->colName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("colType", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->colType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statsData", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->statsData.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ColumnStatisticsObj &a, ColumnStatisticsObj &b) {
  using ::std::swap;
  swap(a.colName, b.colName);
  swap(a.colType, b.colType);
  swap(a.statsData, b.statsData);
}

ColumnStatisticsObj::ColumnStatisticsObj(const ColumnStatisticsObj& other309) {
  colName = other309.colName;
  colType = other309.colType;
  statsData = other309.statsData;
}
ColumnStatisticsObj& ColumnStatisticsObj::operator=(const ColumnStatisticsObj& other310) {
  colName = other310.colName;
  colType = other310.colType;
  statsData = other310.statsData;
  return *this;
}
void ColumnStatisticsObj::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnStatisticsObj(";
  out << "colName=" << to_string(colName);
  out << ", " << "colType=" << to_string(colType);
  out << ", " << "statsData=" << to_string(statsData);
  out << ")";
}


ColumnStatisticsDesc::~ColumnStatisticsDesc() throw() {
}


void ColumnStatisticsDesc::__set_isTblLevel(const bool val) {
  this->isTblLevel = val;
}

void ColumnStatisticsDesc::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void ColumnStatisticsDesc::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void ColumnStatisticsDesc::__set_partName(const std::string& val) {
  this->partName = val;
__isset.partName = true;
}

void ColumnStatisticsDesc::__set_lastAnalyzed(const int64_t val) {
  this->lastAnalyzed = val;
__isset.lastAnalyzed = true;
}

uint32_t ColumnStatisticsDesc::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_isTblLevel = false;
  bool isset_dbName = false;
  bool isset_tableName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isTblLevel);
          isset_isTblLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          isset_tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->partName);
          this->__isset.partName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastAnalyzed);
          this->__isset.lastAnalyzed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_isTblLevel)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tableName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ColumnStatisticsDesc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ColumnStatisticsDesc");

  xfer += oprot->writeFieldBegin("isTblLevel", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->isTblLevel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->tableName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.partName) {
    xfer += oprot->writeFieldBegin("partName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->partName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastAnalyzed) {
    xfer += oprot->writeFieldBegin("lastAnalyzed", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->lastAnalyzed);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ColumnStatisticsDesc &a, ColumnStatisticsDesc &b) {
  using ::std::swap;
  swap(a.isTblLevel, b.isTblLevel);
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.partName, b.partName);
  swap(a.lastAnalyzed, b.lastAnalyzed);
  swap(a.__isset, b.__isset);
}

ColumnStatisticsDesc::ColumnStatisticsDesc(const ColumnStatisticsDesc& other311) {
  isTblLevel = other311.isTblLevel;
  dbName = other311.dbName;
  tableName = other311.tableName;
  partName = other311.partName;
  lastAnalyzed = other311.lastAnalyzed;
  __isset = other311.__isset;
}
ColumnStatisticsDesc& ColumnStatisticsDesc::operator=(const ColumnStatisticsDesc& other312) {
  isTblLevel = other312.isTblLevel;
  dbName = other312.dbName;
  tableName = other312.tableName;
  partName = other312.partName;
  lastAnalyzed = other312.lastAnalyzed;
  __isset = other312.__isset;
  return *this;
}
void ColumnStatisticsDesc::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnStatisticsDesc(";
  out << "isTblLevel=" << to_string(isTblLevel);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ", " << "partName="; (__isset.partName ? (out << to_string(partName)) : (out << "<null>"));
  out << ", " << "lastAnalyzed="; (__isset.lastAnalyzed ? (out << to_string(lastAnalyzed)) : (out << "<null>"));
  out << ")";
}


ColumnStatistics::~ColumnStatistics() throw() {
}


void ColumnStatistics::__set_statsDesc(const ColumnStatisticsDesc& val) {
  this->statsDesc = val;
}

void ColumnStatistics::__set_statsObj(const std::vector<ColumnStatisticsObj> & val) {
  this->statsObj = val;
}

uint32_t ColumnStatistics::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_statsDesc = false;
  bool isset_statsObj = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->statsDesc.read(iprot);
          isset_statsDesc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->statsObj.clear();
            uint32_t _size313;
            ::apache::thrift::protocol::TType _etype316;
            xfer += iprot->readListBegin(_etype316, _size313);
            this->statsObj.resize(_size313);
            uint32_t _i317;
            for (_i317 = 0; _i317 < _size313; ++_i317)
            {
              xfer += this->statsObj[_i317].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_statsObj = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_statsDesc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_statsObj)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ColumnStatistics::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ColumnStatistics");

  xfer += oprot->writeFieldBegin("statsDesc", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->statsDesc.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statsObj", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->statsObj.size()));
    std::vector<ColumnStatisticsObj> ::const_iterator _iter318;
    for (_iter318 = this->statsObj.begin(); _iter318 != this->statsObj.end(); ++_iter318)
    {
      xfer += (*_iter318).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ColumnStatistics &a, ColumnStatistics &b) {
  using ::std::swap;
  swap(a.statsDesc, b.statsDesc);
  swap(a.statsObj, b.statsObj);
}

ColumnStatistics::ColumnStatistics(const ColumnStatistics& other319) {
  statsDesc = other319.statsDesc;
  statsObj = other319.statsObj;
}
ColumnStatistics& ColumnStatistics::operator=(const ColumnStatistics& other320) {
  statsDesc = other320.statsDesc;
  statsObj = other320.statsObj;
  return *this;
}
void ColumnStatistics::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnStatistics(";
  out << "statsDesc=" << to_string(statsDesc);
  out << ", " << "statsObj=" << to_string(statsObj);
  out << ")";
}


AggrStats::~AggrStats() throw() {
}


void AggrStats::__set_colStats(const std::vector<ColumnStatisticsObj> & val) {
  this->colStats = val;
}

void AggrStats::__set_partsFound(const int64_t val) {
  this->partsFound = val;
}

uint32_t AggrStats::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_colStats = false;
  bool isset_partsFound = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->colStats.clear();
            uint32_t _size321;
            ::apache::thrift::protocol::TType _etype324;
            xfer += iprot->readListBegin(_etype324, _size321);
            this->colStats.resize(_size321);
            uint32_t _i325;
            for (_i325 = 0; _i325 < _size321; ++_i325)
            {
              xfer += this->colStats[_i325].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_colStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->partsFound);
          isset_partsFound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_colStats)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_partsFound)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AggrStats::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AggrStats");

  xfer += oprot->writeFieldBegin("colStats", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->colStats.size()));
    std::vector<ColumnStatisticsObj> ::const_iterator _iter326;
    for (_iter326 = this->colStats.begin(); _iter326 != this->colStats.end(); ++_iter326)
    {
      xfer += (*_iter326).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partsFound", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->partsFound);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AggrStats &a, AggrStats &b) {
  using ::std::swap;
  swap(a.colStats, b.colStats);
  swap(a.partsFound, b.partsFound);
}

AggrStats::AggrStats(const AggrStats& other327) {
  colStats = other327.colStats;
  partsFound = other327.partsFound;
}
AggrStats& AggrStats::operator=(const AggrStats& other328) {
  colStats = other328.colStats;
  partsFound = other328.partsFound;
  return *this;
}
void AggrStats::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AggrStats(";
  out << "colStats=" << to_string(colStats);
  out << ", " << "partsFound=" << to_string(partsFound);
  out << ")";
}


SetPartitionsStatsRequest::~SetPartitionsStatsRequest() throw() {
}


void SetPartitionsStatsRequest::__set_colStats(const std::vector<ColumnStatistics> & val) {
  this->colStats = val;
}

void SetPartitionsStatsRequest::__set_needMerge(const bool val) {
  this->needMerge = val;
__isset.needMerge = true;
}

uint32_t SetPartitionsStatsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_colStats = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->colStats.clear();
            uint32_t _size329;
            ::apache::thrift::protocol::TType _etype332;
            xfer += iprot->readListBegin(_etype332, _size329);
            this->colStats.resize(_size329);
            uint32_t _i333;
            for (_i333 = 0; _i333 < _size329; ++_i333)
            {
              xfer += this->colStats[_i333].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_colStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->needMerge);
          this->__isset.needMerge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_colStats)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SetPartitionsStatsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SetPartitionsStatsRequest");

  xfer += oprot->writeFieldBegin("colStats", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->colStats.size()));
    std::vector<ColumnStatistics> ::const_iterator _iter334;
    for (_iter334 = this->colStats.begin(); _iter334 != this->colStats.end(); ++_iter334)
    {
      xfer += (*_iter334).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.needMerge) {
    xfer += oprot->writeFieldBegin("needMerge", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->needMerge);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetPartitionsStatsRequest &a, SetPartitionsStatsRequest &b) {
  using ::std::swap;
  swap(a.colStats, b.colStats);
  swap(a.needMerge, b.needMerge);
  swap(a.__isset, b.__isset);
}

SetPartitionsStatsRequest::SetPartitionsStatsRequest(const SetPartitionsStatsRequest& other335) {
  colStats = other335.colStats;
  needMerge = other335.needMerge;
  __isset = other335.__isset;
}
SetPartitionsStatsRequest& SetPartitionsStatsRequest::operator=(const SetPartitionsStatsRequest& other336) {
  colStats = other336.colStats;
  needMerge = other336.needMerge;
  __isset = other336.__isset;
  return *this;
}
void SetPartitionsStatsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SetPartitionsStatsRequest(";
  out << "colStats=" << to_string(colStats);
  out << ", " << "needMerge="; (__isset.needMerge ? (out << to_string(needMerge)) : (out << "<null>"));
  out << ")";
}


Schema::~Schema() throw() {
}


void Schema::__set_fieldSchemas(const std::vector<FieldSchema> & val) {
  this->fieldSchemas = val;
}

void Schema::__set_properties(const std::map<std::string, std::string> & val) {
  this->properties = val;
}

uint32_t Schema::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fieldSchemas.clear();
            uint32_t _size337;
            ::apache::thrift::protocol::TType _etype340;
            xfer += iprot->readListBegin(_etype340, _size337);
            this->fieldSchemas.resize(_size337);
            uint32_t _i341;
            for (_i341 = 0; _i341 < _size337; ++_i341)
            {
              xfer += this->fieldSchemas[_i341].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.fieldSchemas = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->properties.clear();
            uint32_t _size342;
            ::apache::thrift::protocol::TType _ktype343;
            ::apache::thrift::protocol::TType _vtype344;
            xfer += iprot->readMapBegin(_ktype343, _vtype344, _size342);
            uint32_t _i346;
            for (_i346 = 0; _i346 < _size342; ++_i346)
            {
              std::string _key347;
              xfer += iprot->readString(_key347);
              std::string& _val348 = this->properties[_key347];
              xfer += iprot->readString(_val348);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Schema::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Schema");

  xfer += oprot->writeFieldBegin("fieldSchemas", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fieldSchemas.size()));
    std::vector<FieldSchema> ::const_iterator _iter349;
    for (_iter349 = this->fieldSchemas.begin(); _iter349 != this->fieldSchemas.end(); ++_iter349)
    {
      xfer += (*_iter349).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->properties.size()));
    std::map<std::string, std::string> ::const_iterator _iter350;
    for (_iter350 = this->properties.begin(); _iter350 != this->properties.end(); ++_iter350)
    {
      xfer += oprot->writeString(_iter350->first);
      xfer += oprot->writeString(_iter350->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Schema &a, Schema &b) {
  using ::std::swap;
  swap(a.fieldSchemas, b.fieldSchemas);
  swap(a.properties, b.properties);
  swap(a.__isset, b.__isset);
}

Schema::Schema(const Schema& other351) {
  fieldSchemas = other351.fieldSchemas;
  properties = other351.properties;
  __isset = other351.__isset;
}
Schema& Schema::operator=(const Schema& other352) {
  fieldSchemas = other352.fieldSchemas;
  properties = other352.properties;
  __isset = other352.__isset;
  return *this;
}
void Schema::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Schema(";
  out << "fieldSchemas=" << to_string(fieldSchemas);
  out << ", " << "properties=" << to_string(properties);
  out << ")";
}


EnvironmentContext::~EnvironmentContext() throw() {
}


void EnvironmentContext::__set_properties(const std::map<std::string, std::string> & val) {
  this->properties = val;
}

uint32_t EnvironmentContext::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->properties.clear();
            uint32_t _size353;
            ::apache::thrift::protocol::TType _ktype354;
            ::apache::thrift::protocol::TType _vtype355;
            xfer += iprot->readMapBegin(_ktype354, _vtype355, _size353);
            uint32_t _i357;
            for (_i357 = 0; _i357 < _size353; ++_i357)
            {
              std::string _key358;
              xfer += iprot->readString(_key358);
              std::string& _val359 = this->properties[_key358];
              xfer += iprot->readString(_val359);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EnvironmentContext::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EnvironmentContext");

  xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->properties.size()));
    std::map<std::string, std::string> ::const_iterator _iter360;
    for (_iter360 = this->properties.begin(); _iter360 != this->properties.end(); ++_iter360)
    {
      xfer += oprot->writeString(_iter360->first);
      xfer += oprot->writeString(_iter360->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EnvironmentContext &a, EnvironmentContext &b) {
  using ::std::swap;
  swap(a.properties, b.properties);
  swap(a.__isset, b.__isset);
}

EnvironmentContext::EnvironmentContext(const EnvironmentContext& other361) {
  properties = other361.properties;
  __isset = other361.__isset;
}
EnvironmentContext& EnvironmentContext::operator=(const EnvironmentContext& other362) {
  properties = other362.properties;
  __isset = other362.__isset;
  return *this;
}
void EnvironmentContext::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EnvironmentContext(";
  out << "properties=" << to_string(properties);
  out << ")";
}


PrimaryKeysRequest::~PrimaryKeysRequest() throw() {
}


void PrimaryKeysRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void PrimaryKeysRequest::__set_tbl_name(const std::string& val) {
  this->tbl_name = val;
}

uint32_t PrimaryKeysRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_db_name = false;
  bool isset_tbl_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          isset_db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tbl_name);
          isset_tbl_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_db_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tbl_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PrimaryKeysRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PrimaryKeysRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tbl_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tbl_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PrimaryKeysRequest &a, PrimaryKeysRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.tbl_name, b.tbl_name);
}

PrimaryKeysRequest::PrimaryKeysRequest(const PrimaryKeysRequest& other363) {
  db_name = other363.db_name;
  tbl_name = other363.tbl_name;
}
PrimaryKeysRequest& PrimaryKeysRequest::operator=(const PrimaryKeysRequest& other364) {
  db_name = other364.db_name;
  tbl_name = other364.tbl_name;
  return *this;
}
void PrimaryKeysRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PrimaryKeysRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "tbl_name=" << to_string(tbl_name);
  out << ")";
}


PrimaryKeysResponse::~PrimaryKeysResponse() throw() {
}


void PrimaryKeysResponse::__set_primaryKeys(const std::vector<SQLPrimaryKey> & val) {
  this->primaryKeys = val;
}

uint32_t PrimaryKeysResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_primaryKeys = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->primaryKeys.clear();
            uint32_t _size365;
            ::apache::thrift::protocol::TType _etype368;
            xfer += iprot->readListBegin(_etype368, _size365);
            this->primaryKeys.resize(_size365);
            uint32_t _i369;
            for (_i369 = 0; _i369 < _size365; ++_i369)
            {
              xfer += this->primaryKeys[_i369].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_primaryKeys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_primaryKeys)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PrimaryKeysResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PrimaryKeysResponse");

  xfer += oprot->writeFieldBegin("primaryKeys", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->primaryKeys.size()));
    std::vector<SQLPrimaryKey> ::const_iterator _iter370;
    for (_iter370 = this->primaryKeys.begin(); _iter370 != this->primaryKeys.end(); ++_iter370)
    {
      xfer += (*_iter370).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PrimaryKeysResponse &a, PrimaryKeysResponse &b) {
  using ::std::swap;
  swap(a.primaryKeys, b.primaryKeys);
}

PrimaryKeysResponse::PrimaryKeysResponse(const PrimaryKeysResponse& other371) {
  primaryKeys = other371.primaryKeys;
}
PrimaryKeysResponse& PrimaryKeysResponse::operator=(const PrimaryKeysResponse& other372) {
  primaryKeys = other372.primaryKeys;
  return *this;
}
void PrimaryKeysResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PrimaryKeysResponse(";
  out << "primaryKeys=" << to_string(primaryKeys);
  out << ")";
}


ForeignKeysRequest::~ForeignKeysRequest() throw() {
}


void ForeignKeysRequest::__set_parent_db_name(const std::string& val) {
  this->parent_db_name = val;
}

void ForeignKeysRequest::__set_parent_tbl_name(const std::string& val) {
  this->parent_tbl_name = val;
}

void ForeignKeysRequest::__set_foreign_db_name(const std::string& val) {
  this->foreign_db_name = val;
}

void ForeignKeysRequest::__set_foreign_tbl_name(const std::string& val) {
  this->foreign_tbl_name = val;
}

uint32_t ForeignKeysRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->parent_db_name);
          this->__isset.parent_db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->parent_tbl_name);
          this->__isset.parent_tbl_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->foreign_db_name);
          this->__isset.foreign_db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->foreign_tbl_name);
          this->__isset.foreign_tbl_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ForeignKeysRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ForeignKeysRequest");

  xfer += oprot->writeFieldBegin("parent_db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->parent_db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parent_tbl_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->parent_tbl_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("foreign_db_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->foreign_db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("foreign_tbl_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->foreign_tbl_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ForeignKeysRequest &a, ForeignKeysRequest &b) {
  using ::std::swap;
  swap(a.parent_db_name, b.parent_db_name);
  swap(a.parent_tbl_name, b.parent_tbl_name);
  swap(a.foreign_db_name, b.foreign_db_name);
  swap(a.foreign_tbl_name, b.foreign_tbl_name);
  swap(a.__isset, b.__isset);
}

ForeignKeysRequest::ForeignKeysRequest(const ForeignKeysRequest& other373) {
  parent_db_name = other373.parent_db_name;
  parent_tbl_name = other373.parent_tbl_name;
  foreign_db_name = other373.foreign_db_name;
  foreign_tbl_name = other373.foreign_tbl_name;
  __isset = other373.__isset;
}
ForeignKeysRequest& ForeignKeysRequest::operator=(const ForeignKeysRequest& other374) {
  parent_db_name = other374.parent_db_name;
  parent_tbl_name = other374.parent_tbl_name;
  foreign_db_name = other374.foreign_db_name;
  foreign_tbl_name = other374.foreign_tbl_name;
  __isset = other374.__isset;
  return *this;
}
void ForeignKeysRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ForeignKeysRequest(";
  out << "parent_db_name=" << to_string(parent_db_name);
  out << ", " << "parent_tbl_name=" << to_string(parent_tbl_name);
  out << ", " << "foreign_db_name=" << to_string(foreign_db_name);
  out << ", " << "foreign_tbl_name=" << to_string(foreign_tbl_name);
  out << ")";
}


ForeignKeysResponse::~ForeignKeysResponse() throw() {
}


void ForeignKeysResponse::__set_foreignKeys(const std::vector<SQLForeignKey> & val) {
  this->foreignKeys = val;
}

uint32_t ForeignKeysResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_foreignKeys = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->foreignKeys.clear();
            uint32_t _size375;
            ::apache::thrift::protocol::TType _etype378;
            xfer += iprot->readListBegin(_etype378, _size375);
            this->foreignKeys.resize(_size375);
            uint32_t _i379;
            for (_i379 = 0; _i379 < _size375; ++_i379)
            {
              xfer += this->foreignKeys[_i379].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_foreignKeys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_foreignKeys)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ForeignKeysResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ForeignKeysResponse");

  xfer += oprot->writeFieldBegin("foreignKeys", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->foreignKeys.size()));
    std::vector<SQLForeignKey> ::const_iterator _iter380;
    for (_iter380 = this->foreignKeys.begin(); _iter380 != this->foreignKeys.end(); ++_iter380)
    {
      xfer += (*_iter380).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ForeignKeysResponse &a, ForeignKeysResponse &b) {
  using ::std::swap;
  swap(a.foreignKeys, b.foreignKeys);
}

ForeignKeysResponse::ForeignKeysResponse(const ForeignKeysResponse& other381) {
  foreignKeys = other381.foreignKeys;
}
ForeignKeysResponse& ForeignKeysResponse::operator=(const ForeignKeysResponse& other382) {
  foreignKeys = other382.foreignKeys;
  return *this;
}
void ForeignKeysResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ForeignKeysResponse(";
  out << "foreignKeys=" << to_string(foreignKeys);
  out << ")";
}


UniqueConstraintsRequest::~UniqueConstraintsRequest() throw() {
}


void UniqueConstraintsRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void UniqueConstraintsRequest::__set_tbl_name(const std::string& val) {
  this->tbl_name = val;
}

uint32_t UniqueConstraintsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_db_name = false;
  bool isset_tbl_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          isset_db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tbl_name);
          isset_tbl_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_db_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tbl_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UniqueConstraintsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UniqueConstraintsRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tbl_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tbl_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UniqueConstraintsRequest &a, UniqueConstraintsRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.tbl_name, b.tbl_name);
}

UniqueConstraintsRequest::UniqueConstraintsRequest(const UniqueConstraintsRequest& other383) {
  db_name = other383.db_name;
  tbl_name = other383.tbl_name;
}
UniqueConstraintsRequest& UniqueConstraintsRequest::operator=(const UniqueConstraintsRequest& other384) {
  db_name = other384.db_name;
  tbl_name = other384.tbl_name;
  return *this;
}
void UniqueConstraintsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UniqueConstraintsRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "tbl_name=" << to_string(tbl_name);
  out << ")";
}


UniqueConstraintsResponse::~UniqueConstraintsResponse() throw() {
}


void UniqueConstraintsResponse::__set_uniqueConstraints(const std::vector<SQLUniqueConstraint> & val) {
  this->uniqueConstraints = val;
}

uint32_t UniqueConstraintsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_uniqueConstraints = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->uniqueConstraints.clear();
            uint32_t _size385;
            ::apache::thrift::protocol::TType _etype388;
            xfer += iprot->readListBegin(_etype388, _size385);
            this->uniqueConstraints.resize(_size385);
            uint32_t _i389;
            for (_i389 = 0; _i389 < _size385; ++_i389)
            {
              xfer += this->uniqueConstraints[_i389].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_uniqueConstraints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_uniqueConstraints)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UniqueConstraintsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UniqueConstraintsResponse");

  xfer += oprot->writeFieldBegin("uniqueConstraints", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->uniqueConstraints.size()));
    std::vector<SQLUniqueConstraint> ::const_iterator _iter390;
    for (_iter390 = this->uniqueConstraints.begin(); _iter390 != this->uniqueConstraints.end(); ++_iter390)
    {
      xfer += (*_iter390).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UniqueConstraintsResponse &a, UniqueConstraintsResponse &b) {
  using ::std::swap;
  swap(a.uniqueConstraints, b.uniqueConstraints);
}

UniqueConstraintsResponse::UniqueConstraintsResponse(const UniqueConstraintsResponse& other391) {
  uniqueConstraints = other391.uniqueConstraints;
}
UniqueConstraintsResponse& UniqueConstraintsResponse::operator=(const UniqueConstraintsResponse& other392) {
  uniqueConstraints = other392.uniqueConstraints;
  return *this;
}
void UniqueConstraintsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UniqueConstraintsResponse(";
  out << "uniqueConstraints=" << to_string(uniqueConstraints);
  out << ")";
}


NotNullConstraintsRequest::~NotNullConstraintsRequest() throw() {
}


void NotNullConstraintsRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void NotNullConstraintsRequest::__set_tbl_name(const std::string& val) {
  this->tbl_name = val;
}

uint32_t NotNullConstraintsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_db_name = false;
  bool isset_tbl_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          isset_db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tbl_name);
          isset_tbl_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_db_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tbl_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NotNullConstraintsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotNullConstraintsRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tbl_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tbl_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotNullConstraintsRequest &a, NotNullConstraintsRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.tbl_name, b.tbl_name);
}

NotNullConstraintsRequest::NotNullConstraintsRequest(const NotNullConstraintsRequest& other393) {
  db_name = other393.db_name;
  tbl_name = other393.tbl_name;
}
NotNullConstraintsRequest& NotNullConstraintsRequest::operator=(const NotNullConstraintsRequest& other394) {
  db_name = other394.db_name;
  tbl_name = other394.tbl_name;
  return *this;
}
void NotNullConstraintsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotNullConstraintsRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "tbl_name=" << to_string(tbl_name);
  out << ")";
}


NotNullConstraintsResponse::~NotNullConstraintsResponse() throw() {
}


void NotNullConstraintsResponse::__set_notNullConstraints(const std::vector<SQLNotNullConstraint> & val) {
  this->notNullConstraints = val;
}

uint32_t NotNullConstraintsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_notNullConstraints = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->notNullConstraints.clear();
            uint32_t _size395;
            ::apache::thrift::protocol::TType _etype398;
            xfer += iprot->readListBegin(_etype398, _size395);
            this->notNullConstraints.resize(_size395);
            uint32_t _i399;
            for (_i399 = 0; _i399 < _size395; ++_i399)
            {
              xfer += this->notNullConstraints[_i399].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_notNullConstraints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_notNullConstraints)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NotNullConstraintsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotNullConstraintsResponse");

  xfer += oprot->writeFieldBegin("notNullConstraints", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->notNullConstraints.size()));
    std::vector<SQLNotNullConstraint> ::const_iterator _iter400;
    for (_iter400 = this->notNullConstraints.begin(); _iter400 != this->notNullConstraints.end(); ++_iter400)
    {
      xfer += (*_iter400).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotNullConstraintsResponse &a, NotNullConstraintsResponse &b) {
  using ::std::swap;
  swap(a.notNullConstraints, b.notNullConstraints);
}

NotNullConstraintsResponse::NotNullConstraintsResponse(const NotNullConstraintsResponse& other401) {
  notNullConstraints = other401.notNullConstraints;
}
NotNullConstraintsResponse& NotNullConstraintsResponse::operator=(const NotNullConstraintsResponse& other402) {
  notNullConstraints = other402.notNullConstraints;
  return *this;
}
void NotNullConstraintsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotNullConstraintsResponse(";
  out << "notNullConstraints=" << to_string(notNullConstraints);
  out << ")";
}


DefaultConstraintsRequest::~DefaultConstraintsRequest() throw() {
}


void DefaultConstraintsRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void DefaultConstraintsRequest::__set_tbl_name(const std::string& val) {
  this->tbl_name = val;
}

uint32_t DefaultConstraintsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_db_name = false;
  bool isset_tbl_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          isset_db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tbl_name);
          isset_tbl_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_db_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tbl_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DefaultConstraintsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DefaultConstraintsRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tbl_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tbl_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DefaultConstraintsRequest &a, DefaultConstraintsRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.tbl_name, b.tbl_name);
}

DefaultConstraintsRequest::DefaultConstraintsRequest(const DefaultConstraintsRequest& other403) {
  db_name = other403.db_name;
  tbl_name = other403.tbl_name;
}
DefaultConstraintsRequest& DefaultConstraintsRequest::operator=(const DefaultConstraintsRequest& other404) {
  db_name = other404.db_name;
  tbl_name = other404.tbl_name;
  return *this;
}
void DefaultConstraintsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DefaultConstraintsRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "tbl_name=" << to_string(tbl_name);
  out << ")";
}


DefaultConstraintsResponse::~DefaultConstraintsResponse() throw() {
}


void DefaultConstraintsResponse::__set_defaultConstraints(const std::vector<SQLDefaultConstraint> & val) {
  this->defaultConstraints = val;
}

uint32_t DefaultConstraintsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_defaultConstraints = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->defaultConstraints.clear();
            uint32_t _size405;
            ::apache::thrift::protocol::TType _etype408;
            xfer += iprot->readListBegin(_etype408, _size405);
            this->defaultConstraints.resize(_size405);
            uint32_t _i409;
            for (_i409 = 0; _i409 < _size405; ++_i409)
            {
              xfer += this->defaultConstraints[_i409].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_defaultConstraints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_defaultConstraints)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DefaultConstraintsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DefaultConstraintsResponse");

  xfer += oprot->writeFieldBegin("defaultConstraints", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->defaultConstraints.size()));
    std::vector<SQLDefaultConstraint> ::const_iterator _iter410;
    for (_iter410 = this->defaultConstraints.begin(); _iter410 != this->defaultConstraints.end(); ++_iter410)
    {
      xfer += (*_iter410).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DefaultConstraintsResponse &a, DefaultConstraintsResponse &b) {
  using ::std::swap;
  swap(a.defaultConstraints, b.defaultConstraints);
}

DefaultConstraintsResponse::DefaultConstraintsResponse(const DefaultConstraintsResponse& other411) {
  defaultConstraints = other411.defaultConstraints;
}
DefaultConstraintsResponse& DefaultConstraintsResponse::operator=(const DefaultConstraintsResponse& other412) {
  defaultConstraints = other412.defaultConstraints;
  return *this;
}
void DefaultConstraintsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DefaultConstraintsResponse(";
  out << "defaultConstraints=" << to_string(defaultConstraints);
  out << ")";
}


DropConstraintRequest::~DropConstraintRequest() throw() {
}


void DropConstraintRequest::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void DropConstraintRequest::__set_tablename(const std::string& val) {
  this->tablename = val;
}

void DropConstraintRequest::__set_constraintname(const std::string& val) {
  this->constraintname = val;
}

uint32_t DropConstraintRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbname = false;
  bool isset_tablename = false;
  bool isset_constraintname = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbname);
          isset_dbname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tablename);
          isset_tablename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->constraintname);
          isset_constraintname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tablename)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_constraintname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DropConstraintRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DropConstraintRequest");

  xfer += oprot->writeFieldBegin("dbname", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tablename", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tablename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("constraintname", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->constraintname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DropConstraintRequest &a, DropConstraintRequest &b) {
  using ::std::swap;
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.constraintname, b.constraintname);
}

DropConstraintRequest::DropConstraintRequest(const DropConstraintRequest& other413) {
  dbname = other413.dbname;
  tablename = other413.tablename;
  constraintname = other413.constraintname;
}
DropConstraintRequest& DropConstraintRequest::operator=(const DropConstraintRequest& other414) {
  dbname = other414.dbname;
  tablename = other414.tablename;
  constraintname = other414.constraintname;
  return *this;
}
void DropConstraintRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropConstraintRequest(";
  out << "dbname=" << to_string(dbname);
  out << ", " << "tablename=" << to_string(tablename);
  out << ", " << "constraintname=" << to_string(constraintname);
  out << ")";
}


AddPrimaryKeyRequest::~AddPrimaryKeyRequest() throw() {
}


void AddPrimaryKeyRequest::__set_primaryKeyCols(const std::vector<SQLPrimaryKey> & val) {
  this->primaryKeyCols = val;
}

uint32_t AddPrimaryKeyRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_primaryKeyCols = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->primaryKeyCols.clear();
            uint32_t _size415;
            ::apache::thrift::protocol::TType _etype418;
            xfer += iprot->readListBegin(_etype418, _size415);
            this->primaryKeyCols.resize(_size415);
            uint32_t _i419;
            for (_i419 = 0; _i419 < _size415; ++_i419)
            {
              xfer += this->primaryKeyCols[_i419].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_primaryKeyCols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_primaryKeyCols)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddPrimaryKeyRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddPrimaryKeyRequest");

  xfer += oprot->writeFieldBegin("primaryKeyCols", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->primaryKeyCols.size()));
    std::vector<SQLPrimaryKey> ::const_iterator _iter420;
    for (_iter420 = this->primaryKeyCols.begin(); _iter420 != this->primaryKeyCols.end(); ++_iter420)
    {
      xfer += (*_iter420).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddPrimaryKeyRequest &a, AddPrimaryKeyRequest &b) {
  using ::std::swap;
  swap(a.primaryKeyCols, b.primaryKeyCols);
}

AddPrimaryKeyRequest::AddPrimaryKeyRequest(const AddPrimaryKeyRequest& other421) {
  primaryKeyCols = other421.primaryKeyCols;
}
AddPrimaryKeyRequest& AddPrimaryKeyRequest::operator=(const AddPrimaryKeyRequest& other422) {
  primaryKeyCols = other422.primaryKeyCols;
  return *this;
}
void AddPrimaryKeyRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddPrimaryKeyRequest(";
  out << "primaryKeyCols=" << to_string(primaryKeyCols);
  out << ")";
}


AddForeignKeyRequest::~AddForeignKeyRequest() throw() {
}


void AddForeignKeyRequest::__set_foreignKeyCols(const std::vector<SQLForeignKey> & val) {
  this->foreignKeyCols = val;
}

uint32_t AddForeignKeyRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_foreignKeyCols = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->foreignKeyCols.clear();
            uint32_t _size423;
            ::apache::thrift::protocol::TType _etype426;
            xfer += iprot->readListBegin(_etype426, _size423);
            this->foreignKeyCols.resize(_size423);
            uint32_t _i427;
            for (_i427 = 0; _i427 < _size423; ++_i427)
            {
              xfer += this->foreignKeyCols[_i427].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_foreignKeyCols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_foreignKeyCols)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddForeignKeyRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddForeignKeyRequest");

  xfer += oprot->writeFieldBegin("foreignKeyCols", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->foreignKeyCols.size()));
    std::vector<SQLForeignKey> ::const_iterator _iter428;
    for (_iter428 = this->foreignKeyCols.begin(); _iter428 != this->foreignKeyCols.end(); ++_iter428)
    {
      xfer += (*_iter428).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddForeignKeyRequest &a, AddForeignKeyRequest &b) {
  using ::std::swap;
  swap(a.foreignKeyCols, b.foreignKeyCols);
}

AddForeignKeyRequest::AddForeignKeyRequest(const AddForeignKeyRequest& other429) {
  foreignKeyCols = other429.foreignKeyCols;
}
AddForeignKeyRequest& AddForeignKeyRequest::operator=(const AddForeignKeyRequest& other430) {
  foreignKeyCols = other430.foreignKeyCols;
  return *this;
}
void AddForeignKeyRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddForeignKeyRequest(";
  out << "foreignKeyCols=" << to_string(foreignKeyCols);
  out << ")";
}


AddUniqueConstraintRequest::~AddUniqueConstraintRequest() throw() {
}


void AddUniqueConstraintRequest::__set_uniqueConstraintCols(const std::vector<SQLUniqueConstraint> & val) {
  this->uniqueConstraintCols = val;
}

uint32_t AddUniqueConstraintRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_uniqueConstraintCols = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->uniqueConstraintCols.clear();
            uint32_t _size431;
            ::apache::thrift::protocol::TType _etype434;
            xfer += iprot->readListBegin(_etype434, _size431);
            this->uniqueConstraintCols.resize(_size431);
            uint32_t _i435;
            for (_i435 = 0; _i435 < _size431; ++_i435)
            {
              xfer += this->uniqueConstraintCols[_i435].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_uniqueConstraintCols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_uniqueConstraintCols)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddUniqueConstraintRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddUniqueConstraintRequest");

  xfer += oprot->writeFieldBegin("uniqueConstraintCols", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->uniqueConstraintCols.size()));
    std::vector<SQLUniqueConstraint> ::const_iterator _iter436;
    for (_iter436 = this->uniqueConstraintCols.begin(); _iter436 != this->uniqueConstraintCols.end(); ++_iter436)
    {
      xfer += (*_iter436).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddUniqueConstraintRequest &a, AddUniqueConstraintRequest &b) {
  using ::std::swap;
  swap(a.uniqueConstraintCols, b.uniqueConstraintCols);
}

AddUniqueConstraintRequest::AddUniqueConstraintRequest(const AddUniqueConstraintRequest& other437) {
  uniqueConstraintCols = other437.uniqueConstraintCols;
}
AddUniqueConstraintRequest& AddUniqueConstraintRequest::operator=(const AddUniqueConstraintRequest& other438) {
  uniqueConstraintCols = other438.uniqueConstraintCols;
  return *this;
}
void AddUniqueConstraintRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddUniqueConstraintRequest(";
  out << "uniqueConstraintCols=" << to_string(uniqueConstraintCols);
  out << ")";
}


AddNotNullConstraintRequest::~AddNotNullConstraintRequest() throw() {
}


void AddNotNullConstraintRequest::__set_notNullConstraintCols(const std::vector<SQLNotNullConstraint> & val) {
  this->notNullConstraintCols = val;
}

uint32_t AddNotNullConstraintRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_notNullConstraintCols = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->notNullConstraintCols.clear();
            uint32_t _size439;
            ::apache::thrift::protocol::TType _etype442;
            xfer += iprot->readListBegin(_etype442, _size439);
            this->notNullConstraintCols.resize(_size439);
            uint32_t _i443;
            for (_i443 = 0; _i443 < _size439; ++_i443)
            {
              xfer += this->notNullConstraintCols[_i443].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_notNullConstraintCols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_notNullConstraintCols)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddNotNullConstraintRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddNotNullConstraintRequest");

  xfer += oprot->writeFieldBegin("notNullConstraintCols", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->notNullConstraintCols.size()));
    std::vector<SQLNotNullConstraint> ::const_iterator _iter444;
    for (_iter444 = this->notNullConstraintCols.begin(); _iter444 != this->notNullConstraintCols.end(); ++_iter444)
    {
      xfer += (*_iter444).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddNotNullConstraintRequest &a, AddNotNullConstraintRequest &b) {
  using ::std::swap;
  swap(a.notNullConstraintCols, b.notNullConstraintCols);
}

AddNotNullConstraintRequest::AddNotNullConstraintRequest(const AddNotNullConstraintRequest& other445) {
  notNullConstraintCols = other445.notNullConstraintCols;
}
AddNotNullConstraintRequest& AddNotNullConstraintRequest::operator=(const AddNotNullConstraintRequest& other446) {
  notNullConstraintCols = other446.notNullConstraintCols;
  return *this;
}
void AddNotNullConstraintRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddNotNullConstraintRequest(";
  out << "notNullConstraintCols=" << to_string(notNullConstraintCols);
  out << ")";
}


AddDefaultConstraintRequest::~AddDefaultConstraintRequest() throw() {
}


void AddDefaultConstraintRequest::__set_defaultConstraintCols(const std::vector<SQLDefaultConstraint> & val) {
  this->defaultConstraintCols = val;
}

uint32_t AddDefaultConstraintRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_defaultConstraintCols = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->defaultConstraintCols.clear();
            uint32_t _size447;
            ::apache::thrift::protocol::TType _etype450;
            xfer += iprot->readListBegin(_etype450, _size447);
            this->defaultConstraintCols.resize(_size447);
            uint32_t _i451;
            for (_i451 = 0; _i451 < _size447; ++_i451)
            {
              xfer += this->defaultConstraintCols[_i451].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_defaultConstraintCols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_defaultConstraintCols)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddDefaultConstraintRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddDefaultConstraintRequest");

  xfer += oprot->writeFieldBegin("defaultConstraintCols", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->defaultConstraintCols.size()));
    std::vector<SQLDefaultConstraint> ::const_iterator _iter452;
    for (_iter452 = this->defaultConstraintCols.begin(); _iter452 != this->defaultConstraintCols.end(); ++_iter452)
    {
      xfer += (*_iter452).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddDefaultConstraintRequest &a, AddDefaultConstraintRequest &b) {
  using ::std::swap;
  swap(a.defaultConstraintCols, b.defaultConstraintCols);
}

AddDefaultConstraintRequest::AddDefaultConstraintRequest(const AddDefaultConstraintRequest& other453) {
  defaultConstraintCols = other453.defaultConstraintCols;
}
AddDefaultConstraintRequest& AddDefaultConstraintRequest::operator=(const AddDefaultConstraintRequest& other454) {
  defaultConstraintCols = other454.defaultConstraintCols;
  return *this;
}
void AddDefaultConstraintRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddDefaultConstraintRequest(";
  out << "defaultConstraintCols=" << to_string(defaultConstraintCols);
  out << ")";
}


PartitionsByExprResult::~PartitionsByExprResult() throw() {
}


void PartitionsByExprResult::__set_partitions(const std::vector<Partition> & val) {
  this->partitions = val;
}

void PartitionsByExprResult::__set_hasUnknownPartitions(const bool val) {
  this->hasUnknownPartitions = val;
}

uint32_t PartitionsByExprResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_partitions = false;
  bool isset_hasUnknownPartitions = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitions.clear();
            uint32_t _size455;
            ::apache::thrift::protocol::TType _etype458;
            xfer += iprot->readListBegin(_etype458, _size455);
            this->partitions.resize(_size455);
            uint32_t _i459;
            for (_i459 = 0; _i459 < _size455; ++_i459)
            {
              xfer += this->partitions[_i459].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_partitions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasUnknownPartitions);
          isset_hasUnknownPartitions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_partitions)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hasUnknownPartitions)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PartitionsByExprResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionsByExprResult");

  xfer += oprot->writeFieldBegin("partitions", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitions.size()));
    std::vector<Partition> ::const_iterator _iter460;
    for (_iter460 = this->partitions.begin(); _iter460 != this->partitions.end(); ++_iter460)
    {
      xfer += (*_iter460).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasUnknownPartitions", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->hasUnknownPartitions);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionsByExprResult &a, PartitionsByExprResult &b) {
  using ::std::swap;
  swap(a.partitions, b.partitions);
  swap(a.hasUnknownPartitions, b.hasUnknownPartitions);
}

PartitionsByExprResult::PartitionsByExprResult(const PartitionsByExprResult& other461) {
  partitions = other461.partitions;
  hasUnknownPartitions = other461.hasUnknownPartitions;
}
PartitionsByExprResult& PartitionsByExprResult::operator=(const PartitionsByExprResult& other462) {
  partitions = other462.partitions;
  hasUnknownPartitions = other462.hasUnknownPartitions;
  return *this;
}
void PartitionsByExprResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionsByExprResult(";
  out << "partitions=" << to_string(partitions);
  out << ", " << "hasUnknownPartitions=" << to_string(hasUnknownPartitions);
  out << ")";
}


PartitionsByExprRequest::~PartitionsByExprRequest() throw() {
}


void PartitionsByExprRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void PartitionsByExprRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void PartitionsByExprRequest::__set_expr(const std::string& val) {
  this->expr = val;
}

void PartitionsByExprRequest::__set_defaultPartitionName(const std::string& val) {
  this->defaultPartitionName = val;
__isset.defaultPartitionName = true;
}

void PartitionsByExprRequest::__set_maxParts(const int16_t val) {
  this->maxParts = val;
__isset.maxParts = true;
}

uint32_t PartitionsByExprRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;
  bool isset_tblName = false;
  bool isset_expr = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tblName);
          isset_tblName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->expr);
          isset_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->defaultPartitionName);
          this->__isset.defaultPartitionName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->maxParts);
          this->__isset.maxParts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tblName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_expr)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PartitionsByExprRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionsByExprRequest");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tblName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tblName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expr", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->expr);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.defaultPartitionName) {
    xfer += oprot->writeFieldBegin("defaultPartitionName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->defaultPartitionName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxParts) {
    xfer += oprot->writeFieldBegin("maxParts", ::apache::thrift::protocol::T_I16, 5);
    xfer += oprot->writeI16(this->maxParts);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionsByExprRequest &a, PartitionsByExprRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.expr, b.expr);
  swap(a.defaultPartitionName, b.defaultPartitionName);
  swap(a.maxParts, b.maxParts);
  swap(a.__isset, b.__isset);
}

PartitionsByExprRequest::PartitionsByExprRequest(const PartitionsByExprRequest& other463) {
  dbName = other463.dbName;
  tblName = other463.tblName;
  expr = other463.expr;
  defaultPartitionName = other463.defaultPartitionName;
  maxParts = other463.maxParts;
  __isset = other463.__isset;
}
PartitionsByExprRequest& PartitionsByExprRequest::operator=(const PartitionsByExprRequest& other464) {
  dbName = other464.dbName;
  tblName = other464.tblName;
  expr = other464.expr;
  defaultPartitionName = other464.defaultPartitionName;
  maxParts = other464.maxParts;
  __isset = other464.__isset;
  return *this;
}
void PartitionsByExprRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionsByExprRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "expr=" << to_string(expr);
  out << ", " << "defaultPartitionName="; (__isset.defaultPartitionName ? (out << to_string(defaultPartitionName)) : (out << "<null>"));
  out << ", " << "maxParts="; (__isset.maxParts ? (out << to_string(maxParts)) : (out << "<null>"));
  out << ")";
}


TableStatsResult::~TableStatsResult() throw() {
}


void TableStatsResult::__set_tableStats(const std::vector<ColumnStatisticsObj> & val) {
  this->tableStats = val;
}

uint32_t TableStatsResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tableStats = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tableStats.clear();
            uint32_t _size465;
            ::apache::thrift::protocol::TType _etype468;
            xfer += iprot->readListBegin(_etype468, _size465);
            this->tableStats.resize(_size465);
            uint32_t _i469;
            for (_i469 = 0; _i469 < _size465; ++_i469)
            {
              xfer += this->tableStats[_i469].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_tableStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tableStats)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TableStatsResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TableStatsResult");

  xfer += oprot->writeFieldBegin("tableStats", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tableStats.size()));
    std::vector<ColumnStatisticsObj> ::const_iterator _iter470;
    for (_iter470 = this->tableStats.begin(); _iter470 != this->tableStats.end(); ++_iter470)
    {
      xfer += (*_iter470).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TableStatsResult &a, TableStatsResult &b) {
  using ::std::swap;
  swap(a.tableStats, b.tableStats);
}

TableStatsResult::TableStatsResult(const TableStatsResult& other471) {
  tableStats = other471.tableStats;
}
TableStatsResult& TableStatsResult::operator=(const TableStatsResult& other472) {
  tableStats = other472.tableStats;
  return *this;
}
void TableStatsResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TableStatsResult(";
  out << "tableStats=" << to_string(tableStats);
  out << ")";
}


PartitionsStatsResult::~PartitionsStatsResult() throw() {
}


void PartitionsStatsResult::__set_partStats(const std::map<std::string, std::vector<ColumnStatisticsObj> > & val) {
  this->partStats = val;
}

uint32_t PartitionsStatsResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_partStats = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->partStats.clear();
            uint32_t _size473;
            ::apache::thrift::protocol::TType _ktype474;
            ::apache::thrift::protocol::TType _vtype475;
            xfer += iprot->readMapBegin(_ktype474, _vtype475, _size473);
            uint32_t _i477;
            for (_i477 = 0; _i477 < _size473; ++_i477)
            {
              std::string _key478;
              xfer += iprot->readString(_key478);
              std::vector<ColumnStatisticsObj> & _val479 = this->partStats[_key478];
              {
                _val479.clear();
                uint32_t _size480;
                ::apache::thrift::protocol::TType _etype483;
                xfer += iprot->readListBegin(_etype483, _size480);
                _val479.resize(_size480);
                uint32_t _i484;
                for (_i484 = 0; _i484 < _size480; ++_i484)
                {
                  xfer += _val479[_i484].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          isset_partStats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_partStats)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PartitionsStatsResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionsStatsResult");

  xfer += oprot->writeFieldBegin("partStats", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->partStats.size()));
    std::map<std::string, std::vector<ColumnStatisticsObj> > ::const_iterator _iter485;
    for (_iter485 = this->partStats.begin(); _iter485 != this->partStats.end(); ++_iter485)
    {
      xfer += oprot->writeString(_iter485->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter485->second.size()));
        std::vector<ColumnStatisticsObj> ::const_iterator _iter486;
        for (_iter486 = _iter485->second.begin(); _iter486 != _iter485->second.end(); ++_iter486)
        {
          xfer += (*_iter486).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionsStatsResult &a, PartitionsStatsResult &b) {
  using ::std::swap;
  swap(a.partStats, b.partStats);
}

PartitionsStatsResult::PartitionsStatsResult(const PartitionsStatsResult& other487) {
  partStats = other487.partStats;
}
PartitionsStatsResult& PartitionsStatsResult::operator=(const PartitionsStatsResult& other488) {
  partStats = other488.partStats;
  return *this;
}
void PartitionsStatsResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionsStatsResult(";
  out << "partStats=" << to_string(partStats);
  out << ")";
}


TableStatsRequest::~TableStatsRequest() throw() {
}


void TableStatsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void TableStatsRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void TableStatsRequest::__set_colNames(const std::vector<std::string> & val) {
  this->colNames = val;
}

uint32_t TableStatsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;
  bool isset_tblName = false;
  bool isset_colNames = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tblName);
          isset_tblName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->colNames.clear();
            uint32_t _size489;
            ::apache::thrift::protocol::TType _etype492;
            xfer += iprot->readListBegin(_etype492, _size489);
            this->colNames.resize(_size489);
            uint32_t _i493;
            for (_i493 = 0; _i493 < _size489; ++_i493)
            {
              xfer += iprot->readString(this->colNames[_i493]);
            }
            xfer += iprot->readListEnd();
          }
          isset_colNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tblName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_colNames)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TableStatsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TableStatsRequest");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tblName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tblName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("colNames", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->colNames.size()));
    std::vector<std::string> ::const_iterator _iter494;
    for (_iter494 = this->colNames.begin(); _iter494 != this->colNames.end(); ++_iter494)
    {
      xfer += oprot->writeString((*_iter494));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TableStatsRequest &a, TableStatsRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.colNames, b.colNames);
}

TableStatsRequest::TableStatsRequest(const TableStatsRequest& other495) {
  dbName = other495.dbName;
  tblName = other495.tblName;
  colNames = other495.colNames;
}
TableStatsRequest& TableStatsRequest::operator=(const TableStatsRequest& other496) {
  dbName = other496.dbName;
  tblName = other496.tblName;
  colNames = other496.colNames;
  return *this;
}
void TableStatsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TableStatsRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "colNames=" << to_string(colNames);
  out << ")";
}


PartitionsStatsRequest::~PartitionsStatsRequest() throw() {
}


void PartitionsStatsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void PartitionsStatsRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void PartitionsStatsRequest::__set_colNames(const std::vector<std::string> & val) {
  this->colNames = val;
}

void PartitionsStatsRequest::__set_partNames(const std::vector<std::string> & val) {
  this->partNames = val;
}

uint32_t PartitionsStatsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;
  bool isset_tblName = false;
  bool isset_colNames = false;
  bool isset_partNames = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tblName);
          isset_tblName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->colNames.clear();
            uint32_t _size497;
            ::apache::thrift::protocol::TType _etype500;
            xfer += iprot->readListBegin(_etype500, _size497);
            this->colNames.resize(_size497);
            uint32_t _i501;
            for (_i501 = 0; _i501 < _size497; ++_i501)
            {
              xfer += iprot->readString(this->colNames[_i501]);
            }
            xfer += iprot->readListEnd();
          }
          isset_colNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partNames.clear();
            uint32_t _size502;
            ::apache::thrift::protocol::TType _etype505;
            xfer += iprot->readListBegin(_etype505, _size502);
            this->partNames.resize(_size502);
            uint32_t _i506;
            for (_i506 = 0; _i506 < _size502; ++_i506)
            {
              xfer += iprot->readString(this->partNames[_i506]);
            }
            xfer += iprot->readListEnd();
          }
          isset_partNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tblName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_colNames)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_partNames)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PartitionsStatsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionsStatsRequest");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tblName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tblName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("colNames", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->colNames.size()));
    std::vector<std::string> ::const_iterator _iter507;
    for (_iter507 = this->colNames.begin(); _iter507 != this->colNames.end(); ++_iter507)
    {
      xfer += oprot->writeString((*_iter507));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partNames", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->partNames.size()));
    std::vector<std::string> ::const_iterator _iter508;
    for (_iter508 = this->partNames.begin(); _iter508 != this->partNames.end(); ++_iter508)
    {
      xfer += oprot->writeString((*_iter508));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionsStatsRequest &a, PartitionsStatsRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.colNames, b.colNames);
  swap(a.partNames, b.partNames);
}

PartitionsStatsRequest::PartitionsStatsRequest(const PartitionsStatsRequest& other509) {
  dbName = other509.dbName;
  tblName = other509.tblName;
  colNames = other509.colNames;
  partNames = other509.partNames;
}
PartitionsStatsRequest& PartitionsStatsRequest::operator=(const PartitionsStatsRequest& other510) {
  dbName = other510.dbName;
  tblName = other510.tblName;
  colNames = other510.colNames;
  partNames = other510.partNames;
  return *this;
}
void PartitionsStatsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionsStatsRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "colNames=" << to_string(colNames);
  out << ", " << "partNames=" << to_string(partNames);
  out << ")";
}


AddPartitionsResult::~AddPartitionsResult() throw() {
}


void AddPartitionsResult::__set_partitions(const std::vector<Partition> & val) {
  this->partitions = val;
__isset.partitions = true;
}

uint32_t AddPartitionsResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitions.clear();
            uint32_t _size511;
            ::apache::thrift::protocol::TType _etype514;
            xfer += iprot->readListBegin(_etype514, _size511);
            this->partitions.resize(_size511);
            uint32_t _i515;
            for (_i515 = 0; _i515 < _size511; ++_i515)
            {
              xfer += this->partitions[_i515].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partitions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AddPartitionsResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddPartitionsResult");

  if (this->__isset.partitions) {
    xfer += oprot->writeFieldBegin("partitions", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitions.size()));
      std::vector<Partition> ::const_iterator _iter516;
      for (_iter516 = this->partitions.begin(); _iter516 != this->partitions.end(); ++_iter516)
      {
        xfer += (*_iter516).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddPartitionsResult &a, AddPartitionsResult &b) {
  using ::std::swap;
  swap(a.partitions, b.partitions);
  swap(a.__isset, b.__isset);
}

AddPartitionsResult::AddPartitionsResult(const AddPartitionsResult& other517) {
  partitions = other517.partitions;
  __isset = other517.__isset;
}
AddPartitionsResult& AddPartitionsResult::operator=(const AddPartitionsResult& other518) {
  partitions = other518.partitions;
  __isset = other518.__isset;
  return *this;
}
void AddPartitionsResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddPartitionsResult(";
  out << "partitions="; (__isset.partitions ? (out << to_string(partitions)) : (out << "<null>"));
  out << ")";
}


AddPartitionsRequest::~AddPartitionsRequest() throw() {
}


void AddPartitionsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void AddPartitionsRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void AddPartitionsRequest::__set_parts(const std::vector<Partition> & val) {
  this->parts = val;
}

void AddPartitionsRequest::__set_ifNotExists(const bool val) {
  this->ifNotExists = val;
}

void AddPartitionsRequest::__set_needResult(const bool val) {
  this->needResult = val;
__isset.needResult = true;
}

uint32_t AddPartitionsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;
  bool isset_tblName = false;
  bool isset_parts = false;
  bool isset_ifNotExists = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tblName);
          isset_tblName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->parts.clear();
            uint32_t _size519;
            ::apache::thrift::protocol::TType _etype522;
            xfer += iprot->readListBegin(_etype522, _size519);
            this->parts.resize(_size519);
            uint32_t _i523;
            for (_i523 = 0; _i523 < _size519; ++_i523)
            {
              xfer += this->parts[_i523].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_parts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ifNotExists);
          isset_ifNotExists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->needResult);
          this->__isset.needResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tblName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_parts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ifNotExists)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddPartitionsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddPartitionsRequest");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tblName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tblName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parts", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->parts.size()));
    std::vector<Partition> ::const_iterator _iter524;
    for (_iter524 = this->parts.begin(); _iter524 != this->parts.end(); ++_iter524)
    {
      xfer += (*_iter524).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ifNotExists", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->ifNotExists);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.needResult) {
    xfer += oprot->writeFieldBegin("needResult", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->needResult);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddPartitionsRequest &a, AddPartitionsRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.parts, b.parts);
  swap(a.ifNotExists, b.ifNotExists);
  swap(a.needResult, b.needResult);
  swap(a.__isset, b.__isset);
}

AddPartitionsRequest::AddPartitionsRequest(const AddPartitionsRequest& other525) {
  dbName = other525.dbName;
  tblName = other525.tblName;
  parts = other525.parts;
  ifNotExists = other525.ifNotExists;
  needResult = other525.needResult;
  __isset = other525.__isset;
}
AddPartitionsRequest& AddPartitionsRequest::operator=(const AddPartitionsRequest& other526) {
  dbName = other526.dbName;
  tblName = other526.tblName;
  parts = other526.parts;
  ifNotExists = other526.ifNotExists;
  needResult = other526.needResult;
  __isset = other526.__isset;
  return *this;
}
void AddPartitionsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddPartitionsRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "parts=" << to_string(parts);
  out << ", " << "ifNotExists=" << to_string(ifNotExists);
  out << ", " << "needResult="; (__isset.needResult ? (out << to_string(needResult)) : (out << "<null>"));
  out << ")";
}


DropPartitionsResult::~DropPartitionsResult() throw() {
}


void DropPartitionsResult::__set_partitions(const std::vector<Partition> & val) {
  this->partitions = val;
__isset.partitions = true;
}

uint32_t DropPartitionsResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitions.clear();
            uint32_t _size527;
            ::apache::thrift::protocol::TType _etype530;
            xfer += iprot->readListBegin(_etype530, _size527);
            this->partitions.resize(_size527);
            uint32_t _i531;
            for (_i531 = 0; _i531 < _size527; ++_i531)
            {
              xfer += this->partitions[_i531].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partitions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DropPartitionsResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DropPartitionsResult");

  if (this->__isset.partitions) {
    xfer += oprot->writeFieldBegin("partitions", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitions.size()));
      std::vector<Partition> ::const_iterator _iter532;
      for (_iter532 = this->partitions.begin(); _iter532 != this->partitions.end(); ++_iter532)
      {
        xfer += (*_iter532).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DropPartitionsResult &a, DropPartitionsResult &b) {
  using ::std::swap;
  swap(a.partitions, b.partitions);
  swap(a.__isset, b.__isset);
}

DropPartitionsResult::DropPartitionsResult(const DropPartitionsResult& other533) {
  partitions = other533.partitions;
  __isset = other533.__isset;
}
DropPartitionsResult& DropPartitionsResult::operator=(const DropPartitionsResult& other534) {
  partitions = other534.partitions;
  __isset = other534.__isset;
  return *this;
}
void DropPartitionsResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropPartitionsResult(";
  out << "partitions="; (__isset.partitions ? (out << to_string(partitions)) : (out << "<null>"));
  out << ")";
}


DropPartitionsExpr::~DropPartitionsExpr() throw() {
}


void DropPartitionsExpr::__set_expr(const std::string& val) {
  this->expr = val;
}

void DropPartitionsExpr::__set_partArchiveLevel(const int32_t val) {
  this->partArchiveLevel = val;
__isset.partArchiveLevel = true;
}

uint32_t DropPartitionsExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_expr = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->expr);
          isset_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->partArchiveLevel);
          this->__isset.partArchiveLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_expr)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DropPartitionsExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DropPartitionsExpr");

  xfer += oprot->writeFieldBegin("expr", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->expr);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.partArchiveLevel) {
    xfer += oprot->writeFieldBegin("partArchiveLevel", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->partArchiveLevel);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DropPartitionsExpr &a, DropPartitionsExpr &b) {
  using ::std::swap;
  swap(a.expr, b.expr);
  swap(a.partArchiveLevel, b.partArchiveLevel);
  swap(a.__isset, b.__isset);
}

DropPartitionsExpr::DropPartitionsExpr(const DropPartitionsExpr& other535) {
  expr = other535.expr;
  partArchiveLevel = other535.partArchiveLevel;
  __isset = other535.__isset;
}
DropPartitionsExpr& DropPartitionsExpr::operator=(const DropPartitionsExpr& other536) {
  expr = other536.expr;
  partArchiveLevel = other536.partArchiveLevel;
  __isset = other536.__isset;
  return *this;
}
void DropPartitionsExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropPartitionsExpr(";
  out << "expr=" << to_string(expr);
  out << ", " << "partArchiveLevel="; (__isset.partArchiveLevel ? (out << to_string(partArchiveLevel)) : (out << "<null>"));
  out << ")";
}


RequestPartsSpec::~RequestPartsSpec() throw() {
}


void RequestPartsSpec::__set_names(const std::vector<std::string> & val) {
  this->names = val;
}

void RequestPartsSpec::__set_exprs(const std::vector<DropPartitionsExpr> & val) {
  this->exprs = val;
}

uint32_t RequestPartsSpec::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->names.clear();
            uint32_t _size537;
            ::apache::thrift::protocol::TType _etype540;
            xfer += iprot->readListBegin(_etype540, _size537);
            this->names.resize(_size537);
            uint32_t _i541;
            for (_i541 = 0; _i541 < _size537; ++_i541)
            {
              xfer += iprot->readString(this->names[_i541]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->exprs.clear();
            uint32_t _size542;
            ::apache::thrift::protocol::TType _etype545;
            xfer += iprot->readListBegin(_etype545, _size542);
            this->exprs.resize(_size542);
            uint32_t _i546;
            for (_i546 = 0; _i546 < _size542; ++_i546)
            {
              xfer += this->exprs[_i546].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.exprs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RequestPartsSpec::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RequestPartsSpec");

  xfer += oprot->writeFieldBegin("names", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->names.size()));
    std::vector<std::string> ::const_iterator _iter547;
    for (_iter547 = this->names.begin(); _iter547 != this->names.end(); ++_iter547)
    {
      xfer += oprot->writeString((*_iter547));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exprs", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->exprs.size()));
    std::vector<DropPartitionsExpr> ::const_iterator _iter548;
    for (_iter548 = this->exprs.begin(); _iter548 != this->exprs.end(); ++_iter548)
    {
      xfer += (*_iter548).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestPartsSpec &a, RequestPartsSpec &b) {
  using ::std::swap;
  swap(a.names, b.names);
  swap(a.exprs, b.exprs);
  swap(a.__isset, b.__isset);
}

RequestPartsSpec::RequestPartsSpec(const RequestPartsSpec& other549) {
  names = other549.names;
  exprs = other549.exprs;
  __isset = other549.__isset;
}
RequestPartsSpec& RequestPartsSpec::operator=(const RequestPartsSpec& other550) {
  names = other550.names;
  exprs = other550.exprs;
  __isset = other550.__isset;
  return *this;
}
void RequestPartsSpec::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RequestPartsSpec(";
  out << "names=" << to_string(names);
  out << ", " << "exprs=" << to_string(exprs);
  out << ")";
}


DropPartitionsRequest::~DropPartitionsRequest() throw() {
}


void DropPartitionsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void DropPartitionsRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void DropPartitionsRequest::__set_parts(const RequestPartsSpec& val) {
  this->parts = val;
}

void DropPartitionsRequest::__set_deleteData(const bool val) {
  this->deleteData = val;
__isset.deleteData = true;
}

void DropPartitionsRequest::__set_ifExists(const bool val) {
  this->ifExists = val;
__isset.ifExists = true;
}

void DropPartitionsRequest::__set_ignoreProtection(const bool val) {
  this->ignoreProtection = val;
__isset.ignoreProtection = true;
}

void DropPartitionsRequest::__set_environmentContext(const EnvironmentContext& val) {
  this->environmentContext = val;
__isset.environmentContext = true;
}

void DropPartitionsRequest::__set_needResult(const bool val) {
  this->needResult = val;
__isset.needResult = true;
}

uint32_t DropPartitionsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;
  bool isset_tblName = false;
  bool isset_parts = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tblName);
          isset_tblName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->parts.read(iprot);
          isset_parts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->deleteData);
          this->__isset.deleteData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ifExists);
          this->__isset.ifExists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ignoreProtection);
          this->__isset.ignoreProtection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->environmentContext.read(iprot);
          this->__isset.environmentContext = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->needResult);
          this->__isset.needResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tblName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_parts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DropPartitionsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DropPartitionsRequest");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tblName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tblName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parts", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->parts.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.deleteData) {
    xfer += oprot->writeFieldBegin("deleteData", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->deleteData);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ifExists) {
    xfer += oprot->writeFieldBegin("ifExists", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->ifExists);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ignoreProtection) {
    xfer += oprot->writeFieldBegin("ignoreProtection", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->ignoreProtection);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.environmentContext) {
    xfer += oprot->writeFieldBegin("environmentContext", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->environmentContext.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.needResult) {
    xfer += oprot->writeFieldBegin("needResult", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->needResult);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DropPartitionsRequest &a, DropPartitionsRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.parts, b.parts);
  swap(a.deleteData, b.deleteData);
  swap(a.ifExists, b.ifExists);
  swap(a.ignoreProtection, b.ignoreProtection);
  swap(a.environmentContext, b.environmentContext);
  swap(a.needResult, b.needResult);
  swap(a.__isset, b.__isset);
}

DropPartitionsRequest::DropPartitionsRequest(const DropPartitionsRequest& other551) {
  dbName = other551.dbName;
  tblName = other551.tblName;
  parts = other551.parts;
  deleteData = other551.deleteData;
  ifExists = other551.ifExists;
  ignoreProtection = other551.ignoreProtection;
  environmentContext = other551.environmentContext;
  needResult = other551.needResult;
  __isset = other551.__isset;
}
DropPartitionsRequest& DropPartitionsRequest::operator=(const DropPartitionsRequest& other552) {
  dbName = other552.dbName;
  tblName = other552.tblName;
  parts = other552.parts;
  deleteData = other552.deleteData;
  ifExists = other552.ifExists;
  ignoreProtection = other552.ignoreProtection;
  environmentContext = other552.environmentContext;
  needResult = other552.needResult;
  __isset = other552.__isset;
  return *this;
}
void DropPartitionsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropPartitionsRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "parts=" << to_string(parts);
  out << ", " << "deleteData="; (__isset.deleteData ? (out << to_string(deleteData)) : (out << "<null>"));
  out << ", " << "ifExists="; (__isset.ifExists ? (out << to_string(ifExists)) : (out << "<null>"));
  out << ", " << "ignoreProtection="; (__isset.ignoreProtection ? (out << to_string(ignoreProtection)) : (out << "<null>"));
  out << ", " << "environmentContext="; (__isset.environmentContext ? (out << to_string(environmentContext)) : (out << "<null>"));
  out << ", " << "needResult="; (__isset.needResult ? (out << to_string(needResult)) : (out << "<null>"));
  out << ")";
}


PartitionValuesRequest::~PartitionValuesRequest() throw() {
}


void PartitionValuesRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void PartitionValuesRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void PartitionValuesRequest::__set_partitionKeys(const std::vector<FieldSchema> & val) {
  this->partitionKeys = val;
}

void PartitionValuesRequest::__set_applyDistinct(const bool val) {
  this->applyDistinct = val;
__isset.applyDistinct = true;
}

void PartitionValuesRequest::__set_filter(const std::string& val) {
  this->filter = val;
__isset.filter = true;
}

void PartitionValuesRequest::__set_partitionOrder(const std::vector<FieldSchema> & val) {
  this->partitionOrder = val;
__isset.partitionOrder = true;
}

void PartitionValuesRequest::__set_ascending(const bool val) {
  this->ascending = val;
__isset.ascending = true;
}

void PartitionValuesRequest::__set_maxParts(const int64_t val) {
  this->maxParts = val;
__isset.maxParts = true;
}

uint32_t PartitionValuesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;
  bool isset_tblName = false;
  bool isset_partitionKeys = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tblName);
          isset_tblName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitionKeys.clear();
            uint32_t _size553;
            ::apache::thrift::protocol::TType _etype556;
            xfer += iprot->readListBegin(_etype556, _size553);
            this->partitionKeys.resize(_size553);
            uint32_t _i557;
            for (_i557 = 0; _i557 < _size553; ++_i557)
            {
              xfer += this->partitionKeys[_i557].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_partitionKeys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->applyDistinct);
          this->__isset.applyDistinct = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->filter);
          this->__isset.filter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitionOrder.clear();
            uint32_t _size558;
            ::apache::thrift::protocol::TType _etype561;
            xfer += iprot->readListBegin(_etype561, _size558);
            this->partitionOrder.resize(_size558);
            uint32_t _i562;
            for (_i562 = 0; _i562 < _size558; ++_i562)
            {
              xfer += this->partitionOrder[_i562].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partitionOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ascending);
          this->__isset.ascending = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->maxParts);
          this->__isset.maxParts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tblName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_partitionKeys)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PartitionValuesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionValuesRequest");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tblName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tblName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partitionKeys", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitionKeys.size()));
    std::vector<FieldSchema> ::const_iterator _iter563;
    for (_iter563 = this->partitionKeys.begin(); _iter563 != this->partitionKeys.end(); ++_iter563)
    {
      xfer += (*_iter563).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.applyDistinct) {
    xfer += oprot->writeFieldBegin("applyDistinct", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->applyDistinct);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.filter) {
    xfer += oprot->writeFieldBegin("filter", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->filter);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partitionOrder) {
    xfer += oprot->writeFieldBegin("partitionOrder", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitionOrder.size()));
      std::vector<FieldSchema> ::const_iterator _iter564;
      for (_iter564 = this->partitionOrder.begin(); _iter564 != this->partitionOrder.end(); ++_iter564)
      {
        xfer += (*_iter564).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ascending) {
    xfer += oprot->writeFieldBegin("ascending", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->ascending);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxParts) {
    xfer += oprot->writeFieldBegin("maxParts", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->maxParts);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionValuesRequest &a, PartitionValuesRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.partitionKeys, b.partitionKeys);
  swap(a.applyDistinct, b.applyDistinct);
  swap(a.filter, b.filter);
  swap(a.partitionOrder, b.partitionOrder);
  swap(a.ascending, b.ascending);
  swap(a.maxParts, b.maxParts);
  swap(a.__isset, b.__isset);
}

PartitionValuesRequest::PartitionValuesRequest(const PartitionValuesRequest& other565) {
  dbName = other565.dbName;
  tblName = other565.tblName;
  partitionKeys = other565.partitionKeys;
  applyDistinct = other565.applyDistinct;
  filter = other565.filter;
  partitionOrder = other565.partitionOrder;
  ascending = other565.ascending;
  maxParts = other565.maxParts;
  __isset = other565.__isset;
}
PartitionValuesRequest& PartitionValuesRequest::operator=(const PartitionValuesRequest& other566) {
  dbName = other566.dbName;
  tblName = other566.tblName;
  partitionKeys = other566.partitionKeys;
  applyDistinct = other566.applyDistinct;
  filter = other566.filter;
  partitionOrder = other566.partitionOrder;
  ascending = other566.ascending;
  maxParts = other566.maxParts;
  __isset = other566.__isset;
  return *this;
}
void PartitionValuesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionValuesRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "partitionKeys=" << to_string(partitionKeys);
  out << ", " << "applyDistinct="; (__isset.applyDistinct ? (out << to_string(applyDistinct)) : (out << "<null>"));
  out << ", " << "filter="; (__isset.filter ? (out << to_string(filter)) : (out << "<null>"));
  out << ", " << "partitionOrder="; (__isset.partitionOrder ? (out << to_string(partitionOrder)) : (out << "<null>"));
  out << ", " << "ascending="; (__isset.ascending ? (out << to_string(ascending)) : (out << "<null>"));
  out << ", " << "maxParts="; (__isset.maxParts ? (out << to_string(maxParts)) : (out << "<null>"));
  out << ")";
}


PartitionValuesRow::~PartitionValuesRow() throw() {
}


void PartitionValuesRow::__set_row(const std::vector<std::string> & val) {
  this->row = val;
}

uint32_t PartitionValuesRow::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_row = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->row.clear();
            uint32_t _size567;
            ::apache::thrift::protocol::TType _etype570;
            xfer += iprot->readListBegin(_etype570, _size567);
            this->row.resize(_size567);
            uint32_t _i571;
            for (_i571 = 0; _i571 < _size567; ++_i571)
            {
              xfer += iprot->readString(this->row[_i571]);
            }
            xfer += iprot->readListEnd();
          }
          isset_row = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_row)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PartitionValuesRow::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionValuesRow");

  xfer += oprot->writeFieldBegin("row", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->row.size()));
    std::vector<std::string> ::const_iterator _iter572;
    for (_iter572 = this->row.begin(); _iter572 != this->row.end(); ++_iter572)
    {
      xfer += oprot->writeString((*_iter572));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionValuesRow &a, PartitionValuesRow &b) {
  using ::std::swap;
  swap(a.row, b.row);
}

PartitionValuesRow::PartitionValuesRow(const PartitionValuesRow& other573) {
  row = other573.row;
}
PartitionValuesRow& PartitionValuesRow::operator=(const PartitionValuesRow& other574) {
  row = other574.row;
  return *this;
}
void PartitionValuesRow::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionValuesRow(";
  out << "row=" << to_string(row);
  out << ")";
}


PartitionValuesResponse::~PartitionValuesResponse() throw() {
}


void PartitionValuesResponse::__set_partitionValues(const std::vector<PartitionValuesRow> & val) {
  this->partitionValues = val;
}

uint32_t PartitionValuesResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_partitionValues = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitionValues.clear();
            uint32_t _size575;
            ::apache::thrift::protocol::TType _etype578;
            xfer += iprot->readListBegin(_etype578, _size575);
            this->partitionValues.resize(_size575);
            uint32_t _i579;
            for (_i579 = 0; _i579 < _size575; ++_i579)
            {
              xfer += this->partitionValues[_i579].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_partitionValues = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_partitionValues)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PartitionValuesResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PartitionValuesResponse");

  xfer += oprot->writeFieldBegin("partitionValues", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partitionValues.size()));
    std::vector<PartitionValuesRow> ::const_iterator _iter580;
    for (_iter580 = this->partitionValues.begin(); _iter580 != this->partitionValues.end(); ++_iter580)
    {
      xfer += (*_iter580).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PartitionValuesResponse &a, PartitionValuesResponse &b) {
  using ::std::swap;
  swap(a.partitionValues, b.partitionValues);
}

PartitionValuesResponse::PartitionValuesResponse(const PartitionValuesResponse& other581) {
  partitionValues = other581.partitionValues;
}
PartitionValuesResponse& PartitionValuesResponse::operator=(const PartitionValuesResponse& other582) {
  partitionValues = other582.partitionValues;
  return *this;
}
void PartitionValuesResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionValuesResponse(";
  out << "partitionValues=" << to_string(partitionValues);
  out << ")";
}


ResourceUri::~ResourceUri() throw() {
}


void ResourceUri::__set_resourceType(const ResourceType::type val) {
  this->resourceType = val;
}

void ResourceUri::__set_uri(const std::string& val) {
  this->uri = val;
}

uint32_t ResourceUri::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast583;
          xfer += iprot->readI32(ecast583);
          this->resourceType = (ResourceType::type)ecast583;
          this->__isset.resourceType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uri);
          this->__isset.uri = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResourceUri::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ResourceUri");

  xfer += oprot->writeFieldBegin("resourceType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->resourceType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uri", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->uri);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResourceUri &a, ResourceUri &b) {
  using ::std::swap;
  swap(a.resourceType, b.resourceType);
  swap(a.uri, b.uri);
  swap(a.__isset, b.__isset);
}

ResourceUri::ResourceUri(const ResourceUri& other584) {
  resourceType = other584.resourceType;
  uri = other584.uri;
  __isset = other584.__isset;
}
ResourceUri& ResourceUri::operator=(const ResourceUri& other585) {
  resourceType = other585.resourceType;
  uri = other585.uri;
  __isset = other585.__isset;
  return *this;
}
void ResourceUri::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ResourceUri(";
  out << "resourceType=" << to_string(resourceType);
  out << ", " << "uri=" << to_string(uri);
  out << ")";
}


Function::~Function() throw() {
}


void Function::__set_functionName(const std::string& val) {
  this->functionName = val;
}

void Function::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void Function::__set_className(const std::string& val) {
  this->className = val;
}

void Function::__set_ownerName(const std::string& val) {
  this->ownerName = val;
}

void Function::__set_ownerType(const PrincipalType::type val) {
  this->ownerType = val;
}

void Function::__set_createTime(const int32_t val) {
  this->createTime = val;
}

void Function::__set_functionType(const FunctionType::type val) {
  this->functionType = val;
}

void Function::__set_resourceUris(const std::vector<ResourceUri> & val) {
  this->resourceUris = val;
}

uint32_t Function::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->functionName);
          this->__isset.functionName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          this->__isset.dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->className);
          this->__isset.className = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ownerName);
          this->__isset.ownerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast586;
          xfer += iprot->readI32(ecast586);
          this->ownerType = (PrincipalType::type)ecast586;
          this->__isset.ownerType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast587;
          xfer += iprot->readI32(ecast587);
          this->functionType = (FunctionType::type)ecast587;
          this->__isset.functionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->resourceUris.clear();
            uint32_t _size588;
            ::apache::thrift::protocol::TType _etype591;
            xfer += iprot->readListBegin(_etype591, _size588);
            this->resourceUris.resize(_size588);
            uint32_t _i592;
            for (_i592 = 0; _i592 < _size588; ++_i592)
            {
              xfer += this->resourceUris[_i592].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.resourceUris = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Function::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Function");

  xfer += oprot->writeFieldBegin("functionName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->functionName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("className", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->className);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ownerName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->ownerName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ownerType", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->ownerType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("functionType", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->functionType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("resourceUris", ::apache::thrift::protocol::T_LIST, 8);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->resourceUris.size()));
    std::vector<ResourceUri> ::const_iterator _iter593;
    for (_iter593 = this->resourceUris.begin(); _iter593 != this->resourceUris.end(); ++_iter593)
    {
      xfer += (*_iter593).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Function &a, Function &b) {
  using ::std::swap;
  swap(a.functionName, b.functionName);
  swap(a.dbName, b.dbName);
  swap(a.className, b.className);
  swap(a.ownerName, b.ownerName);
  swap(a.ownerType, b.ownerType);
  swap(a.createTime, b.createTime);
  swap(a.functionType, b.functionType);
  swap(a.resourceUris, b.resourceUris);
  swap(a.__isset, b.__isset);
}

Function::Function(const Function& other594) {
  functionName = other594.functionName;
  dbName = other594.dbName;
  className = other594.className;
  ownerName = other594.ownerName;
  ownerType = other594.ownerType;
  createTime = other594.createTime;
  functionType = other594.functionType;
  resourceUris = other594.resourceUris;
  __isset = other594.__isset;
}
Function& Function::operator=(const Function& other595) {
  functionName = other595.functionName;
  dbName = other595.dbName;
  className = other595.className;
  ownerName = other595.ownerName;
  ownerType = other595.ownerType;
  createTime = other595.createTime;
  functionType = other595.functionType;
  resourceUris = other595.resourceUris;
  __isset = other595.__isset;
  return *this;
}
void Function::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Function(";
  out << "functionName=" << to_string(functionName);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "className=" << to_string(className);
  out << ", " << "ownerName=" << to_string(ownerName);
  out << ", " << "ownerType=" << to_string(ownerType);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "functionType=" << to_string(functionType);
  out << ", " << "resourceUris=" << to_string(resourceUris);
  out << ")";
}


TxnInfo::~TxnInfo() throw() {
}


void TxnInfo::__set_id(const int64_t val) {
  this->id = val;
}

void TxnInfo::__set_state(const TxnState::type val) {
  this->state = val;
}

void TxnInfo::__set_user(const std::string& val) {
  this->user = val;
}

void TxnInfo::__set_hostname(const std::string& val) {
  this->hostname = val;
}

void TxnInfo::__set_agentInfo(const std::string& val) {
  this->agentInfo = val;
__isset.agentInfo = true;
}

void TxnInfo::__set_heartbeatCount(const int32_t val) {
  this->heartbeatCount = val;
__isset.heartbeatCount = true;
}

void TxnInfo::__set_metaInfo(const std::string& val) {
  this->metaInfo = val;
__isset.metaInfo = true;
}

void TxnInfo::__set_startedTime(const int64_t val) {
  this->startedTime = val;
__isset.startedTime = true;
}

void TxnInfo::__set_lastHeartbeatTime(const int64_t val) {
  this->lastHeartbeatTime = val;
__isset.lastHeartbeatTime = true;
}

uint32_t TxnInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_state = false;
  bool isset_user = false;
  bool isset_hostname = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast596;
          xfer += iprot->readI32(ecast596);
          this->state = (TxnState::type)ecast596;
          isset_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user);
          isset_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hostname);
          isset_hostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->agentInfo);
          this->__isset.agentInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->heartbeatCount);
          this->__isset.heartbeatCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->metaInfo);
          this->__isset.metaInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startedTime);
          this->__isset.startedTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastHeartbeatTime);
          this->__isset.lastHeartbeatTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hostname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TxnInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TxnInfo");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->user);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostname", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->hostname);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.agentInfo) {
    xfer += oprot->writeFieldBegin("agentInfo", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->agentInfo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.heartbeatCount) {
    xfer += oprot->writeFieldBegin("heartbeatCount", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->heartbeatCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.metaInfo) {
    xfer += oprot->writeFieldBegin("metaInfo", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->metaInfo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.startedTime) {
    xfer += oprot->writeFieldBegin("startedTime", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->startedTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastHeartbeatTime) {
    xfer += oprot->writeFieldBegin("lastHeartbeatTime", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->lastHeartbeatTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TxnInfo &a, TxnInfo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.state, b.state);
  swap(a.user, b.user);
  swap(a.hostname, b.hostname);
  swap(a.agentInfo, b.agentInfo);
  swap(a.heartbeatCount, b.heartbeatCount);
  swap(a.metaInfo, b.metaInfo);
  swap(a.startedTime, b.startedTime);
  swap(a.lastHeartbeatTime, b.lastHeartbeatTime);
  swap(a.__isset, b.__isset);
}

TxnInfo::TxnInfo(const TxnInfo& other597) {
  id = other597.id;
  state = other597.state;
  user = other597.user;
  hostname = other597.hostname;
  agentInfo = other597.agentInfo;
  heartbeatCount = other597.heartbeatCount;
  metaInfo = other597.metaInfo;
  startedTime = other597.startedTime;
  lastHeartbeatTime = other597.lastHeartbeatTime;
  __isset = other597.__isset;
}
TxnInfo& TxnInfo::operator=(const TxnInfo& other598) {
  id = other598.id;
  state = other598.state;
  user = other598.user;
  hostname = other598.hostname;
  agentInfo = other598.agentInfo;
  heartbeatCount = other598.heartbeatCount;
  metaInfo = other598.metaInfo;
  startedTime = other598.startedTime;
  lastHeartbeatTime = other598.lastHeartbeatTime;
  __isset = other598.__isset;
  return *this;
}
void TxnInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TxnInfo(";
  out << "id=" << to_string(id);
  out << ", " << "state=" << to_string(state);
  out << ", " << "user=" << to_string(user);
  out << ", " << "hostname=" << to_string(hostname);
  out << ", " << "agentInfo="; (__isset.agentInfo ? (out << to_string(agentInfo)) : (out << "<null>"));
  out << ", " << "heartbeatCount="; (__isset.heartbeatCount ? (out << to_string(heartbeatCount)) : (out << "<null>"));
  out << ", " << "metaInfo="; (__isset.metaInfo ? (out << to_string(metaInfo)) : (out << "<null>"));
  out << ", " << "startedTime="; (__isset.startedTime ? (out << to_string(startedTime)) : (out << "<null>"));
  out << ", " << "lastHeartbeatTime="; (__isset.lastHeartbeatTime ? (out << to_string(lastHeartbeatTime)) : (out << "<null>"));
  out << ")";
}


GetOpenTxnsInfoResponse::~GetOpenTxnsInfoResponse() throw() {
}


void GetOpenTxnsInfoResponse::__set_txn_high_water_mark(const int64_t val) {
  this->txn_high_water_mark = val;
}

void GetOpenTxnsInfoResponse::__set_open_txns(const std::vector<TxnInfo> & val) {
  this->open_txns = val;
}

uint32_t GetOpenTxnsInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txn_high_water_mark = false;
  bool isset_open_txns = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txn_high_water_mark);
          isset_txn_high_water_mark = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->open_txns.clear();
            uint32_t _size599;
            ::apache::thrift::protocol::TType _etype602;
            xfer += iprot->readListBegin(_etype602, _size599);
            this->open_txns.resize(_size599);
            uint32_t _i603;
            for (_i603 = 0; _i603 < _size599; ++_i603)
            {
              xfer += this->open_txns[_i603].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_open_txns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txn_high_water_mark)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_open_txns)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetOpenTxnsInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetOpenTxnsInfoResponse");

  xfer += oprot->writeFieldBegin("txn_high_water_mark", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->txn_high_water_mark);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("open_txns", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->open_txns.size()));
    std::vector<TxnInfo> ::const_iterator _iter604;
    for (_iter604 = this->open_txns.begin(); _iter604 != this->open_txns.end(); ++_iter604)
    {
      xfer += (*_iter604).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetOpenTxnsInfoResponse &a, GetOpenTxnsInfoResponse &b) {
  using ::std::swap;
  swap(a.txn_high_water_mark, b.txn_high_water_mark);
  swap(a.open_txns, b.open_txns);
}

GetOpenTxnsInfoResponse::GetOpenTxnsInfoResponse(const GetOpenTxnsInfoResponse& other605) {
  txn_high_water_mark = other605.txn_high_water_mark;
  open_txns = other605.open_txns;
}
GetOpenTxnsInfoResponse& GetOpenTxnsInfoResponse::operator=(const GetOpenTxnsInfoResponse& other606) {
  txn_high_water_mark = other606.txn_high_water_mark;
  open_txns = other606.open_txns;
  return *this;
}
void GetOpenTxnsInfoResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetOpenTxnsInfoResponse(";
  out << "txn_high_water_mark=" << to_string(txn_high_water_mark);
  out << ", " << "open_txns=" << to_string(open_txns);
  out << ")";
}


GetOpenTxnsResponse::~GetOpenTxnsResponse() throw() {
}


void GetOpenTxnsResponse::__set_txn_high_water_mark(const int64_t val) {
  this->txn_high_water_mark = val;
}

void GetOpenTxnsResponse::__set_open_txns(const std::vector<int64_t> & val) {
  this->open_txns = val;
}

void GetOpenTxnsResponse::__set_min_open_txn(const int64_t val) {
  this->min_open_txn = val;
__isset.min_open_txn = true;
}

void GetOpenTxnsResponse::__set_abortedBits(const std::string& val) {
  this->abortedBits = val;
}

uint32_t GetOpenTxnsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txn_high_water_mark = false;
  bool isset_open_txns = false;
  bool isset_abortedBits = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txn_high_water_mark);
          isset_txn_high_water_mark = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->open_txns.clear();
            uint32_t _size607;
            ::apache::thrift::protocol::TType _etype610;
            xfer += iprot->readListBegin(_etype610, _size607);
            this->open_txns.resize(_size607);
            uint32_t _i611;
            for (_i611 = 0; _i611 < _size607; ++_i611)
            {
              xfer += iprot->readI64(this->open_txns[_i611]);
            }
            xfer += iprot->readListEnd();
          }
          isset_open_txns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->min_open_txn);
          this->__isset.min_open_txn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->abortedBits);
          isset_abortedBits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txn_high_water_mark)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_open_txns)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_abortedBits)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetOpenTxnsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetOpenTxnsResponse");

  xfer += oprot->writeFieldBegin("txn_high_water_mark", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->txn_high_water_mark);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("open_txns", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->open_txns.size()));
    std::vector<int64_t> ::const_iterator _iter612;
    for (_iter612 = this->open_txns.begin(); _iter612 != this->open_txns.end(); ++_iter612)
    {
      xfer += oprot->writeI64((*_iter612));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.min_open_txn) {
    xfer += oprot->writeFieldBegin("min_open_txn", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->min_open_txn);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("abortedBits", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->abortedBits);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetOpenTxnsResponse &a, GetOpenTxnsResponse &b) {
  using ::std::swap;
  swap(a.txn_high_water_mark, b.txn_high_water_mark);
  swap(a.open_txns, b.open_txns);
  swap(a.min_open_txn, b.min_open_txn);
  swap(a.abortedBits, b.abortedBits);
  swap(a.__isset, b.__isset);
}

GetOpenTxnsResponse::GetOpenTxnsResponse(const GetOpenTxnsResponse& other613) {
  txn_high_water_mark = other613.txn_high_water_mark;
  open_txns = other613.open_txns;
  min_open_txn = other613.min_open_txn;
  abortedBits = other613.abortedBits;
  __isset = other613.__isset;
}
GetOpenTxnsResponse& GetOpenTxnsResponse::operator=(const GetOpenTxnsResponse& other614) {
  txn_high_water_mark = other614.txn_high_water_mark;
  open_txns = other614.open_txns;
  min_open_txn = other614.min_open_txn;
  abortedBits = other614.abortedBits;
  __isset = other614.__isset;
  return *this;
}
void GetOpenTxnsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetOpenTxnsResponse(";
  out << "txn_high_water_mark=" << to_string(txn_high_water_mark);
  out << ", " << "open_txns=" << to_string(open_txns);
  out << ", " << "min_open_txn="; (__isset.min_open_txn ? (out << to_string(min_open_txn)) : (out << "<null>"));
  out << ", " << "abortedBits=" << to_string(abortedBits);
  out << ")";
}


OpenTxnRequest::~OpenTxnRequest() throw() {
}


void OpenTxnRequest::__set_num_txns(const int32_t val) {
  this->num_txns = val;
}

void OpenTxnRequest::__set_user(const std::string& val) {
  this->user = val;
}

void OpenTxnRequest::__set_hostname(const std::string& val) {
  this->hostname = val;
}

void OpenTxnRequest::__set_agentInfo(const std::string& val) {
  this->agentInfo = val;
__isset.agentInfo = true;
}

void OpenTxnRequest::__set_replPolicy(const std::string& val) {
  this->replPolicy = val;
__isset.replPolicy = true;
}

void OpenTxnRequest::__set_replSrcTxnId(const std::vector<int64_t> & val) {
  this->replSrcTxnId = val;
__isset.replSrcTxnId = true;
}

uint32_t OpenTxnRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_num_txns = false;
  bool isset_user = false;
  bool isset_hostname = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_txns);
          isset_num_txns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user);
          isset_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hostname);
          isset_hostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->agentInfo);
          this->__isset.agentInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->replPolicy);
          this->__isset.replPolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->replSrcTxnId.clear();
            uint32_t _size615;
            ::apache::thrift::protocol::TType _etype618;
            xfer += iprot->readListBegin(_etype618, _size615);
            this->replSrcTxnId.resize(_size615);
            uint32_t _i619;
            for (_i619 = 0; _i619 < _size615; ++_i619)
            {
              xfer += iprot->readI64(this->replSrcTxnId[_i619]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.replSrcTxnId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_num_txns)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hostname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t OpenTxnRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OpenTxnRequest");

  xfer += oprot->writeFieldBegin("num_txns", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->num_txns);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->user);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostname", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->hostname);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.agentInfo) {
    xfer += oprot->writeFieldBegin("agentInfo", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->agentInfo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.replPolicy) {
    xfer += oprot->writeFieldBegin("replPolicy", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->replPolicy);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.replSrcTxnId) {
    xfer += oprot->writeFieldBegin("replSrcTxnId", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->replSrcTxnId.size()));
      std::vector<int64_t> ::const_iterator _iter620;
      for (_iter620 = this->replSrcTxnId.begin(); _iter620 != this->replSrcTxnId.end(); ++_iter620)
      {
        xfer += oprot->writeI64((*_iter620));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OpenTxnRequest &a, OpenTxnRequest &b) {
  using ::std::swap;
  swap(a.num_txns, b.num_txns);
  swap(a.user, b.user);
  swap(a.hostname, b.hostname);
  swap(a.agentInfo, b.agentInfo);
  swap(a.replPolicy, b.replPolicy);
  swap(a.replSrcTxnId, b.replSrcTxnId);
  swap(a.__isset, b.__isset);
}

OpenTxnRequest::OpenTxnRequest(const OpenTxnRequest& other621) {
  num_txns = other621.num_txns;
  user = other621.user;
  hostname = other621.hostname;
  agentInfo = other621.agentInfo;
  replPolicy = other621.replPolicy;
  replSrcTxnId = other621.replSrcTxnId;
  __isset = other621.__isset;
}
OpenTxnRequest& OpenTxnRequest::operator=(const OpenTxnRequest& other622) {
  num_txns = other622.num_txns;
  user = other622.user;
  hostname = other622.hostname;
  agentInfo = other622.agentInfo;
  replPolicy = other622.replPolicy;
  replSrcTxnId = other622.replSrcTxnId;
  __isset = other622.__isset;
  return *this;
}
void OpenTxnRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OpenTxnRequest(";
  out << "num_txns=" << to_string(num_txns);
  out << ", " << "user=" << to_string(user);
  out << ", " << "hostname=" << to_string(hostname);
  out << ", " << "agentInfo="; (__isset.agentInfo ? (out << to_string(agentInfo)) : (out << "<null>"));
  out << ", " << "replPolicy="; (__isset.replPolicy ? (out << to_string(replPolicy)) : (out << "<null>"));
  out << ", " << "replSrcTxnId="; (__isset.replSrcTxnId ? (out << to_string(replSrcTxnId)) : (out << "<null>"));
  out << ")";
}


OpenTxnsResponse::~OpenTxnsResponse() throw() {
}


void OpenTxnsResponse::__set_txn_ids(const std::vector<int64_t> & val) {
  this->txn_ids = val;
}

uint32_t OpenTxnsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txn_ids = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->txn_ids.clear();
            uint32_t _size623;
            ::apache::thrift::protocol::TType _etype626;
            xfer += iprot->readListBegin(_etype626, _size623);
            this->txn_ids.resize(_size623);
            uint32_t _i627;
            for (_i627 = 0; _i627 < _size623; ++_i627)
            {
              xfer += iprot->readI64(this->txn_ids[_i627]);
            }
            xfer += iprot->readListEnd();
          }
          isset_txn_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txn_ids)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t OpenTxnsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OpenTxnsResponse");

  xfer += oprot->writeFieldBegin("txn_ids", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->txn_ids.size()));
    std::vector<int64_t> ::const_iterator _iter628;
    for (_iter628 = this->txn_ids.begin(); _iter628 != this->txn_ids.end(); ++_iter628)
    {
      xfer += oprot->writeI64((*_iter628));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OpenTxnsResponse &a, OpenTxnsResponse &b) {
  using ::std::swap;
  swap(a.txn_ids, b.txn_ids);
}

OpenTxnsResponse::OpenTxnsResponse(const OpenTxnsResponse& other629) {
  txn_ids = other629.txn_ids;
}
OpenTxnsResponse& OpenTxnsResponse::operator=(const OpenTxnsResponse& other630) {
  txn_ids = other630.txn_ids;
  return *this;
}
void OpenTxnsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OpenTxnsResponse(";
  out << "txn_ids=" << to_string(txn_ids);
  out << ")";
}


AbortTxnRequest::~AbortTxnRequest() throw() {
}


void AbortTxnRequest::__set_txnid(const int64_t val) {
  this->txnid = val;
}

void AbortTxnRequest::__set_replPolicy(const std::string& val) {
  this->replPolicy = val;
__isset.replPolicy = true;
}

uint32_t AbortTxnRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txnid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          isset_txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->replPolicy);
          this->__isset.replPolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txnid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AbortTxnRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AbortTxnRequest");

  xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->txnid);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.replPolicy) {
    xfer += oprot->writeFieldBegin("replPolicy", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->replPolicy);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AbortTxnRequest &a, AbortTxnRequest &b) {
  using ::std::swap;
  swap(a.txnid, b.txnid);
  swap(a.replPolicy, b.replPolicy);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
AbortTxnRequest::AbortTxnRequest(const AbortTxnRequest& other631) {
  txnid = other631.txnid;
  replPolicy = other631.replPolicy;
  __isset = other631.__isset;
}
AbortTxnRequest& AbortTxnRequest::operator=(const AbortTxnRequest& other632) {
  txnid = other632.txnid;
  replPolicy = other632.replPolicy;
  __isset = other632.__isset;
=======
AbortTxnRequest::AbortTxnRequest(const AbortTxnRequest& other611) {
  txnid = other611.txnid;
  replPolicy = other611.replPolicy;
  __isset = other611.__isset;
}
AbortTxnRequest& AbortTxnRequest::operator=(const AbortTxnRequest& other612) {
  txnid = other612.txnid;
  replPolicy = other612.replPolicy;
  __isset = other612.__isset;
<<<<<<< HEAD
=======
}
AbortTxnRequest& AbortTxnRequest::operator=(const AbortTxnRequest& other612) {
  txnid = other612.txnid;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
  replPolicy = other611.replPolicy;
  __isset = other611.__isset;
}
AbortTxnRequest& AbortTxnRequest::operator=(const AbortTxnRequest& other612) {
  txnid = other612.txnid;
  replPolicy = other612.replPolicy;
  __isset = other612.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void AbortTxnRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AbortTxnRequest(";
  out << "txnid=" << to_string(txnid);
  out << ", " << "replPolicy="; (__isset.replPolicy ? (out << to_string(replPolicy)) : (out << "<null>"));
  out << ")";
}


AbortTxnsRequest::~AbortTxnsRequest() throw() {
}


void AbortTxnsRequest::__set_txn_ids(const std::vector<int64_t> & val) {
  this->txn_ids = val;
}

uint32_t AbortTxnsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txn_ids = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->txn_ids.clear();
            uint32_t _size633;
            ::apache::thrift::protocol::TType _etype636;
            xfer += iprot->readListBegin(_etype636, _size633);
            this->txn_ids.resize(_size633);
            uint32_t _i637;
            for (_i637 = 0; _i637 < _size633; ++_i637)
            {
              xfer += iprot->readI64(this->txn_ids[_i637]);
            }
            xfer += iprot->readListEnd();
          }
          isset_txn_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txn_ids)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AbortTxnsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AbortTxnsRequest");

  xfer += oprot->writeFieldBegin("txn_ids", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->txn_ids.size()));
    std::vector<int64_t> ::const_iterator _iter638;
    for (_iter638 = this->txn_ids.begin(); _iter638 != this->txn_ids.end(); ++_iter638)
    {
      xfer += oprot->writeI64((*_iter638));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AbortTxnsRequest &a, AbortTxnsRequest &b) {
  using ::std::swap;
  swap(a.txn_ids, b.txn_ids);
}

AbortTxnsRequest::AbortTxnsRequest(const AbortTxnsRequest& other639) {
  txn_ids = other639.txn_ids;
}
AbortTxnsRequest& AbortTxnsRequest::operator=(const AbortTxnsRequest& other640) {
  txn_ids = other640.txn_ids;
  return *this;
}
void AbortTxnsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AbortTxnsRequest(";
  out << "txn_ids=" << to_string(txn_ids);
  out << ")";
}


CommitTxnRequest::~CommitTxnRequest() throw() {
}


void CommitTxnRequest::__set_txnid(const int64_t val) {
  this->txnid = val;
}

void CommitTxnRequest::__set_replPolicy(const std::string& val) {
  this->replPolicy = val;
__isset.replPolicy = true;
}

uint32_t CommitTxnRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txnid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          isset_txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->replPolicy);
          this->__isset.replPolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txnid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CommitTxnRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CommitTxnRequest");

  xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->txnid);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.replPolicy) {
    xfer += oprot->writeFieldBegin("replPolicy", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->replPolicy);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommitTxnRequest &a, CommitTxnRequest &b) {
  using ::std::swap;
  swap(a.txnid, b.txnid);
  swap(a.replPolicy, b.replPolicy);
  swap(a.__isset, b.__isset);
}

CommitTxnRequest::CommitTxnRequest(const CommitTxnRequest& other641) {
  txnid = other641.txnid;
  replPolicy = other641.replPolicy;
  __isset = other641.__isset;
}
CommitTxnRequest& CommitTxnRequest::operator=(const CommitTxnRequest& other642) {
  txnid = other642.txnid;
  replPolicy = other642.replPolicy;
  __isset = other642.__isset;
  return *this;
}
void CommitTxnRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CommitTxnRequest(";
  out << "txnid=" << to_string(txnid);
  out << ", " << "replPolicy="; (__isset.replPolicy ? (out << to_string(replPolicy)) : (out << "<null>"));
  out << ")";
}


GetTargetTxnIdRequest::~GetTargetTxnIdRequest() throw() {
}


void GetTargetTxnIdRequest::__set_txnid(const int64_t val) {
  this->txnid = val;
}

uint32_t GetTargetTxnIdRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txnid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          isset_txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txnid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetTargetTxnIdRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetTargetTxnIdRequest");

  xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->txnid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetTargetTxnIdRequest &a, GetTargetTxnIdRequest &b) {
  using ::std::swap;
  swap(a.txnid, b.txnid);
}

GetTargetTxnIdRequest::GetTargetTxnIdRequest(const GetTargetTxnIdRequest& other643) {
  txnid = other643.txnid;
}
GetTargetTxnIdRequest& GetTargetTxnIdRequest::operator=(const GetTargetTxnIdRequest& other644) {
  txnid = other644.txnid;
  return *this;
}
void GetTargetTxnIdRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTargetTxnIdRequest(";
  out << "txnid=" << to_string(txnid);
  out << ")";
}


GetTargetTxnIdResponse::~GetTargetTxnIdResponse() throw() {
}


void GetTargetTxnIdResponse::__set_txnid(const int64_t val) {
  this->txnid = val;
}

uint32_t GetTargetTxnIdResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txnid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          isset_txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txnid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetTargetTxnIdResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetTargetTxnIdResponse");

  xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->txnid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetTargetTxnIdResponse &a, GetTargetTxnIdResponse &b) {
  using ::std::swap;
  swap(a.txnid, b.txnid);
}

GetTargetTxnIdResponse::GetTargetTxnIdResponse(const GetTargetTxnIdResponse& other645) {
  txnid = other645.txnid;
}
GetTargetTxnIdResponse& GetTargetTxnIdResponse::operator=(const GetTargetTxnIdResponse& other646) {
  txnid = other646.txnid;
  return *this;
}
void GetTargetTxnIdResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTargetTxnIdResponse(";
  out << "txnid=" << to_string(txnid);
  out << ")";
}


GetValidWriteIdsRequest::~GetValidWriteIdsRequest() throw() {
}


void GetValidWriteIdsRequest::__set_fullTableNames(const std::vector<std::string> & val) {
  this->fullTableNames = val;
}

void GetValidWriteIdsRequest::__set_validTxnList(const std::string& val) {
  this->validTxnList = val;
}

uint32_t GetValidWriteIdsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fullTableNames = false;
  bool isset_validTxnList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fullTableNames.clear();
<<<<<<< HEAD
            uint32_t _size647;
            ::apache::thrift::protocol::TType _etype650;
            xfer += iprot->readListBegin(_etype650, _size647);
            this->fullTableNames.resize(_size647);
            uint32_t _i651;
            for (_i651 = 0; _i651 < _size647; ++_i651)
            {
              xfer += iprot->readString(this->fullTableNames[_i651]);
=======
            uint32_t _size627;
            ::apache::thrift::protocol::TType _etype630;
            xfer += iprot->readListBegin(_etype630, _size627);
            this->fullTableNames.resize(_size627);
            uint32_t _i631;
            for (_i631 = 0; _i631 < _size627; ++_i631)
            {
              xfer += iprot->readString(this->fullTableNames[_i631]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          isset_fullTableNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->validTxnList);
          isset_validTxnList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fullTableNames)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_validTxnList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetValidWriteIdsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetValidWriteIdsRequest");

  xfer += oprot->writeFieldBegin("fullTableNames", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->fullTableNames.size()));
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter652;
    for (_iter652 = this->fullTableNames.begin(); _iter652 != this->fullTableNames.end(); ++_iter652)
    {
      xfer += oprot->writeString((*_iter652));
=======
    std::vector<std::string> ::const_iterator _iter632;
    for (_iter632 = this->fullTableNames.begin(); _iter632 != this->fullTableNames.end(); ++_iter632)
    {
      xfer += oprot->writeString((*_iter632));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validTxnList", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->validTxnList);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetValidWriteIdsRequest &a, GetValidWriteIdsRequest &b) {
  using ::std::swap;
  swap(a.fullTableNames, b.fullTableNames);
  swap(a.validTxnList, b.validTxnList);
}

<<<<<<< HEAD
GetValidWriteIdsRequest::GetValidWriteIdsRequest(const GetValidWriteIdsRequest& other653) {
  fullTableNames = other653.fullTableNames;
  validTxnList = other653.validTxnList;
}
GetValidWriteIdsRequest& GetValidWriteIdsRequest::operator=(const GetValidWriteIdsRequest& other654) {
  fullTableNames = other654.fullTableNames;
  validTxnList = other654.validTxnList;
=======
GetValidWriteIdsRequest::GetValidWriteIdsRequest(const GetValidWriteIdsRequest& other633) {
  fullTableNames = other633.fullTableNames;
  validTxnList = other633.validTxnList;
}
GetValidWriteIdsRequest& GetValidWriteIdsRequest::operator=(const GetValidWriteIdsRequest& other634) {
  fullTableNames = other634.fullTableNames;
  validTxnList = other634.validTxnList;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void GetValidWriteIdsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetValidWriteIdsRequest(";
  out << "fullTableNames=" << to_string(fullTableNames);
  out << ", " << "validTxnList=" << to_string(validTxnList);
  out << ")";
}


TableValidWriteIds::~TableValidWriteIds() throw() {
}


void TableValidWriteIds::__set_fullTableName(const std::string& val) {
  this->fullTableName = val;
}

void TableValidWriteIds::__set_writeIdHighWaterMark(const int64_t val) {
  this->writeIdHighWaterMark = val;
}

void TableValidWriteIds::__set_invalidWriteIds(const std::vector<int64_t> & val) {
  this->invalidWriteIds = val;
}

void TableValidWriteIds::__set_minOpenWriteId(const int64_t val) {
  this->minOpenWriteId = val;
__isset.minOpenWriteId = true;
}

void TableValidWriteIds::__set_abortedBits(const std::string& val) {
  this->abortedBits = val;
}

uint32_t TableValidWriteIds::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fullTableName = false;
  bool isset_writeIdHighWaterMark = false;
  bool isset_invalidWriteIds = false;
  bool isset_abortedBits = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fullTableName);
          isset_fullTableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->writeIdHighWaterMark);
          isset_writeIdHighWaterMark = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->invalidWriteIds.clear();
<<<<<<< HEAD
            uint32_t _size655;
            ::apache::thrift::protocol::TType _etype658;
            xfer += iprot->readListBegin(_etype658, _size655);
            this->invalidWriteIds.resize(_size655);
            uint32_t _i659;
            for (_i659 = 0; _i659 < _size655; ++_i659)
            {
              xfer += iprot->readI64(this->invalidWriteIds[_i659]);
=======
            uint32_t _size635;
            ::apache::thrift::protocol::TType _etype638;
            xfer += iprot->readListBegin(_etype638, _size635);
            this->invalidWriteIds.resize(_size635);
            uint32_t _i639;
            for (_i639 = 0; _i639 < _size635; ++_i639)
            {
              xfer += iprot->readI64(this->invalidWriteIds[_i639]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          isset_invalidWriteIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->minOpenWriteId);
          this->__isset.minOpenWriteId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->abortedBits);
          isset_abortedBits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fullTableName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_writeIdHighWaterMark)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_invalidWriteIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_abortedBits)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TableValidWriteIds::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TableValidWriteIds");

  xfer += oprot->writeFieldBegin("fullTableName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->fullTableName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("writeIdHighWaterMark", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->writeIdHighWaterMark);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("invalidWriteIds", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->invalidWriteIds.size()));
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter660;
    for (_iter660 = this->invalidWriteIds.begin(); _iter660 != this->invalidWriteIds.end(); ++_iter660)
    {
      xfer += oprot->writeI64((*_iter660));
=======
    std::vector<int64_t> ::const_iterator _iter640;
    for (_iter640 = this->invalidWriteIds.begin(); _iter640 != this->invalidWriteIds.end(); ++_iter640)
    {
      xfer += oprot->writeI64((*_iter640));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.minOpenWriteId) {
    xfer += oprot->writeFieldBegin("minOpenWriteId", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->minOpenWriteId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("abortedBits", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeBinary(this->abortedBits);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TableValidWriteIds &a, TableValidWriteIds &b) {
  using ::std::swap;
  swap(a.fullTableName, b.fullTableName);
  swap(a.writeIdHighWaterMark, b.writeIdHighWaterMark);
  swap(a.invalidWriteIds, b.invalidWriteIds);
  swap(a.minOpenWriteId, b.minOpenWriteId);
  swap(a.abortedBits, b.abortedBits);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
TableValidWriteIds::TableValidWriteIds(const TableValidWriteIds& other661) {
  fullTableName = other661.fullTableName;
  writeIdHighWaterMark = other661.writeIdHighWaterMark;
  invalidWriteIds = other661.invalidWriteIds;
  minOpenWriteId = other661.minOpenWriteId;
  abortedBits = other661.abortedBits;
  __isset = other661.__isset;
}
TableValidWriteIds& TableValidWriteIds::operator=(const TableValidWriteIds& other662) {
  fullTableName = other662.fullTableName;
  writeIdHighWaterMark = other662.writeIdHighWaterMark;
  invalidWriteIds = other662.invalidWriteIds;
  minOpenWriteId = other662.minOpenWriteId;
  abortedBits = other662.abortedBits;
  __isset = other662.__isset;
=======
TableValidWriteIds::TableValidWriteIds(const TableValidWriteIds& other641) {
  fullTableName = other641.fullTableName;
  writeIdHighWaterMark = other641.writeIdHighWaterMark;
  invalidWriteIds = other641.invalidWriteIds;
  minOpenWriteId = other641.minOpenWriteId;
  abortedBits = other641.abortedBits;
  __isset = other641.__isset;
}
TableValidWriteIds& TableValidWriteIds::operator=(const TableValidWriteIds& other642) {
  fullTableName = other642.fullTableName;
  writeIdHighWaterMark = other642.writeIdHighWaterMark;
  invalidWriteIds = other642.invalidWriteIds;
  minOpenWriteId = other642.minOpenWriteId;
  abortedBits = other642.abortedBits;
  __isset = other642.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void TableValidWriteIds::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TableValidWriteIds(";
  out << "fullTableName=" << to_string(fullTableName);
  out << ", " << "writeIdHighWaterMark=" << to_string(writeIdHighWaterMark);
  out << ", " << "invalidWriteIds=" << to_string(invalidWriteIds);
  out << ", " << "minOpenWriteId="; (__isset.minOpenWriteId ? (out << to_string(minOpenWriteId)) : (out << "<null>"));
  out << ", " << "abortedBits=" << to_string(abortedBits);
  out << ")";
}


GetValidWriteIdsResponse::~GetValidWriteIdsResponse() throw() {
}


void GetValidWriteIdsResponse::__set_tblValidWriteIds(const std::vector<TableValidWriteIds> & val) {
  this->tblValidWriteIds = val;
}

uint32_t GetValidWriteIdsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tblValidWriteIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tblValidWriteIds.clear();
<<<<<<< HEAD
            uint32_t _size663;
            ::apache::thrift::protocol::TType _etype666;
            xfer += iprot->readListBegin(_etype666, _size663);
            this->tblValidWriteIds.resize(_size663);
            uint32_t _i667;
            for (_i667 = 0; _i667 < _size663; ++_i667)
            {
              xfer += this->tblValidWriteIds[_i667].read(iprot);
=======
            uint32_t _size643;
            ::apache::thrift::protocol::TType _etype646;
            xfer += iprot->readListBegin(_etype646, _size643);
            this->tblValidWriteIds.resize(_size643);
            uint32_t _i647;
            for (_i647 = 0; _i647 < _size643; ++_i647)
            {
              xfer += this->tblValidWriteIds[_i647].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          isset_tblValidWriteIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tblValidWriteIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetValidWriteIdsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetValidWriteIdsResponse");

  xfer += oprot->writeFieldBegin("tblValidWriteIds", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tblValidWriteIds.size()));
<<<<<<< HEAD
    std::vector<TableValidWriteIds> ::const_iterator _iter668;
    for (_iter668 = this->tblValidWriteIds.begin(); _iter668 != this->tblValidWriteIds.end(); ++_iter668)
    {
      xfer += (*_iter668).write(oprot);
=======
    std::vector<TableValidWriteIds> ::const_iterator _iter648;
    for (_iter648 = this->tblValidWriteIds.begin(); _iter648 != this->tblValidWriteIds.end(); ++_iter648)
    {
      xfer += (*_iter648).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetValidWriteIdsResponse &a, GetValidWriteIdsResponse &b) {
  using ::std::swap;
  swap(a.tblValidWriteIds, b.tblValidWriteIds);
}

<<<<<<< HEAD
GetValidWriteIdsResponse::GetValidWriteIdsResponse(const GetValidWriteIdsResponse& other669) {
  tblValidWriteIds = other669.tblValidWriteIds;
}
GetValidWriteIdsResponse& GetValidWriteIdsResponse::operator=(const GetValidWriteIdsResponse& other670) {
  tblValidWriteIds = other670.tblValidWriteIds;
=======
GetValidWriteIdsResponse::GetValidWriteIdsResponse(const GetValidWriteIdsResponse& other649) {
  tblValidWriteIds = other649.tblValidWriteIds;
}
GetValidWriteIdsResponse& GetValidWriteIdsResponse::operator=(const GetValidWriteIdsResponse& other650) {
  tblValidWriteIds = other650.tblValidWriteIds;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void GetValidWriteIdsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetValidWriteIdsResponse(";
  out << "tblValidWriteIds=" << to_string(tblValidWriteIds);
  out << ")";
}


AllocateTableWriteIdsRequest::~AllocateTableWriteIdsRequest() throw() {
}


void AllocateTableWriteIdsRequest::__set_txnIds(const std::vector<int64_t> & val) {
  this->txnIds = val;
}

void AllocateTableWriteIdsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void AllocateTableWriteIdsRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
}

uint32_t AllocateTableWriteIdsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txnIds = false;
  bool isset_dbName = false;
  bool isset_tableName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->txnIds.clear();
<<<<<<< HEAD
            uint32_t _size671;
            ::apache::thrift::protocol::TType _etype674;
            xfer += iprot->readListBegin(_etype674, _size671);
            this->txnIds.resize(_size671);
            uint32_t _i675;
            for (_i675 = 0; _i675 < _size671; ++_i675)
            {
              xfer += iprot->readI64(this->txnIds[_i675]);
=======
            uint32_t _size651;
            ::apache::thrift::protocol::TType _etype654;
            xfer += iprot->readListBegin(_etype654, _size651);
            this->txnIds.resize(_size651);
            uint32_t _i655;
            for (_i655 = 0; _i655 < _size651; ++_i655)
            {
              xfer += iprot->readI64(this->txnIds[_i655]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          isset_txnIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          isset_tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txnIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tableName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AllocateTableWriteIdsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AllocateTableWriteIdsRequest");

  xfer += oprot->writeFieldBegin("txnIds", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->txnIds.size()));
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter676;
    for (_iter676 = this->txnIds.begin(); _iter676 != this->txnIds.end(); ++_iter676)
    {
      xfer += oprot->writeI64((*_iter676));
=======
    std::vector<int64_t> ::const_iterator _iter656;
    for (_iter656 = this->txnIds.begin(); _iter656 != this->txnIds.end(); ++_iter656)
    {
      xfer += oprot->writeI64((*_iter656));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->tableName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AllocateTableWriteIdsRequest &a, AllocateTableWriteIdsRequest &b) {
  using ::std::swap;
  swap(a.txnIds, b.txnIds);
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
}

<<<<<<< HEAD
AllocateTableWriteIdsRequest::AllocateTableWriteIdsRequest(const AllocateTableWriteIdsRequest& other677) {
  txnIds = other677.txnIds;
  dbName = other677.dbName;
  tableName = other677.tableName;
}
AllocateTableWriteIdsRequest& AllocateTableWriteIdsRequest::operator=(const AllocateTableWriteIdsRequest& other678) {
  txnIds = other678.txnIds;
  dbName = other678.dbName;
  tableName = other678.tableName;
=======
AllocateTableWriteIdsRequest::AllocateTableWriteIdsRequest(const AllocateTableWriteIdsRequest& other657) {
  txnIds = other657.txnIds;
  dbName = other657.dbName;
  tableName = other657.tableName;
}
AllocateTableWriteIdsRequest& AllocateTableWriteIdsRequest::operator=(const AllocateTableWriteIdsRequest& other658) {
  txnIds = other658.txnIds;
  dbName = other658.dbName;
  tableName = other658.tableName;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void AllocateTableWriteIdsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AllocateTableWriteIdsRequest(";
  out << "txnIds=" << to_string(txnIds);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ")";
}


TxnToWriteId::~TxnToWriteId() throw() {
}


void TxnToWriteId::__set_txnId(const int64_t val) {
  this->txnId = val;
}

void TxnToWriteId::__set_writeId(const int64_t val) {
  this->writeId = val;
}

uint32_t TxnToWriteId::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txnId = false;
  bool isset_writeId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnId);
          isset_txnId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->writeId);
          isset_writeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txnId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_writeId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TxnToWriteId::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TxnToWriteId");

  xfer += oprot->writeFieldBegin("txnId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->txnId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("writeId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->writeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TxnToWriteId &a, TxnToWriteId &b) {
  using ::std::swap;
  swap(a.txnId, b.txnId);
  swap(a.writeId, b.writeId);
}

<<<<<<< HEAD
TxnToWriteId::TxnToWriteId(const TxnToWriteId& other679) {
  txnId = other679.txnId;
  writeId = other679.writeId;
}
TxnToWriteId& TxnToWriteId::operator=(const TxnToWriteId& other680) {
  txnId = other680.txnId;
  writeId = other680.writeId;
=======
TxnToWriteId::TxnToWriteId(const TxnToWriteId& other659) {
  txnId = other659.txnId;
  writeId = other659.writeId;
}
TxnToWriteId& TxnToWriteId::operator=(const TxnToWriteId& other660) {
  txnId = other660.txnId;
  writeId = other660.writeId;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void TxnToWriteId::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TxnToWriteId(";
  out << "txnId=" << to_string(txnId);
  out << ", " << "writeId=" << to_string(writeId);
  out << ")";
}


AllocateTableWriteIdsResponse::~AllocateTableWriteIdsResponse() throw() {
}


void AllocateTableWriteIdsResponse::__set_txnToWriteIds(const std::vector<TxnToWriteId> & val) {
  this->txnToWriteIds = val;
}

uint32_t AllocateTableWriteIdsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txnToWriteIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->txnToWriteIds.clear();
<<<<<<< HEAD
            uint32_t _size681;
            ::apache::thrift::protocol::TType _etype684;
            xfer += iprot->readListBegin(_etype684, _size681);
            this->txnToWriteIds.resize(_size681);
            uint32_t _i685;
            for (_i685 = 0; _i685 < _size681; ++_i685)
            {
              xfer += this->txnToWriteIds[_i685].read(iprot);
=======
            uint32_t _size661;
            ::apache::thrift::protocol::TType _etype664;
            xfer += iprot->readListBegin(_etype664, _size661);
            this->txnToWriteIds.resize(_size661);
            uint32_t _i665;
            for (_i665 = 0; _i665 < _size661; ++_i665)
            {
              xfer += this->txnToWriteIds[_i665].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          isset_txnToWriteIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txnToWriteIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AllocateTableWriteIdsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AllocateTableWriteIdsResponse");

  xfer += oprot->writeFieldBegin("txnToWriteIds", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->txnToWriteIds.size()));
<<<<<<< HEAD
    std::vector<TxnToWriteId> ::const_iterator _iter686;
    for (_iter686 = this->txnToWriteIds.begin(); _iter686 != this->txnToWriteIds.end(); ++_iter686)
    {
      xfer += (*_iter686).write(oprot);
=======
    std::vector<TxnToWriteId> ::const_iterator _iter666;
    for (_iter666 = this->txnToWriteIds.begin(); _iter666 != this->txnToWriteIds.end(); ++_iter666)
    {
      xfer += (*_iter666).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AllocateTableWriteIdsResponse &a, AllocateTableWriteIdsResponse &b) {
  using ::std::swap;
  swap(a.txnToWriteIds, b.txnToWriteIds);
}

<<<<<<< HEAD
<<<<<<< HEAD
AllocateTableWriteIdsResponse::AllocateTableWriteIdsResponse(const AllocateTableWriteIdsResponse& other687) {
  txnToWriteIds = other687.txnToWriteIds;
}
AllocateTableWriteIdsResponse& AllocateTableWriteIdsResponse::operator=(const AllocateTableWriteIdsResponse& other688) {
  txnToWriteIds = other688.txnToWriteIds;
=======
<<<<<<< HEAD
<<<<<<< HEAD
AllocateTableWriteIdsResponse::AllocateTableWriteIdsResponse(const AllocateTableWriteIdsResponse& other663) {
  txnToWriteIds = other663.txnToWriteIds;
}
AllocateTableWriteIdsResponse& AllocateTableWriteIdsResponse::operator=(const AllocateTableWriteIdsResponse& other664) {
  txnToWriteIds = other664.txnToWriteIds;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
CommitTxnRequest::CommitTxnRequest(const CommitTxnRequest& other621) {
  txnid = other621.txnid;
  replPolicy = other621.replPolicy;
  __isset = other621.__isset;
}
CommitTxnRequest& CommitTxnRequest::operator=(const CommitTxnRequest& other622) {
  txnid = other622.txnid;
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
  replPolicy = other622.replPolicy;
  __isset = other622.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
AllocateTableWriteIdsResponse::AllocateTableWriteIdsResponse(const AllocateTableWriteIdsResponse& other667) {
  txnToWriteIds = other667.txnToWriteIds;
}
AllocateTableWriteIdsResponse& AllocateTableWriteIdsResponse::operator=(const AllocateTableWriteIdsResponse& other668) {
  txnToWriteIds = other668.txnToWriteIds;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void AllocateTableWriteIdsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AllocateTableWriteIdsResponse(";
  out << "txnToWriteIds=" << to_string(txnToWriteIds);
  out << ")";
}


LockComponent::~LockComponent() throw() {
}


void LockComponent::__set_type(const LockType::type val) {
  this->type = val;
}

void LockComponent::__set_level(const LockLevel::type val) {
  this->level = val;
}

void LockComponent::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void LockComponent::__set_tablename(const std::string& val) {
  this->tablename = val;
__isset.tablename = true;
}

void LockComponent::__set_partitionname(const std::string& val) {
  this->partitionname = val;
__isset.partitionname = true;
}

void LockComponent::__set_operationType(const DataOperationType::type val) {
  this->operationType = val;
__isset.operationType = true;
}

void LockComponent::__set_isAcid(const bool val) {
  this->isAcid = val;
__isset.isAcid = true;
}

void LockComponent::__set_isDynamicPartitionWrite(const bool val) {
  this->isDynamicPartitionWrite = val;
__isset.isDynamicPartitionWrite = true;
}

uint32_t LockComponent::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;
  bool isset_level = false;
  bool isset_dbname = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast689;
          xfer += iprot->readI32(ecast689);
          this->type = (LockType::type)ecast689;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast665;
          xfer += iprot->readI32(ecast665);
          this->type = (LockType::type)ecast665;
=======
          int32_t ecast623;
          xfer += iprot->readI32(ecast623);
          this->type = (LockType::type)ecast623;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast627;
          xfer += iprot->readI32(ecast627);
          this->type = (LockType::type)ecast627;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast623;
          xfer += iprot->readI32(ecast623);
          this->type = (LockType::type)ecast623;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast627;
          xfer += iprot->readI32(ecast627);
          this->type = (LockType::type)ecast627;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast669;
          xfer += iprot->readI32(ecast669);
          this->type = (LockType::type)ecast669;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast690;
          xfer += iprot->readI32(ecast690);
          this->level = (LockLevel::type)ecast690;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast666;
          xfer += iprot->readI32(ecast666);
          this->level = (LockLevel::type)ecast666;
=======
          int32_t ecast624;
          xfer += iprot->readI32(ecast624);
          this->level = (LockLevel::type)ecast624;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast628;
          xfer += iprot->readI32(ecast628);
          this->level = (LockLevel::type)ecast628;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast624;
          xfer += iprot->readI32(ecast624);
          this->level = (LockLevel::type)ecast624;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast628;
          xfer += iprot->readI32(ecast628);
          this->level = (LockLevel::type)ecast628;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast670;
          xfer += iprot->readI32(ecast670);
          this->level = (LockLevel::type)ecast670;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          isset_level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbname);
          isset_dbname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tablename);
          this->__isset.tablename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->partitionname);
          this->__isset.partitionname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast691;
          xfer += iprot->readI32(ecast691);
          this->operationType = (DataOperationType::type)ecast691;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast667;
          xfer += iprot->readI32(ecast667);
          this->operationType = (DataOperationType::type)ecast667;
=======
          int32_t ecast625;
          xfer += iprot->readI32(ecast625);
          this->operationType = (DataOperationType::type)ecast625;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast629;
          xfer += iprot->readI32(ecast629);
          this->operationType = (DataOperationType::type)ecast629;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast625;
          xfer += iprot->readI32(ecast625);
          this->operationType = (DataOperationType::type)ecast625;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast629;
          xfer += iprot->readI32(ecast629);
          this->operationType = (DataOperationType::type)ecast629;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast671;
          xfer += iprot->readI32(ecast671);
          this->operationType = (DataOperationType::type)ecast671;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          this->__isset.operationType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isAcid);
          this->__isset.isAcid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isDynamicPartitionWrite);
          this->__isset.isDynamicPartitionWrite = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_level)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dbname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LockComponent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LockComponent");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbname", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->dbname);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tablename) {
    xfer += oprot->writeFieldBegin("tablename", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->tablename);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partitionname) {
    xfer += oprot->writeFieldBegin("partitionname", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->partitionname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.operationType) {
    xfer += oprot->writeFieldBegin("operationType", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32((int32_t)this->operationType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isAcid) {
    xfer += oprot->writeFieldBegin("isAcid", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->isAcid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isDynamicPartitionWrite) {
    xfer += oprot->writeFieldBegin("isDynamicPartitionWrite", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->isDynamicPartitionWrite);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LockComponent &a, LockComponent &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.level, b.level);
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partitionname, b.partitionname);
  swap(a.operationType, b.operationType);
  swap(a.isAcid, b.isAcid);
  swap(a.isDynamicPartitionWrite, b.isDynamicPartitionWrite);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
LockComponent::LockComponent(const LockComponent& other692) {
  type = other692.type;
  level = other692.level;
  dbname = other692.dbname;
  tablename = other692.tablename;
  partitionname = other692.partitionname;
  operationType = other692.operationType;
  isAcid = other692.isAcid;
  isDynamicPartitionWrite = other692.isDynamicPartitionWrite;
  __isset = other692.__isset;
}
LockComponent& LockComponent::operator=(const LockComponent& other693) {
  type = other693.type;
  level = other693.level;
  dbname = other693.dbname;
  tablename = other693.tablename;
  partitionname = other693.partitionname;
  operationType = other693.operationType;
  isAcid = other693.isAcid;
  isDynamicPartitionWrite = other693.isDynamicPartitionWrite;
  __isset = other693.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
LockComponent::LockComponent(const LockComponent& other668) {
  type = other668.type;
  level = other668.level;
  dbname = other668.dbname;
  tablename = other668.tablename;
  partitionname = other668.partitionname;
  operationType = other668.operationType;
  isAcid = other668.isAcid;
  isDynamicPartitionWrite = other668.isDynamicPartitionWrite;
  __isset = other668.__isset;
}
LockComponent& LockComponent::operator=(const LockComponent& other669) {
  type = other669.type;
  level = other669.level;
  dbname = other669.dbname;
  tablename = other669.tablename;
  partitionname = other669.partitionname;
  operationType = other669.operationType;
  isAcid = other669.isAcid;
  isDynamicPartitionWrite = other669.isDynamicPartitionWrite;
  __isset = other669.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
LockComponent::LockComponent(const LockComponent& other626) {
  type = other626.type;
  level = other626.level;
  dbname = other626.dbname;
  tablename = other626.tablename;
  partitionname = other626.partitionname;
  operationType = other626.operationType;
  isAcid = other626.isAcid;
  isDynamicPartitionWrite = other626.isDynamicPartitionWrite;
  __isset = other626.__isset;
}
LockComponent& LockComponent::operator=(const LockComponent& other627) {
  type = other627.type;
  level = other627.level;
  dbname = other627.dbname;
  tablename = other627.tablename;
  partitionname = other627.partitionname;
  operationType = other627.operationType;
  isAcid = other627.isAcid;
  isDynamicPartitionWrite = other627.isDynamicPartitionWrite;
  __isset = other627.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
LockComponent::LockComponent(const LockComponent& other630) {
  type = other630.type;
  level = other630.level;
  dbname = other630.dbname;
  tablename = other630.tablename;
  partitionname = other630.partitionname;
  operationType = other630.operationType;
  isAcid = other630.isAcid;
  isDynamicPartitionWrite = other630.isDynamicPartitionWrite;
  __isset = other630.__isset;
}
LockComponent& LockComponent::operator=(const LockComponent& other631) {
  type = other631.type;
  level = other631.level;
  dbname = other631.dbname;
  tablename = other631.tablename;
  partitionname = other631.partitionname;
  operationType = other631.operationType;
  isAcid = other631.isAcid;
  isDynamicPartitionWrite = other631.isDynamicPartitionWrite;
  __isset = other631.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
LockComponent::LockComponent(const LockComponent& other672) {
  type = other672.type;
  level = other672.level;
  dbname = other672.dbname;
  tablename = other672.tablename;
  partitionname = other672.partitionname;
  operationType = other672.operationType;
  isAcid = other672.isAcid;
  isDynamicPartitionWrite = other672.isDynamicPartitionWrite;
  __isset = other672.__isset;
}
LockComponent& LockComponent::operator=(const LockComponent& other673) {
  type = other673.type;
  level = other673.level;
  dbname = other673.dbname;
  tablename = other673.tablename;
  partitionname = other673.partitionname;
  operationType = other673.operationType;
  isAcid = other673.isAcid;
  isDynamicPartitionWrite = other673.isDynamicPartitionWrite;
  __isset = other673.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void LockComponent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LockComponent(";
  out << "type=" << to_string(type);
  out << ", " << "level=" << to_string(level);
  out << ", " << "dbname=" << to_string(dbname);
  out << ", " << "tablename="; (__isset.tablename ? (out << to_string(tablename)) : (out << "<null>"));
  out << ", " << "partitionname="; (__isset.partitionname ? (out << to_string(partitionname)) : (out << "<null>"));
  out << ", " << "operationType="; (__isset.operationType ? (out << to_string(operationType)) : (out << "<null>"));
  out << ", " << "isAcid="; (__isset.isAcid ? (out << to_string(isAcid)) : (out << "<null>"));
  out << ", " << "isDynamicPartitionWrite="; (__isset.isDynamicPartitionWrite ? (out << to_string(isDynamicPartitionWrite)) : (out << "<null>"));
  out << ")";
}


LockRequest::~LockRequest() throw() {
}


void LockRequest::__set_component(const std::vector<LockComponent> & val) {
  this->component = val;
}

void LockRequest::__set_txnid(const int64_t val) {
  this->txnid = val;
__isset.txnid = true;
}

void LockRequest::__set_user(const std::string& val) {
  this->user = val;
}

void LockRequest::__set_hostname(const std::string& val) {
  this->hostname = val;
}

void LockRequest::__set_agentInfo(const std::string& val) {
  this->agentInfo = val;
__isset.agentInfo = true;
}

uint32_t LockRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_component = false;
  bool isset_user = false;
  bool isset_hostname = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->component.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size694;
            ::apache::thrift::protocol::TType _etype697;
            xfer += iprot->readListBegin(_etype697, _size694);
            this->component.resize(_size694);
            uint32_t _i698;
            for (_i698 = 0; _i698 < _size694; ++_i698)
            {
              xfer += this->component[_i698].read(iprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size670;
            ::apache::thrift::protocol::TType _etype673;
            xfer += iprot->readListBegin(_etype673, _size670);
            this->component.resize(_size670);
            uint32_t _i674;
            for (_i674 = 0; _i674 < _size670; ++_i674)
            {
              xfer += this->component[_i674].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size628;
            ::apache::thrift::protocol::TType _etype631;
            xfer += iprot->readListBegin(_etype631, _size628);
            this->component.resize(_size628);
            uint32_t _i632;
            for (_i632 = 0; _i632 < _size628; ++_i632)
<<<<<<< HEAD
            {
              xfer += this->component[_i632].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size632;
            ::apache::thrift::protocol::TType _etype635;
            xfer += iprot->readListBegin(_etype635, _size632);
            this->component.resize(_size632);
            uint32_t _i636;
            for (_i636 = 0; _i636 < _size632; ++_i636)
<<<<<<< HEAD
            {
              xfer += this->component[_i636].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              xfer += this->component[_i632].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += this->component[_i636].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size674;
            ::apache::thrift::protocol::TType _etype677;
            xfer += iprot->readListBegin(_etype677, _size674);
            this->component.resize(_size674);
            uint32_t _i678;
            for (_i678 = 0; _i678 < _size674; ++_i678)
            {
              xfer += this->component[_i678].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          isset_component = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          this->__isset.txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user);
          isset_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hostname);
          isset_hostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->agentInfo);
          this->__isset.agentInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_component)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hostname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LockRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LockRequest");

  xfer += oprot->writeFieldBegin("component", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->component.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<LockComponent> ::const_iterator _iter699;
    for (_iter699 = this->component.begin(); _iter699 != this->component.end(); ++_iter699)
    {
      xfer += (*_iter699).write(oprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<LockComponent> ::const_iterator _iter675;
    for (_iter675 = this->component.begin(); _iter675 != this->component.end(); ++_iter675)
    {
      xfer += (*_iter675).write(oprot);
=======
    std::vector<LockComponent> ::const_iterator _iter633;
    for (_iter633 = this->component.begin(); _iter633 != this->component.end(); ++_iter633)
    {
      xfer += (*_iter633).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<LockComponent> ::const_iterator _iter637;
    for (_iter637 = this->component.begin(); _iter637 != this->component.end(); ++_iter637)
    {
      xfer += (*_iter637).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<LockComponent> ::const_iterator _iter633;
    for (_iter633 = this->component.begin(); _iter633 != this->component.end(); ++_iter633)
    {
      xfer += (*_iter633).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<LockComponent> ::const_iterator _iter637;
    for (_iter637 = this->component.begin(); _iter637 != this->component.end(); ++_iter637)
    {
      xfer += (*_iter637).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<LockComponent> ::const_iterator _iter679;
    for (_iter679 = this->component.begin(); _iter679 != this->component.end(); ++_iter679)
    {
      xfer += (*_iter679).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.txnid) {
    xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->txnid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->user);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostname", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->hostname);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.agentInfo) {
    xfer += oprot->writeFieldBegin("agentInfo", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->agentInfo);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LockRequest &a, LockRequest &b) {
  using ::std::swap;
  swap(a.component, b.component);
  swap(a.txnid, b.txnid);
  swap(a.user, b.user);
  swap(a.hostname, b.hostname);
  swap(a.agentInfo, b.agentInfo);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
LockRequest::LockRequest(const LockRequest& other700) {
  component = other700.component;
  txnid = other700.txnid;
  user = other700.user;
  hostname = other700.hostname;
  agentInfo = other700.agentInfo;
  __isset = other700.__isset;
}
LockRequest& LockRequest::operator=(const LockRequest& other701) {
  component = other701.component;
  txnid = other701.txnid;
  user = other701.user;
  hostname = other701.hostname;
  agentInfo = other701.agentInfo;
  __isset = other701.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
LockRequest::LockRequest(const LockRequest& other676) {
  component = other676.component;
  txnid = other676.txnid;
  user = other676.user;
  hostname = other676.hostname;
  agentInfo = other676.agentInfo;
  __isset = other676.__isset;
}
LockRequest& LockRequest::operator=(const LockRequest& other677) {
  component = other677.component;
  txnid = other677.txnid;
  user = other677.user;
  hostname = other677.hostname;
  agentInfo = other677.agentInfo;
  __isset = other677.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
LockRequest::LockRequest(const LockRequest& other634) {
  component = other634.component;
  txnid = other634.txnid;
  user = other634.user;
  hostname = other634.hostname;
  agentInfo = other634.agentInfo;
  __isset = other634.__isset;
}
LockRequest& LockRequest::operator=(const LockRequest& other635) {
  component = other635.component;
  txnid = other635.txnid;
  user = other635.user;
  hostname = other635.hostname;
  agentInfo = other635.agentInfo;
  __isset = other635.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
LockRequest::LockRequest(const LockRequest& other638) {
  component = other638.component;
  txnid = other638.txnid;
  user = other638.user;
  hostname = other638.hostname;
  agentInfo = other638.agentInfo;
  __isset = other638.__isset;
}
LockRequest& LockRequest::operator=(const LockRequest& other639) {
  component = other639.component;
  txnid = other639.txnid;
  user = other639.user;
  hostname = other639.hostname;
  agentInfo = other639.agentInfo;
  __isset = other639.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
LockRequest::LockRequest(const LockRequest& other680) {
  component = other680.component;
  txnid = other680.txnid;
  user = other680.user;
  hostname = other680.hostname;
  agentInfo = other680.agentInfo;
  __isset = other680.__isset;
}
LockRequest& LockRequest::operator=(const LockRequest& other681) {
  component = other681.component;
  txnid = other681.txnid;
  user = other681.user;
  hostname = other681.hostname;
  agentInfo = other681.agentInfo;
  __isset = other681.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void LockRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LockRequest(";
  out << "component=" << to_string(component);
  out << ", " << "txnid="; (__isset.txnid ? (out << to_string(txnid)) : (out << "<null>"));
  out << ", " << "user=" << to_string(user);
  out << ", " << "hostname=" << to_string(hostname);
  out << ", " << "agentInfo="; (__isset.agentInfo ? (out << to_string(agentInfo)) : (out << "<null>"));
  out << ")";
}


LockResponse::~LockResponse() throw() {
}


void LockResponse::__set_lockid(const int64_t val) {
  this->lockid = val;
}

void LockResponse::__set_state(const LockState::type val) {
  this->state = val;
}

uint32_t LockResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_lockid = false;
  bool isset_state = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lockid);
          isset_lockid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast702;
          xfer += iprot->readI32(ecast702);
          this->state = (LockState::type)ecast702;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast678;
          xfer += iprot->readI32(ecast678);
          this->state = (LockState::type)ecast678;
=======
          int32_t ecast636;
          xfer += iprot->readI32(ecast636);
          this->state = (LockState::type)ecast636;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast640;
          xfer += iprot->readI32(ecast640);
          this->state = (LockState::type)ecast640;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast636;
          xfer += iprot->readI32(ecast636);
          this->state = (LockState::type)ecast636;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast640;
          xfer += iprot->readI32(ecast640);
          this->state = (LockState::type)ecast640;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast682;
          xfer += iprot->readI32(ecast682);
          this->state = (LockState::type)ecast682;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          isset_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_lockid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t LockResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LockResponse");

  xfer += oprot->writeFieldBegin("lockid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lockid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LockResponse &a, LockResponse &b) {
  using ::std::swap;
  swap(a.lockid, b.lockid);
  swap(a.state, b.state);
}

<<<<<<< HEAD
<<<<<<< HEAD
LockResponse::LockResponse(const LockResponse& other703) {
  lockid = other703.lockid;
  state = other703.state;
}
LockResponse& LockResponse::operator=(const LockResponse& other704) {
  lockid = other704.lockid;
  state = other704.state;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
LockResponse::LockResponse(const LockResponse& other679) {
  lockid = other679.lockid;
  state = other679.state;
}
LockResponse& LockResponse::operator=(const LockResponse& other680) {
  lockid = other680.lockid;
  state = other680.state;
=======
LockResponse::LockResponse(const LockResponse& other637) {
  lockid = other637.lockid;
  state = other637.state;
}
LockResponse& LockResponse::operator=(const LockResponse& other638) {
  lockid = other638.lockid;
  state = other638.state;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
LockResponse::LockResponse(const LockResponse& other641) {
  lockid = other641.lockid;
  state = other641.state;
}
LockResponse& LockResponse::operator=(const LockResponse& other642) {
  lockid = other642.lockid;
  state = other642.state;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
LockResponse::LockResponse(const LockResponse& other637) {
  lockid = other637.lockid;
  state = other637.state;
}
LockResponse& LockResponse::operator=(const LockResponse& other638) {
  lockid = other638.lockid;
  state = other638.state;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
LockResponse::LockResponse(const LockResponse& other641) {
  lockid = other641.lockid;
  state = other641.state;
}
LockResponse& LockResponse::operator=(const LockResponse& other642) {
  lockid = other642.lockid;
  state = other642.state;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
LockResponse::LockResponse(const LockResponse& other683) {
  lockid = other683.lockid;
  state = other683.state;
}
LockResponse& LockResponse::operator=(const LockResponse& other684) {
  lockid = other684.lockid;
  state = other684.state;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void LockResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LockResponse(";
  out << "lockid=" << to_string(lockid);
  out << ", " << "state=" << to_string(state);
  out << ")";
}


CheckLockRequest::~CheckLockRequest() throw() {
}


void CheckLockRequest::__set_lockid(const int64_t val) {
  this->lockid = val;
}

void CheckLockRequest::__set_txnid(const int64_t val) {
  this->txnid = val;
__isset.txnid = true;
}

void CheckLockRequest::__set_elapsed_ms(const int64_t val) {
  this->elapsed_ms = val;
__isset.elapsed_ms = true;
}

uint32_t CheckLockRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_lockid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lockid);
          isset_lockid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          this->__isset.txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->elapsed_ms);
          this->__isset.elapsed_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_lockid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CheckLockRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CheckLockRequest");

  xfer += oprot->writeFieldBegin("lockid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lockid);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.txnid) {
    xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->txnid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.elapsed_ms) {
    xfer += oprot->writeFieldBegin("elapsed_ms", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->elapsed_ms);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CheckLockRequest &a, CheckLockRequest &b) {
  using ::std::swap;
  swap(a.lockid, b.lockid);
  swap(a.txnid, b.txnid);
  swap(a.elapsed_ms, b.elapsed_ms);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
CheckLockRequest::CheckLockRequest(const CheckLockRequest& other705) {
  lockid = other705.lockid;
  txnid = other705.txnid;
  elapsed_ms = other705.elapsed_ms;
  __isset = other705.__isset;
}
CheckLockRequest& CheckLockRequest::operator=(const CheckLockRequest& other706) {
  lockid = other706.lockid;
  txnid = other706.txnid;
  elapsed_ms = other706.elapsed_ms;
  __isset = other706.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CheckLockRequest::CheckLockRequest(const CheckLockRequest& other681) {
  lockid = other681.lockid;
  txnid = other681.txnid;
  elapsed_ms = other681.elapsed_ms;
  __isset = other681.__isset;
}
CheckLockRequest& CheckLockRequest::operator=(const CheckLockRequest& other682) {
  lockid = other682.lockid;
  txnid = other682.txnid;
  elapsed_ms = other682.elapsed_ms;
  __isset = other682.__isset;
=======
CheckLockRequest::CheckLockRequest(const CheckLockRequest& other639) {
  lockid = other639.lockid;
  txnid = other639.txnid;
  elapsed_ms = other639.elapsed_ms;
  __isset = other639.__isset;
}
=======
CheckLockRequest::CheckLockRequest(const CheckLockRequest& other639) {
  lockid = other639.lockid;
  txnid = other639.txnid;
  elapsed_ms = other639.elapsed_ms;
  __isset = other639.__isset;
}
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
CheckLockRequest& CheckLockRequest::operator=(const CheckLockRequest& other640) {
  lockid = other640.lockid;
  txnid = other640.txnid;
  elapsed_ms = other640.elapsed_ms;
  __isset = other640.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CheckLockRequest::CheckLockRequest(const CheckLockRequest& other643) {
  lockid = other643.lockid;
  txnid = other643.txnid;
  elapsed_ms = other643.elapsed_ms;
  __isset = other643.__isset;
}
=======
CheckLockRequest::CheckLockRequest(const CheckLockRequest& other643) {
  lockid = other643.lockid;
  txnid = other643.txnid;
  elapsed_ms = other643.elapsed_ms;
  __isset = other643.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
CheckLockRequest& CheckLockRequest::operator=(const CheckLockRequest& other644) {
  lockid = other644.lockid;
  txnid = other644.txnid;
  elapsed_ms = other644.elapsed_ms;
  __isset = other644.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
CheckLockRequest::CheckLockRequest(const CheckLockRequest& other685) {
  lockid = other685.lockid;
  txnid = other685.txnid;
  elapsed_ms = other685.elapsed_ms;
  __isset = other685.__isset;
}
CheckLockRequest& CheckLockRequest::operator=(const CheckLockRequest& other686) {
  lockid = other686.lockid;
  txnid = other686.txnid;
  elapsed_ms = other686.elapsed_ms;
  __isset = other686.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void CheckLockRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CheckLockRequest(";
  out << "lockid=" << to_string(lockid);
  out << ", " << "txnid="; (__isset.txnid ? (out << to_string(txnid)) : (out << "<null>"));
  out << ", " << "elapsed_ms="; (__isset.elapsed_ms ? (out << to_string(elapsed_ms)) : (out << "<null>"));
  out << ")";
}


UnlockRequest::~UnlockRequest() throw() {
}


void UnlockRequest::__set_lockid(const int64_t val) {
  this->lockid = val;
}

uint32_t UnlockRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_lockid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lockid);
          isset_lockid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_lockid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t UnlockRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UnlockRequest");

  xfer += oprot->writeFieldBegin("lockid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lockid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UnlockRequest &a, UnlockRequest &b) {
  using ::std::swap;
  swap(a.lockid, b.lockid);
}

<<<<<<< HEAD
<<<<<<< HEAD
UnlockRequest::UnlockRequest(const UnlockRequest& other707) {
  lockid = other707.lockid;
}
UnlockRequest& UnlockRequest::operator=(const UnlockRequest& other708) {
  lockid = other708.lockid;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
UnlockRequest::UnlockRequest(const UnlockRequest& other683) {
  lockid = other683.lockid;
}
UnlockRequest& UnlockRequest::operator=(const UnlockRequest& other684) {
  lockid = other684.lockid;
=======
UnlockRequest::UnlockRequest(const UnlockRequest& other641) {
  lockid = other641.lockid;
}
UnlockRequest& UnlockRequest::operator=(const UnlockRequest& other642) {
  lockid = other642.lockid;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
UnlockRequest::UnlockRequest(const UnlockRequest& other645) {
  lockid = other645.lockid;
}
UnlockRequest& UnlockRequest::operator=(const UnlockRequest& other646) {
  lockid = other646.lockid;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
UnlockRequest::UnlockRequest(const UnlockRequest& other641) {
  lockid = other641.lockid;
}
UnlockRequest& UnlockRequest::operator=(const UnlockRequest& other642) {
  lockid = other642.lockid;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
UnlockRequest::UnlockRequest(const UnlockRequest& other645) {
  lockid = other645.lockid;
}
UnlockRequest& UnlockRequest::operator=(const UnlockRequest& other646) {
  lockid = other646.lockid;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
UnlockRequest::UnlockRequest(const UnlockRequest& other687) {
  lockid = other687.lockid;
}
UnlockRequest& UnlockRequest::operator=(const UnlockRequest& other688) {
  lockid = other688.lockid;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void UnlockRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UnlockRequest(";
  out << "lockid=" << to_string(lockid);
  out << ")";
}


ShowLocksRequest::~ShowLocksRequest() throw() {
}


void ShowLocksRequest::__set_dbname(const std::string& val) {
  this->dbname = val;
__isset.dbname = true;
}

void ShowLocksRequest::__set_tablename(const std::string& val) {
  this->tablename = val;
__isset.tablename = true;
}

void ShowLocksRequest::__set_partname(const std::string& val) {
  this->partname = val;
__isset.partname = true;
}

void ShowLocksRequest::__set_isExtended(const bool val) {
  this->isExtended = val;
__isset.isExtended = true;
}

uint32_t ShowLocksRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbname);
          this->__isset.dbname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tablename);
          this->__isset.tablename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->partname);
          this->__isset.partname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isExtended);
          this->__isset.isExtended = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowLocksRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowLocksRequest");

  if (this->__isset.dbname) {
    xfer += oprot->writeFieldBegin("dbname", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->dbname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tablename) {
    xfer += oprot->writeFieldBegin("tablename", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->tablename);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partname) {
    xfer += oprot->writeFieldBegin("partname", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->partname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isExtended) {
    xfer += oprot->writeFieldBegin("isExtended", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->isExtended);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowLocksRequest &a, ShowLocksRequest &b) {
  using ::std::swap;
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partname, b.partname);
  swap(a.isExtended, b.isExtended);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
ShowLocksRequest::ShowLocksRequest(const ShowLocksRequest& other709) {
  dbname = other709.dbname;
  tablename = other709.tablename;
  partname = other709.partname;
  isExtended = other709.isExtended;
  __isset = other709.__isset;
}
ShowLocksRequest& ShowLocksRequest::operator=(const ShowLocksRequest& other710) {
  dbname = other710.dbname;
  tablename = other710.tablename;
  partname = other710.partname;
  isExtended = other710.isExtended;
  __isset = other710.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ShowLocksRequest::ShowLocksRequest(const ShowLocksRequest& other685) {
  dbname = other685.dbname;
  tablename = other685.tablename;
  partname = other685.partname;
  isExtended = other685.isExtended;
  __isset = other685.__isset;
}
ShowLocksRequest& ShowLocksRequest::operator=(const ShowLocksRequest& other686) {
  dbname = other686.dbname;
  tablename = other686.tablename;
  partname = other686.partname;
  isExtended = other686.isExtended;
  __isset = other686.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
ShowLocksRequest::ShowLocksRequest(const ShowLocksRequest& other643) {
  dbname = other643.dbname;
  tablename = other643.tablename;
  partname = other643.partname;
  isExtended = other643.isExtended;
  __isset = other643.__isset;
}
ShowLocksRequest& ShowLocksRequest::operator=(const ShowLocksRequest& other644) {
  dbname = other644.dbname;
  tablename = other644.tablename;
  partname = other644.partname;
  isExtended = other644.isExtended;
  __isset = other644.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ShowLocksRequest::ShowLocksRequest(const ShowLocksRequest& other647) {
  dbname = other647.dbname;
  tablename = other647.tablename;
  partname = other647.partname;
  isExtended = other647.isExtended;
  __isset = other647.__isset;
}
=======
ShowLocksRequest::ShowLocksRequest(const ShowLocksRequest& other647) {
  dbname = other647.dbname;
  tablename = other647.tablename;
  partname = other647.partname;
  isExtended = other647.isExtended;
  __isset = other647.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
ShowLocksRequest& ShowLocksRequest::operator=(const ShowLocksRequest& other648) {
  dbname = other648.dbname;
  tablename = other648.tablename;
  partname = other648.partname;
  isExtended = other648.isExtended;
  __isset = other648.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
ShowLocksRequest::ShowLocksRequest(const ShowLocksRequest& other689) {
  dbname = other689.dbname;
  tablename = other689.tablename;
  partname = other689.partname;
  isExtended = other689.isExtended;
  __isset = other689.__isset;
}
ShowLocksRequest& ShowLocksRequest::operator=(const ShowLocksRequest& other690) {
  dbname = other690.dbname;
  tablename = other690.tablename;
  partname = other690.partname;
  isExtended = other690.isExtended;
  __isset = other690.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void ShowLocksRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowLocksRequest(";
  out << "dbname="; (__isset.dbname ? (out << to_string(dbname)) : (out << "<null>"));
  out << ", " << "tablename="; (__isset.tablename ? (out << to_string(tablename)) : (out << "<null>"));
  out << ", " << "partname="; (__isset.partname ? (out << to_string(partname)) : (out << "<null>"));
  out << ", " << "isExtended="; (__isset.isExtended ? (out << to_string(isExtended)) : (out << "<null>"));
  out << ")";
}


ShowLocksResponseElement::~ShowLocksResponseElement() throw() {
}


void ShowLocksResponseElement::__set_lockid(const int64_t val) {
  this->lockid = val;
}

void ShowLocksResponseElement::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void ShowLocksResponseElement::__set_tablename(const std::string& val) {
  this->tablename = val;
__isset.tablename = true;
}

void ShowLocksResponseElement::__set_partname(const std::string& val) {
  this->partname = val;
__isset.partname = true;
}

void ShowLocksResponseElement::__set_state(const LockState::type val) {
  this->state = val;
}

void ShowLocksResponseElement::__set_type(const LockType::type val) {
  this->type = val;
}

void ShowLocksResponseElement::__set_txnid(const int64_t val) {
  this->txnid = val;
__isset.txnid = true;
}

void ShowLocksResponseElement::__set_lastheartbeat(const int64_t val) {
  this->lastheartbeat = val;
}

void ShowLocksResponseElement::__set_acquiredat(const int64_t val) {
  this->acquiredat = val;
__isset.acquiredat = true;
}

void ShowLocksResponseElement::__set_user(const std::string& val) {
  this->user = val;
}

void ShowLocksResponseElement::__set_hostname(const std::string& val) {
  this->hostname = val;
}

void ShowLocksResponseElement::__set_heartbeatCount(const int32_t val) {
  this->heartbeatCount = val;
__isset.heartbeatCount = true;
}

void ShowLocksResponseElement::__set_agentInfo(const std::string& val) {
  this->agentInfo = val;
__isset.agentInfo = true;
}

void ShowLocksResponseElement::__set_blockedByExtId(const int64_t val) {
  this->blockedByExtId = val;
__isset.blockedByExtId = true;
}

void ShowLocksResponseElement::__set_blockedByIntId(const int64_t val) {
  this->blockedByIntId = val;
__isset.blockedByIntId = true;
}

void ShowLocksResponseElement::__set_lockIdInternal(const int64_t val) {
  this->lockIdInternal = val;
__isset.lockIdInternal = true;
}

uint32_t ShowLocksResponseElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_lockid = false;
  bool isset_dbname = false;
  bool isset_state = false;
  bool isset_type = false;
  bool isset_lastheartbeat = false;
  bool isset_user = false;
  bool isset_hostname = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lockid);
          isset_lockid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbname);
          isset_dbname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tablename);
          this->__isset.tablename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->partname);
          this->__isset.partname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast711;
          xfer += iprot->readI32(ecast711);
          this->state = (LockState::type)ecast711;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast687;
          xfer += iprot->readI32(ecast687);
          this->state = (LockState::type)ecast687;
=======
          int32_t ecast645;
          xfer += iprot->readI32(ecast645);
          this->state = (LockState::type)ecast645;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast649;
          xfer += iprot->readI32(ecast649);
          this->state = (LockState::type)ecast649;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast645;
          xfer += iprot->readI32(ecast645);
          this->state = (LockState::type)ecast645;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast649;
          xfer += iprot->readI32(ecast649);
          this->state = (LockState::type)ecast649;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast691;
          xfer += iprot->readI32(ecast691);
          this->state = (LockState::type)ecast691;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          isset_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast712;
          xfer += iprot->readI32(ecast712);
          this->type = (LockType::type)ecast712;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast688;
          xfer += iprot->readI32(ecast688);
          this->type = (LockType::type)ecast688;
=======
          int32_t ecast646;
          xfer += iprot->readI32(ecast646);
          this->type = (LockType::type)ecast646;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast650;
          xfer += iprot->readI32(ecast650);
          this->type = (LockType::type)ecast650;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast646;
          xfer += iprot->readI32(ecast646);
          this->type = (LockType::type)ecast646;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast650;
          xfer += iprot->readI32(ecast650);
          this->type = (LockType::type)ecast650;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast692;
          xfer += iprot->readI32(ecast692);
          this->type = (LockType::type)ecast692;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          this->__isset.txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastheartbeat);
          isset_lastheartbeat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->acquiredat);
          this->__isset.acquiredat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user);
          isset_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hostname);
          isset_hostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->heartbeatCount);
          this->__isset.heartbeatCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->agentInfo);
          this->__isset.agentInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->blockedByExtId);
          this->__isset.blockedByExtId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->blockedByIntId);
          this->__isset.blockedByIntId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lockIdInternal);
          this->__isset.lockIdInternal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_lockid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dbname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lastheartbeat)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hostname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ShowLocksResponseElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowLocksResponseElement");

  xfer += oprot->writeFieldBegin("lockid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lockid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbname", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dbname);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tablename) {
    xfer += oprot->writeFieldBegin("tablename", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->tablename);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partname) {
    xfer += oprot->writeFieldBegin("partname", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->partname);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.txnid) {
    xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->txnid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("lastheartbeat", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->lastheartbeat);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.acquiredat) {
    xfer += oprot->writeFieldBegin("acquiredat", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->acquiredat);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->user);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hostname", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->hostname);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.heartbeatCount) {
    xfer += oprot->writeFieldBegin("heartbeatCount", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->heartbeatCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.agentInfo) {
    xfer += oprot->writeFieldBegin("agentInfo", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->agentInfo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.blockedByExtId) {
    xfer += oprot->writeFieldBegin("blockedByExtId", ::apache::thrift::protocol::T_I64, 14);
    xfer += oprot->writeI64(this->blockedByExtId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.blockedByIntId) {
    xfer += oprot->writeFieldBegin("blockedByIntId", ::apache::thrift::protocol::T_I64, 15);
    xfer += oprot->writeI64(this->blockedByIntId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lockIdInternal) {
    xfer += oprot->writeFieldBegin("lockIdInternal", ::apache::thrift::protocol::T_I64, 16);
    xfer += oprot->writeI64(this->lockIdInternal);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowLocksResponseElement &a, ShowLocksResponseElement &b) {
  using ::std::swap;
  swap(a.lockid, b.lockid);
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partname, b.partname);
  swap(a.state, b.state);
  swap(a.type, b.type);
  swap(a.txnid, b.txnid);
  swap(a.lastheartbeat, b.lastheartbeat);
  swap(a.acquiredat, b.acquiredat);
  swap(a.user, b.user);
  swap(a.hostname, b.hostname);
  swap(a.heartbeatCount, b.heartbeatCount);
  swap(a.agentInfo, b.agentInfo);
  swap(a.blockedByExtId, b.blockedByExtId);
  swap(a.blockedByIntId, b.blockedByIntId);
  swap(a.lockIdInternal, b.lockIdInternal);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
ShowLocksResponseElement::ShowLocksResponseElement(const ShowLocksResponseElement& other713) {
  lockid = other713.lockid;
  dbname = other713.dbname;
  tablename = other713.tablename;
  partname = other713.partname;
  state = other713.state;
  type = other713.type;
  txnid = other713.txnid;
  lastheartbeat = other713.lastheartbeat;
  acquiredat = other713.acquiredat;
  user = other713.user;
  hostname = other713.hostname;
  heartbeatCount = other713.heartbeatCount;
  agentInfo = other713.agentInfo;
  blockedByExtId = other713.blockedByExtId;
  blockedByIntId = other713.blockedByIntId;
  lockIdInternal = other713.lockIdInternal;
  __isset = other713.__isset;
}
ShowLocksResponseElement& ShowLocksResponseElement::operator=(const ShowLocksResponseElement& other714) {
  lockid = other714.lockid;
  dbname = other714.dbname;
  tablename = other714.tablename;
  partname = other714.partname;
  state = other714.state;
  type = other714.type;
  txnid = other714.txnid;
  lastheartbeat = other714.lastheartbeat;
  acquiredat = other714.acquiredat;
  user = other714.user;
  hostname = other714.hostname;
  heartbeatCount = other714.heartbeatCount;
  agentInfo = other714.agentInfo;
  blockedByExtId = other714.blockedByExtId;
  blockedByIntId = other714.blockedByIntId;
  lockIdInternal = other714.lockIdInternal;
  __isset = other714.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ShowLocksResponseElement::ShowLocksResponseElement(const ShowLocksResponseElement& other689) {
  lockid = other689.lockid;
  dbname = other689.dbname;
  tablename = other689.tablename;
  partname = other689.partname;
  state = other689.state;
  type = other689.type;
  txnid = other689.txnid;
  lastheartbeat = other689.lastheartbeat;
  acquiredat = other689.acquiredat;
  user = other689.user;
  hostname = other689.hostname;
  heartbeatCount = other689.heartbeatCount;
  agentInfo = other689.agentInfo;
  blockedByExtId = other689.blockedByExtId;
  blockedByIntId = other689.blockedByIntId;
  lockIdInternal = other689.lockIdInternal;
  __isset = other689.__isset;
}
ShowLocksResponseElement& ShowLocksResponseElement::operator=(const ShowLocksResponseElement& other690) {
  lockid = other690.lockid;
  dbname = other690.dbname;
  tablename = other690.tablename;
  partname = other690.partname;
  state = other690.state;
  type = other690.type;
  txnid = other690.txnid;
  lastheartbeat = other690.lastheartbeat;
  acquiredat = other690.acquiredat;
  user = other690.user;
  hostname = other690.hostname;
  heartbeatCount = other690.heartbeatCount;
  agentInfo = other690.agentInfo;
  blockedByExtId = other690.blockedByExtId;
  blockedByIntId = other690.blockedByIntId;
  lockIdInternal = other690.lockIdInternal;
  __isset = other690.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
ShowLocksResponseElement::ShowLocksResponseElement(const ShowLocksResponseElement& other647) {
  lockid = other647.lockid;
  dbname = other647.dbname;
  tablename = other647.tablename;
  partname = other647.partname;
  state = other647.state;
  type = other647.type;
  txnid = other647.txnid;
  lastheartbeat = other647.lastheartbeat;
  acquiredat = other647.acquiredat;
  user = other647.user;
  hostname = other647.hostname;
  heartbeatCount = other647.heartbeatCount;
  agentInfo = other647.agentInfo;
  blockedByExtId = other647.blockedByExtId;
  blockedByIntId = other647.blockedByIntId;
  lockIdInternal = other647.lockIdInternal;
  __isset = other647.__isset;
}
ShowLocksResponseElement& ShowLocksResponseElement::operator=(const ShowLocksResponseElement& other648) {
  lockid = other648.lockid;
  dbname = other648.dbname;
  tablename = other648.tablename;
  partname = other648.partname;
  state = other648.state;
  type = other648.type;
  txnid = other648.txnid;
  lastheartbeat = other648.lastheartbeat;
  acquiredat = other648.acquiredat;
  user = other648.user;
  hostname = other648.hostname;
  heartbeatCount = other648.heartbeatCount;
  agentInfo = other648.agentInfo;
  blockedByExtId = other648.blockedByExtId;
  blockedByIntId = other648.blockedByIntId;
  lockIdInternal = other648.lockIdInternal;
  __isset = other648.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
ShowLocksResponseElement::ShowLocksResponseElement(const ShowLocksResponseElement& other651) {
  lockid = other651.lockid;
  dbname = other651.dbname;
  tablename = other651.tablename;
  partname = other651.partname;
  state = other651.state;
  type = other651.type;
  txnid = other651.txnid;
  lastheartbeat = other651.lastheartbeat;
  acquiredat = other651.acquiredat;
  user = other651.user;
  hostname = other651.hostname;
  heartbeatCount = other651.heartbeatCount;
  agentInfo = other651.agentInfo;
  blockedByExtId = other651.blockedByExtId;
  blockedByIntId = other651.blockedByIntId;
  lockIdInternal = other651.lockIdInternal;
  __isset = other651.__isset;
}
ShowLocksResponseElement& ShowLocksResponseElement::operator=(const ShowLocksResponseElement& other652) {
  lockid = other652.lockid;
  dbname = other652.dbname;
  tablename = other652.tablename;
  partname = other652.partname;
  state = other652.state;
  type = other652.type;
  txnid = other652.txnid;
  lastheartbeat = other652.lastheartbeat;
  acquiredat = other652.acquiredat;
  user = other652.user;
  hostname = other652.hostname;
  heartbeatCount = other652.heartbeatCount;
  agentInfo = other652.agentInfo;
  blockedByExtId = other652.blockedByExtId;
  blockedByIntId = other652.blockedByIntId;
  lockIdInternal = other652.lockIdInternal;
  __isset = other652.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
ShowLocksResponseElement::ShowLocksResponseElement(const ShowLocksResponseElement& other693) {
  lockid = other693.lockid;
  dbname = other693.dbname;
  tablename = other693.tablename;
  partname = other693.partname;
  state = other693.state;
  type = other693.type;
  txnid = other693.txnid;
  lastheartbeat = other693.lastheartbeat;
  acquiredat = other693.acquiredat;
  user = other693.user;
  hostname = other693.hostname;
  heartbeatCount = other693.heartbeatCount;
  agentInfo = other693.agentInfo;
  blockedByExtId = other693.blockedByExtId;
  blockedByIntId = other693.blockedByIntId;
  lockIdInternal = other693.lockIdInternal;
  __isset = other693.__isset;
}
ShowLocksResponseElement& ShowLocksResponseElement::operator=(const ShowLocksResponseElement& other694) {
  lockid = other694.lockid;
  dbname = other694.dbname;
  tablename = other694.tablename;
  partname = other694.partname;
  state = other694.state;
  type = other694.type;
  txnid = other694.txnid;
  lastheartbeat = other694.lastheartbeat;
  acquiredat = other694.acquiredat;
  user = other694.user;
  hostname = other694.hostname;
  heartbeatCount = other694.heartbeatCount;
  agentInfo = other694.agentInfo;
  blockedByExtId = other694.blockedByExtId;
  blockedByIntId = other694.blockedByIntId;
  lockIdInternal = other694.lockIdInternal;
  __isset = other694.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void ShowLocksResponseElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowLocksResponseElement(";
  out << "lockid=" << to_string(lockid);
  out << ", " << "dbname=" << to_string(dbname);
  out << ", " << "tablename="; (__isset.tablename ? (out << to_string(tablename)) : (out << "<null>"));
  out << ", " << "partname="; (__isset.partname ? (out << to_string(partname)) : (out << "<null>"));
  out << ", " << "state=" << to_string(state);
  out << ", " << "type=" << to_string(type);
  out << ", " << "txnid="; (__isset.txnid ? (out << to_string(txnid)) : (out << "<null>"));
  out << ", " << "lastheartbeat=" << to_string(lastheartbeat);
  out << ", " << "acquiredat="; (__isset.acquiredat ? (out << to_string(acquiredat)) : (out << "<null>"));
  out << ", " << "user=" << to_string(user);
  out << ", " << "hostname=" << to_string(hostname);
  out << ", " << "heartbeatCount="; (__isset.heartbeatCount ? (out << to_string(heartbeatCount)) : (out << "<null>"));
  out << ", " << "agentInfo="; (__isset.agentInfo ? (out << to_string(agentInfo)) : (out << "<null>"));
  out << ", " << "blockedByExtId="; (__isset.blockedByExtId ? (out << to_string(blockedByExtId)) : (out << "<null>"));
  out << ", " << "blockedByIntId="; (__isset.blockedByIntId ? (out << to_string(blockedByIntId)) : (out << "<null>"));
  out << ", " << "lockIdInternal="; (__isset.lockIdInternal ? (out << to_string(lockIdInternal)) : (out << "<null>"));
  out << ")";
}


ShowLocksResponse::~ShowLocksResponse() throw() {
}


void ShowLocksResponse::__set_locks(const std::vector<ShowLocksResponseElement> & val) {
  this->locks = val;
}

uint32_t ShowLocksResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->locks.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size715;
            ::apache::thrift::protocol::TType _etype718;
            xfer += iprot->readListBegin(_etype718, _size715);
            this->locks.resize(_size715);
            uint32_t _i719;
            for (_i719 = 0; _i719 < _size715; ++_i719)
            {
              xfer += this->locks[_i719].read(iprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size691;
            ::apache::thrift::protocol::TType _etype694;
            xfer += iprot->readListBegin(_etype694, _size691);
            this->locks.resize(_size691);
            uint32_t _i695;
            for (_i695 = 0; _i695 < _size691; ++_i695)
            {
              xfer += this->locks[_i695].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size649;
            ::apache::thrift::protocol::TType _etype652;
            xfer += iprot->readListBegin(_etype652, _size649);
            this->locks.resize(_size649);
            uint32_t _i653;
            for (_i653 = 0; _i653 < _size649; ++_i653)
            {
              xfer += this->locks[_i653].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size653;
            ::apache::thrift::protocol::TType _etype656;
            xfer += iprot->readListBegin(_etype656, _size653);
            this->locks.resize(_size653);
            uint32_t _i657;
            for (_i657 = 0; _i657 < _size653; ++_i657)
            {
              xfer += this->locks[_i657].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size653;
            ::apache::thrift::protocol::TType _etype656;
            xfer += iprot->readListBegin(_etype656, _size653);
            this->locks.resize(_size653);
            uint32_t _i657;
            for (_i657 = 0; _i657 < _size653; ++_i657)
            {
              xfer += this->locks[_i657].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size695;
            ::apache::thrift::protocol::TType _etype698;
            xfer += iprot->readListBegin(_etype698, _size695);
            this->locks.resize(_size695);
            uint32_t _i699;
            for (_i699 = 0; _i699 < _size695; ++_i699)
            {
              xfer += this->locks[_i699].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.locks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowLocksResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowLocksResponse");

  xfer += oprot->writeFieldBegin("locks", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->locks.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<ShowLocksResponseElement> ::const_iterator _iter720;
    for (_iter720 = this->locks.begin(); _iter720 != this->locks.end(); ++_iter720)
    {
      xfer += (*_iter720).write(oprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<ShowLocksResponseElement> ::const_iterator _iter696;
    for (_iter696 = this->locks.begin(); _iter696 != this->locks.end(); ++_iter696)
    {
      xfer += (*_iter696).write(oprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::vector<ShowLocksResponseElement> ::const_iterator _iter654;
    for (_iter654 = this->locks.begin(); _iter654 != this->locks.end(); ++_iter654)
    {
      xfer += (*_iter654).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<ShowLocksResponseElement> ::const_iterator _iter658;
    for (_iter658 = this->locks.begin(); _iter658 != this->locks.end(); ++_iter658)
    {
      xfer += (*_iter658).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<ShowLocksResponseElement> ::const_iterator _iter658;
    for (_iter658 = this->locks.begin(); _iter658 != this->locks.end(); ++_iter658)
    {
      xfer += (*_iter658).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<ShowLocksResponseElement> ::const_iterator _iter700;
    for (_iter700 = this->locks.begin(); _iter700 != this->locks.end(); ++_iter700)
    {
      xfer += (*_iter700).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowLocksResponse &a, ShowLocksResponse &b) {
  using ::std::swap;
  swap(a.locks, b.locks);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
ShowLocksResponse::ShowLocksResponse(const ShowLocksResponse& other721) {
  locks = other721.locks;
  __isset = other721.__isset;
}
ShowLocksResponse& ShowLocksResponse::operator=(const ShowLocksResponse& other722) {
  locks = other722.locks;
  __isset = other722.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ShowLocksResponse::ShowLocksResponse(const ShowLocksResponse& other697) {
  locks = other697.locks;
  __isset = other697.__isset;
}
ShowLocksResponse& ShowLocksResponse::operator=(const ShowLocksResponse& other698) {
  locks = other698.locks;
  __isset = other698.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
ShowLocksResponse::ShowLocksResponse(const ShowLocksResponse& other655) {
  locks = other655.locks;
  __isset = other655.__isset;
}
ShowLocksResponse& ShowLocksResponse::operator=(const ShowLocksResponse& other656) {
  locks = other656.locks;
  __isset = other656.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ShowLocksResponse::ShowLocksResponse(const ShowLocksResponse& other659) {
  locks = other659.locks;
  __isset = other659.__isset;
}
ShowLocksResponse& ShowLocksResponse::operator=(const ShowLocksResponse& other660) {
  locks = other660.locks;
  __isset = other660.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ShowLocksResponse::ShowLocksResponse(const ShowLocksResponse& other659) {
  locks = other659.locks;
  __isset = other659.__isset;
}
ShowLocksResponse& ShowLocksResponse::operator=(const ShowLocksResponse& other660) {
  locks = other660.locks;
  __isset = other660.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
ShowLocksResponse::ShowLocksResponse(const ShowLocksResponse& other701) {
  locks = other701.locks;
  __isset = other701.__isset;
}
ShowLocksResponse& ShowLocksResponse::operator=(const ShowLocksResponse& other702) {
  locks = other702.locks;
  __isset = other702.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void ShowLocksResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowLocksResponse(";
  out << "locks=" << to_string(locks);
  out << ")";
}


HeartbeatRequest::~HeartbeatRequest() throw() {
}


void HeartbeatRequest::__set_lockid(const int64_t val) {
  this->lockid = val;
__isset.lockid = true;
}

void HeartbeatRequest::__set_txnid(const int64_t val) {
  this->txnid = val;
__isset.txnid = true;
}

uint32_t HeartbeatRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lockid);
          this->__isset.lockid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          this->__isset.txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HeartbeatRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeartbeatRequest");

  if (this->__isset.lockid) {
    xfer += oprot->writeFieldBegin("lockid", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->lockid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.txnid) {
    xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->txnid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeartbeatRequest &a, HeartbeatRequest &b) {
  using ::std::swap;
  swap(a.lockid, b.lockid);
  swap(a.txnid, b.txnid);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& other723) {
  lockid = other723.lockid;
  txnid = other723.txnid;
  __isset = other723.__isset;
}
HeartbeatRequest& HeartbeatRequest::operator=(const HeartbeatRequest& other724) {
  lockid = other724.lockid;
  txnid = other724.txnid;
  __isset = other724.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& other699) {
  lockid = other699.lockid;
  txnid = other699.txnid;
  __isset = other699.__isset;
}
HeartbeatRequest& HeartbeatRequest::operator=(const HeartbeatRequest& other700) {
  lockid = other700.lockid;
  txnid = other700.txnid;
  __isset = other700.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& other657) {
  lockid = other657.lockid;
  txnid = other657.txnid;
  __isset = other657.__isset;
}
HeartbeatRequest& HeartbeatRequest::operator=(const HeartbeatRequest& other658) {
  lockid = other658.lockid;
  txnid = other658.txnid;
  __isset = other658.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& other661) {
  lockid = other661.lockid;
  txnid = other661.txnid;
  __isset = other661.__isset;
}
=======
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& other661) {
  lockid = other661.lockid;
  txnid = other661.txnid;
  __isset = other661.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
HeartbeatRequest& HeartbeatRequest::operator=(const HeartbeatRequest& other662) {
  lockid = other662.lockid;
  txnid = other662.txnid;
  __isset = other662.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& other703) {
  lockid = other703.lockid;
  txnid = other703.txnid;
  __isset = other703.__isset;
}
HeartbeatRequest& HeartbeatRequest::operator=(const HeartbeatRequest& other704) {
  lockid = other704.lockid;
  txnid = other704.txnid;
  __isset = other704.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void HeartbeatRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeartbeatRequest(";
  out << "lockid="; (__isset.lockid ? (out << to_string(lockid)) : (out << "<null>"));
  out << ", " << "txnid="; (__isset.txnid ? (out << to_string(txnid)) : (out << "<null>"));
  out << ")";
}


HeartbeatTxnRangeRequest::~HeartbeatTxnRangeRequest() throw() {
}


void HeartbeatTxnRangeRequest::__set_min(const int64_t val) {
  this->min = val;
}

void HeartbeatTxnRangeRequest::__set_max(const int64_t val) {
  this->max = val;
}

uint32_t HeartbeatTxnRangeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_min = false;
  bool isset_max = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->min);
          isset_min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->max);
          isset_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_min)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HeartbeatTxnRangeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeartbeatTxnRangeRequest");

  xfer += oprot->writeFieldBegin("min", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeartbeatTxnRangeRequest &a, HeartbeatTxnRangeRequest &b) {
  using ::std::swap;
  swap(a.min, b.min);
  swap(a.max, b.max);
}

<<<<<<< HEAD
<<<<<<< HEAD
HeartbeatTxnRangeRequest::HeartbeatTxnRangeRequest(const HeartbeatTxnRangeRequest& other725) {
  min = other725.min;
  max = other725.max;
}
HeartbeatTxnRangeRequest& HeartbeatTxnRangeRequest::operator=(const HeartbeatTxnRangeRequest& other726) {
  min = other726.min;
  max = other726.max;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
HeartbeatTxnRangeRequest::HeartbeatTxnRangeRequest(const HeartbeatTxnRangeRequest& other701) {
  min = other701.min;
  max = other701.max;
}
HeartbeatTxnRangeRequest& HeartbeatTxnRangeRequest::operator=(const HeartbeatTxnRangeRequest& other702) {
  min = other702.min;
  max = other702.max;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
HeartbeatTxnRangeRequest::HeartbeatTxnRangeRequest(const HeartbeatTxnRangeRequest& other659) {
  min = other659.min;
  max = other659.max;
}
HeartbeatTxnRangeRequest& HeartbeatTxnRangeRequest::operator=(const HeartbeatTxnRangeRequest& other660) {
  min = other660.min;
  max = other660.max;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
HeartbeatTxnRangeRequest::HeartbeatTxnRangeRequest(const HeartbeatTxnRangeRequest& other663) {
  min = other663.min;
  max = other663.max;
}
HeartbeatTxnRangeRequest& HeartbeatTxnRangeRequest::operator=(const HeartbeatTxnRangeRequest& other664) {
  min = other664.min;
  max = other664.max;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
HeartbeatTxnRangeRequest::HeartbeatTxnRangeRequest(const HeartbeatTxnRangeRequest& other663) {
  min = other663.min;
  max = other663.max;
}
HeartbeatTxnRangeRequest& HeartbeatTxnRangeRequest::operator=(const HeartbeatTxnRangeRequest& other664) {
  min = other664.min;
  max = other664.max;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
HeartbeatTxnRangeRequest::HeartbeatTxnRangeRequest(const HeartbeatTxnRangeRequest& other705) {
  min = other705.min;
  max = other705.max;
}
HeartbeatTxnRangeRequest& HeartbeatTxnRangeRequest::operator=(const HeartbeatTxnRangeRequest& other706) {
  min = other706.min;
  max = other706.max;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void HeartbeatTxnRangeRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeartbeatTxnRangeRequest(";
  out << "min=" << to_string(min);
  out << ", " << "max=" << to_string(max);
  out << ")";
}


HeartbeatTxnRangeResponse::~HeartbeatTxnRangeResponse() throw() {
}


void HeartbeatTxnRangeResponse::__set_aborted(const std::set<int64_t> & val) {
  this->aborted = val;
}

void HeartbeatTxnRangeResponse::__set_nosuch(const std::set<int64_t> & val) {
  this->nosuch = val;
}

uint32_t HeartbeatTxnRangeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_aborted = false;
  bool isset_nosuch = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->aborted.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size727;
            ::apache::thrift::protocol::TType _etype730;
            xfer += iprot->readSetBegin(_etype730, _size727);
            uint32_t _i731;
            for (_i731 = 0; _i731 < _size727; ++_i731)
            {
              int64_t _elem732;
              xfer += iprot->readI64(_elem732);
              this->aborted.insert(_elem732);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size703;
            ::apache::thrift::protocol::TType _etype706;
            xfer += iprot->readSetBegin(_etype706, _size703);
            uint32_t _i707;
            for (_i707 = 0; _i707 < _size703; ++_i707)
            {
              int64_t _elem708;
              xfer += iprot->readI64(_elem708);
              this->aborted.insert(_elem708);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size661;
            ::apache::thrift::protocol::TType _etype664;
            xfer += iprot->readSetBegin(_etype664, _size661);
            uint32_t _i665;
            for (_i665 = 0; _i665 < _size661; ++_i665)
<<<<<<< HEAD
            {
              int64_t _elem666;
              xfer += iprot->readI64(_elem666);
              this->aborted.insert(_elem666);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size665;
            ::apache::thrift::protocol::TType _etype668;
            xfer += iprot->readSetBegin(_etype668, _size665);
            uint32_t _i669;
            for (_i669 = 0; _i669 < _size665; ++_i669)
<<<<<<< HEAD
            {
              int64_t _elem670;
              xfer += iprot->readI64(_elem670);
              this->aborted.insert(_elem670);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              int64_t _elem666;
              xfer += iprot->readI64(_elem666);
              this->aborted.insert(_elem666);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              int64_t _elem670;
              xfer += iprot->readI64(_elem670);
              this->aborted.insert(_elem670);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size707;
            ::apache::thrift::protocol::TType _etype710;
            xfer += iprot->readSetBegin(_etype710, _size707);
            uint32_t _i711;
            for (_i711 = 0; _i711 < _size707; ++_i711)
            {
              int64_t _elem712;
              xfer += iprot->readI64(_elem712);
              this->aborted.insert(_elem712);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readSetEnd();
          }
          isset_aborted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->nosuch.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size733;
            ::apache::thrift::protocol::TType _etype736;
            xfer += iprot->readSetBegin(_etype736, _size733);
            uint32_t _i737;
            for (_i737 = 0; _i737 < _size733; ++_i737)
            {
              int64_t _elem738;
              xfer += iprot->readI64(_elem738);
              this->nosuch.insert(_elem738);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size709;
            ::apache::thrift::protocol::TType _etype712;
            xfer += iprot->readSetBegin(_etype712, _size709);
            uint32_t _i713;
            for (_i713 = 0; _i713 < _size709; ++_i713)
            {
              int64_t _elem714;
              xfer += iprot->readI64(_elem714);
              this->nosuch.insert(_elem714);
=======
            uint32_t _size667;
            ::apache::thrift::protocol::TType _etype670;
            xfer += iprot->readSetBegin(_etype670, _size667);
            uint32_t _i671;
            for (_i671 = 0; _i671 < _size667; ++_i671)
            {
              int64_t _elem672;
              xfer += iprot->readI64(_elem672);
              this->nosuch.insert(_elem672);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size671;
            ::apache::thrift::protocol::TType _etype674;
            xfer += iprot->readSetBegin(_etype674, _size671);
            uint32_t _i675;
            for (_i675 = 0; _i675 < _size671; ++_i675)
<<<<<<< HEAD
            {
              int64_t _elem676;
              xfer += iprot->readI64(_elem676);
              this->nosuch.insert(_elem676);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size667;
            ::apache::thrift::protocol::TType _etype670;
            xfer += iprot->readSetBegin(_etype670, _size667);
            uint32_t _i671;
            for (_i671 = 0; _i671 < _size667; ++_i671)
            {
              int64_t _elem672;
              xfer += iprot->readI64(_elem672);
              this->nosuch.insert(_elem672);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              int64_t _elem676;
              xfer += iprot->readI64(_elem676);
              this->nosuch.insert(_elem676);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size713;
            ::apache::thrift::protocol::TType _etype716;
            xfer += iprot->readSetBegin(_etype716, _size713);
            uint32_t _i717;
            for (_i717 = 0; _i717 < _size713; ++_i717)
            {
              int64_t _elem718;
              xfer += iprot->readI64(_elem718);
              this->nosuch.insert(_elem718);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readSetEnd();
          }
          isset_nosuch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_aborted)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_nosuch)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t HeartbeatTxnRangeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HeartbeatTxnRangeResponse");

  xfer += oprot->writeFieldBegin("aborted", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->aborted.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::set<int64_t> ::const_iterator _iter739;
    for (_iter739 = this->aborted.begin(); _iter739 != this->aborted.end(); ++_iter739)
    {
      xfer += oprot->writeI64((*_iter739));
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::set<int64_t> ::const_iterator _iter715;
    for (_iter715 = this->aborted.begin(); _iter715 != this->aborted.end(); ++_iter715)
    {
      xfer += oprot->writeI64((*_iter715));
=======
    std::set<int64_t> ::const_iterator _iter673;
    for (_iter673 = this->aborted.begin(); _iter673 != this->aborted.end(); ++_iter673)
    {
      xfer += oprot->writeI64((*_iter673));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::set<int64_t> ::const_iterator _iter677;
    for (_iter677 = this->aborted.begin(); _iter677 != this->aborted.end(); ++_iter677)
    {
      xfer += oprot->writeI64((*_iter677));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::set<int64_t> ::const_iterator _iter673;
    for (_iter673 = this->aborted.begin(); _iter673 != this->aborted.end(); ++_iter673)
    {
      xfer += oprot->writeI64((*_iter673));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::set<int64_t> ::const_iterator _iter677;
    for (_iter677 = this->aborted.begin(); _iter677 != this->aborted.end(); ++_iter677)
    {
      xfer += oprot->writeI64((*_iter677));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::set<int64_t> ::const_iterator _iter719;
    for (_iter719 = this->aborted.begin(); _iter719 != this->aborted.end(); ++_iter719)
    {
      xfer += oprot->writeI64((*_iter719));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nosuch", ::apache::thrift::protocol::T_SET, 2);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->nosuch.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::set<int64_t> ::const_iterator _iter740;
    for (_iter740 = this->nosuch.begin(); _iter740 != this->nosuch.end(); ++_iter740)
    {
      xfer += oprot->writeI64((*_iter740));
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::set<int64_t> ::const_iterator _iter716;
    for (_iter716 = this->nosuch.begin(); _iter716 != this->nosuch.end(); ++_iter716)
    {
      xfer += oprot->writeI64((*_iter716));
=======
    std::set<int64_t> ::const_iterator _iter674;
    for (_iter674 = this->nosuch.begin(); _iter674 != this->nosuch.end(); ++_iter674)
    {
      xfer += oprot->writeI64((*_iter674));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::set<int64_t> ::const_iterator _iter678;
    for (_iter678 = this->nosuch.begin(); _iter678 != this->nosuch.end(); ++_iter678)
    {
      xfer += oprot->writeI64((*_iter678));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::set<int64_t> ::const_iterator _iter674;
    for (_iter674 = this->nosuch.begin(); _iter674 != this->nosuch.end(); ++_iter674)
    {
      xfer += oprot->writeI64((*_iter674));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::set<int64_t> ::const_iterator _iter678;
    for (_iter678 = this->nosuch.begin(); _iter678 != this->nosuch.end(); ++_iter678)
    {
      xfer += oprot->writeI64((*_iter678));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::set<int64_t> ::const_iterator _iter720;
    for (_iter720 = this->nosuch.begin(); _iter720 != this->nosuch.end(); ++_iter720)
    {
      xfer += oprot->writeI64((*_iter720));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HeartbeatTxnRangeResponse &a, HeartbeatTxnRangeResponse &b) {
  using ::std::swap;
  swap(a.aborted, b.aborted);
  swap(a.nosuch, b.nosuch);
}

<<<<<<< HEAD
<<<<<<< HEAD
HeartbeatTxnRangeResponse::HeartbeatTxnRangeResponse(const HeartbeatTxnRangeResponse& other741) {
  aborted = other741.aborted;
  nosuch = other741.nosuch;
}
HeartbeatTxnRangeResponse& HeartbeatTxnRangeResponse::operator=(const HeartbeatTxnRangeResponse& other742) {
  aborted = other742.aborted;
  nosuch = other742.nosuch;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
HeartbeatTxnRangeResponse::HeartbeatTxnRangeResponse(const HeartbeatTxnRangeResponse& other717) {
  aborted = other717.aborted;
  nosuch = other717.nosuch;
}
HeartbeatTxnRangeResponse& HeartbeatTxnRangeResponse::operator=(const HeartbeatTxnRangeResponse& other718) {
  aborted = other718.aborted;
  nosuch = other718.nosuch;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
HeartbeatTxnRangeResponse::HeartbeatTxnRangeResponse(const HeartbeatTxnRangeResponse& other675) {
  aborted = other675.aborted;
  nosuch = other675.nosuch;
}
HeartbeatTxnRangeResponse& HeartbeatTxnRangeResponse::operator=(const HeartbeatTxnRangeResponse& other676) {
  aborted = other676.aborted;
  nosuch = other676.nosuch;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
HeartbeatTxnRangeResponse::HeartbeatTxnRangeResponse(const HeartbeatTxnRangeResponse& other679) {
  aborted = other679.aborted;
  nosuch = other679.nosuch;
}
HeartbeatTxnRangeResponse& HeartbeatTxnRangeResponse::operator=(const HeartbeatTxnRangeResponse& other680) {
  aborted = other680.aborted;
  nosuch = other680.nosuch;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
HeartbeatTxnRangeResponse::HeartbeatTxnRangeResponse(const HeartbeatTxnRangeResponse& other679) {
  aborted = other679.aborted;
  nosuch = other679.nosuch;
}
HeartbeatTxnRangeResponse& HeartbeatTxnRangeResponse::operator=(const HeartbeatTxnRangeResponse& other680) {
  aborted = other680.aborted;
  nosuch = other680.nosuch;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
HeartbeatTxnRangeResponse::HeartbeatTxnRangeResponse(const HeartbeatTxnRangeResponse& other721) {
  aborted = other721.aborted;
  nosuch = other721.nosuch;
}
HeartbeatTxnRangeResponse& HeartbeatTxnRangeResponse::operator=(const HeartbeatTxnRangeResponse& other722) {
  aborted = other722.aborted;
  nosuch = other722.nosuch;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void HeartbeatTxnRangeResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeartbeatTxnRangeResponse(";
  out << "aborted=" << to_string(aborted);
  out << ", " << "nosuch=" << to_string(nosuch);
  out << ")";
}


CompactionRequest::~CompactionRequest() throw() {
}


void CompactionRequest::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void CompactionRequest::__set_tablename(const std::string& val) {
  this->tablename = val;
}

void CompactionRequest::__set_partitionname(const std::string& val) {
  this->partitionname = val;
__isset.partitionname = true;
}

void CompactionRequest::__set_type(const CompactionType::type val) {
  this->type = val;
}

void CompactionRequest::__set_runas(const std::string& val) {
  this->runas = val;
__isset.runas = true;
}

void CompactionRequest::__set_properties(const std::map<std::string, std::string> & val) {
  this->properties = val;
__isset.properties = true;
}

uint32_t CompactionRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbname = false;
  bool isset_tablename = false;
  bool isset_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbname);
          isset_dbname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tablename);
          isset_tablename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->partitionname);
          this->__isset.partitionname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast743;
          xfer += iprot->readI32(ecast743);
          this->type = (CompactionType::type)ecast743;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast719;
          xfer += iprot->readI32(ecast719);
          this->type = (CompactionType::type)ecast719;
=======
          int32_t ecast677;
          xfer += iprot->readI32(ecast677);
          this->type = (CompactionType::type)ecast677;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast681;
          xfer += iprot->readI32(ecast681);
          this->type = (CompactionType::type)ecast681;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast677;
          xfer += iprot->readI32(ecast677);
          this->type = (CompactionType::type)ecast677;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast681;
          xfer += iprot->readI32(ecast681);
          this->type = (CompactionType::type)ecast681;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast723;
          xfer += iprot->readI32(ecast723);
          this->type = (CompactionType::type)ecast723;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->runas);
          this->__isset.runas = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->properties.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size744;
            ::apache::thrift::protocol::TType _ktype745;
            ::apache::thrift::protocol::TType _vtype746;
            xfer += iprot->readMapBegin(_ktype745, _vtype746, _size744);
            uint32_t _i748;
            for (_i748 = 0; _i748 < _size744; ++_i748)
            {
              std::string _key749;
              xfer += iprot->readString(_key749);
              std::string& _val750 = this->properties[_key749];
              xfer += iprot->readString(_val750);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size720;
            ::apache::thrift::protocol::TType _ktype721;
            ::apache::thrift::protocol::TType _vtype722;
            xfer += iprot->readMapBegin(_ktype721, _vtype722, _size720);
            uint32_t _i724;
            for (_i724 = 0; _i724 < _size720; ++_i724)
            {
              std::string _key725;
              xfer += iprot->readString(_key725);
              std::string& _val726 = this->properties[_key725];
              xfer += iprot->readString(_val726);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size678;
            ::apache::thrift::protocol::TType _ktype679;
            ::apache::thrift::protocol::TType _vtype680;
            xfer += iprot->readMapBegin(_ktype679, _vtype680, _size678);
            uint32_t _i682;
            for (_i682 = 0; _i682 < _size678; ++_i682)
            {
              std::string _key683;
              xfer += iprot->readString(_key683);
              std::string& _val684 = this->properties[_key683];
              xfer += iprot->readString(_val684);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size682;
            ::apache::thrift::protocol::TType _ktype683;
            ::apache::thrift::protocol::TType _vtype684;
            xfer += iprot->readMapBegin(_ktype683, _vtype684, _size682);
            uint32_t _i686;
            for (_i686 = 0; _i686 < _size682; ++_i686)
            {
=======
            uint32_t _size682;
            ::apache::thrift::protocol::TType _ktype683;
            ::apache::thrift::protocol::TType _vtype684;
            xfer += iprot->readMapBegin(_ktype683, _vtype684, _size682);
            uint32_t _i686;
            for (_i686 = 0; _i686 < _size682; ++_i686)
            {
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
              std::string _key687;
              xfer += iprot->readString(_key687);
              std::string& _val688 = this->properties[_key687];
              xfer += iprot->readString(_val688);
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size724;
            ::apache::thrift::protocol::TType _ktype725;
            ::apache::thrift::protocol::TType _vtype726;
            xfer += iprot->readMapBegin(_ktype725, _vtype726, _size724);
            uint32_t _i728;
            for (_i728 = 0; _i728 < _size724; ++_i728)
            {
              std::string _key729;
              xfer += iprot->readString(_key729);
              std::string& _val730 = this->properties[_key729];
              xfer += iprot->readString(_val730);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tablename)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CompactionRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CompactionRequest");

  xfer += oprot->writeFieldBegin("dbname", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tablename", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tablename);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.partitionname) {
    xfer += oprot->writeFieldBegin("partitionname", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->partitionname);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.runas) {
    xfer += oprot->writeFieldBegin("runas", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->runas);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.properties) {
    xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_MAP, 6);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->properties.size()));
<<<<<<< HEAD
<<<<<<< HEAD
      std::map<std::string, std::string> ::const_iterator _iter751;
      for (_iter751 = this->properties.begin(); _iter751 != this->properties.end(); ++_iter751)
      {
        xfer += oprot->writeString(_iter751->first);
        xfer += oprot->writeString(_iter751->second);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::map<std::string, std::string> ::const_iterator _iter727;
      for (_iter727 = this->properties.begin(); _iter727 != this->properties.end(); ++_iter727)
      {
        xfer += oprot->writeString(_iter727->first);
        xfer += oprot->writeString(_iter727->second);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
      std::map<std::string, std::string> ::const_iterator _iter685;
      for (_iter685 = this->properties.begin(); _iter685 != this->properties.end(); ++_iter685)
      {
        xfer += oprot->writeString(_iter685->first);
        xfer += oprot->writeString(_iter685->second);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::map<std::string, std::string> ::const_iterator _iter689;
      for (_iter689 = this->properties.begin(); _iter689 != this->properties.end(); ++_iter689)
      {
        xfer += oprot->writeString(_iter689->first);
        xfer += oprot->writeString(_iter689->second);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::map<std::string, std::string> ::const_iterator _iter689;
      for (_iter689 = this->properties.begin(); _iter689 != this->properties.end(); ++_iter689)
      {
        xfer += oprot->writeString(_iter689->first);
        xfer += oprot->writeString(_iter689->second);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::map<std::string, std::string> ::const_iterator _iter731;
      for (_iter731 = this->properties.begin(); _iter731 != this->properties.end(); ++_iter731)
      {
        xfer += oprot->writeString(_iter731->first);
        xfer += oprot->writeString(_iter731->second);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CompactionRequest &a, CompactionRequest &b) {
  using ::std::swap;
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partitionname, b.partitionname);
  swap(a.type, b.type);
  swap(a.runas, b.runas);
  swap(a.properties, b.properties);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
CompactionRequest::CompactionRequest(const CompactionRequest& other752) {
  dbname = other752.dbname;
  tablename = other752.tablename;
  partitionname = other752.partitionname;
  type = other752.type;
  runas = other752.runas;
  properties = other752.properties;
  __isset = other752.__isset;
}
CompactionRequest& CompactionRequest::operator=(const CompactionRequest& other753) {
  dbname = other753.dbname;
  tablename = other753.tablename;
  partitionname = other753.partitionname;
  type = other753.type;
  runas = other753.runas;
  properties = other753.properties;
  __isset = other753.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CompactionRequest::CompactionRequest(const CompactionRequest& other728) {
  dbname = other728.dbname;
  tablename = other728.tablename;
  partitionname = other728.partitionname;
  type = other728.type;
  runas = other728.runas;
  properties = other728.properties;
  __isset = other728.__isset;
}
CompactionRequest& CompactionRequest::operator=(const CompactionRequest& other729) {
  dbname = other729.dbname;
  tablename = other729.tablename;
  partitionname = other729.partitionname;
  type = other729.type;
  runas = other729.runas;
  properties = other729.properties;
  __isset = other729.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
CompactionRequest::CompactionRequest(const CompactionRequest& other686) {
  dbname = other686.dbname;
  tablename = other686.tablename;
  partitionname = other686.partitionname;
  type = other686.type;
  runas = other686.runas;
  properties = other686.properties;
  __isset = other686.__isset;
}
CompactionRequest& CompactionRequest::operator=(const CompactionRequest& other687) {
  dbname = other687.dbname;
  tablename = other687.tablename;
  partitionname = other687.partitionname;
  type = other687.type;
  runas = other687.runas;
  properties = other687.properties;
  __isset = other687.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
CompactionRequest::CompactionRequest(const CompactionRequest& other690) {
  dbname = other690.dbname;
  tablename = other690.tablename;
  partitionname = other690.partitionname;
  type = other690.type;
  runas = other690.runas;
  properties = other690.properties;
  __isset = other690.__isset;
}
CompactionRequest& CompactionRequest::operator=(const CompactionRequest& other691) {
  dbname = other691.dbname;
  tablename = other691.tablename;
  partitionname = other691.partitionname;
  type = other691.type;
  runas = other691.runas;
  properties = other691.properties;
  __isset = other691.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
CompactionRequest::CompactionRequest(const CompactionRequest& other732) {
  dbname = other732.dbname;
  tablename = other732.tablename;
  partitionname = other732.partitionname;
  type = other732.type;
  runas = other732.runas;
  properties = other732.properties;
  __isset = other732.__isset;
}
CompactionRequest& CompactionRequest::operator=(const CompactionRequest& other733) {
  dbname = other733.dbname;
  tablename = other733.tablename;
  partitionname = other733.partitionname;
  type = other733.type;
  runas = other733.runas;
  properties = other733.properties;
  __isset = other733.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void CompactionRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CompactionRequest(";
  out << "dbname=" << to_string(dbname);
  out << ", " << "tablename=" << to_string(tablename);
  out << ", " << "partitionname="; (__isset.partitionname ? (out << to_string(partitionname)) : (out << "<null>"));
  out << ", " << "type=" << to_string(type);
  out << ", " << "runas="; (__isset.runas ? (out << to_string(runas)) : (out << "<null>"));
  out << ", " << "properties="; (__isset.properties ? (out << to_string(properties)) : (out << "<null>"));
  out << ")";
}


CompactionResponse::~CompactionResponse() throw() {
}


void CompactionResponse::__set_id(const int64_t val) {
  this->id = val;
}

void CompactionResponse::__set_state(const std::string& val) {
  this->state = val;
}

void CompactionResponse::__set_accepted(const bool val) {
  this->accepted = val;
}

uint32_t CompactionResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_state = false;
  bool isset_accepted = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->state);
          isset_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->accepted);
          isset_accepted = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_accepted)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CompactionResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CompactionResponse");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("accepted", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->accepted);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CompactionResponse &a, CompactionResponse &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.state, b.state);
  swap(a.accepted, b.accepted);
}

<<<<<<< HEAD
<<<<<<< HEAD
CompactionResponse::CompactionResponse(const CompactionResponse& other754) {
  id = other754.id;
  state = other754.state;
  accepted = other754.accepted;
}
CompactionResponse& CompactionResponse::operator=(const CompactionResponse& other755) {
  id = other755.id;
  state = other755.state;
  accepted = other755.accepted;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CompactionResponse::CompactionResponse(const CompactionResponse& other730) {
  id = other730.id;
  state = other730.state;
  accepted = other730.accepted;
}
CompactionResponse& CompactionResponse::operator=(const CompactionResponse& other731) {
  id = other731.id;
  state = other731.state;
  accepted = other731.accepted;
=======
CompactionResponse::CompactionResponse(const CompactionResponse& other688) {
  id = other688.id;
  state = other688.state;
  accepted = other688.accepted;
}
=======
CompactionResponse::CompactionResponse(const CompactionResponse& other688) {
  id = other688.id;
  state = other688.state;
  accepted = other688.accepted;
}
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
CompactionResponse& CompactionResponse::operator=(const CompactionResponse& other689) {
  id = other689.id;
  state = other689.state;
  accepted = other689.accepted;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CompactionResponse::CompactionResponse(const CompactionResponse& other692) {
  id = other692.id;
  state = other692.state;
  accepted = other692.accepted;
}
=======
CompactionResponse::CompactionResponse(const CompactionResponse& other692) {
  id = other692.id;
  state = other692.state;
  accepted = other692.accepted;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
CompactionResponse& CompactionResponse::operator=(const CompactionResponse& other693) {
  id = other693.id;
  state = other693.state;
  accepted = other693.accepted;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
CompactionResponse::CompactionResponse(const CompactionResponse& other734) {
  id = other734.id;
  state = other734.state;
  accepted = other734.accepted;
}
CompactionResponse& CompactionResponse::operator=(const CompactionResponse& other735) {
  id = other735.id;
  state = other735.state;
  accepted = other735.accepted;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void CompactionResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CompactionResponse(";
  out << "id=" << to_string(id);
  out << ", " << "state=" << to_string(state);
  out << ", " << "accepted=" << to_string(accepted);
  out << ")";
}


ShowCompactRequest::~ShowCompactRequest() throw() {
}


uint32_t ShowCompactRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowCompactRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowCompactRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowCompactRequest &a, ShowCompactRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
ShowCompactRequest::ShowCompactRequest(const ShowCompactRequest& other756) {
  (void) other756;
}
ShowCompactRequest& ShowCompactRequest::operator=(const ShowCompactRequest& other757) {
  (void) other757;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ShowCompactRequest::ShowCompactRequest(const ShowCompactRequest& other732) {
  (void) other732;
}
ShowCompactRequest& ShowCompactRequest::operator=(const ShowCompactRequest& other733) {
  (void) other733;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
ShowCompactRequest::ShowCompactRequest(const ShowCompactRequest& other690) {
  (void) other690;
}
ShowCompactRequest& ShowCompactRequest::operator=(const ShowCompactRequest& other691) {
  (void) other691;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ShowCompactRequest::ShowCompactRequest(const ShowCompactRequest& other694) {
  (void) other694;
}
ShowCompactRequest& ShowCompactRequest::operator=(const ShowCompactRequest& other695) {
  (void) other695;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ShowCompactRequest::ShowCompactRequest(const ShowCompactRequest& other694) {
  (void) other694;
}
ShowCompactRequest& ShowCompactRequest::operator=(const ShowCompactRequest& other695) {
  (void) other695;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
ShowCompactRequest::ShowCompactRequest(const ShowCompactRequest& other736) {
  (void) other736;
}
ShowCompactRequest& ShowCompactRequest::operator=(const ShowCompactRequest& other737) {
  (void) other737;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void ShowCompactRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowCompactRequest(";
  out << ")";
}


ShowCompactResponseElement::~ShowCompactResponseElement() throw() {
}


void ShowCompactResponseElement::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void ShowCompactResponseElement::__set_tablename(const std::string& val) {
  this->tablename = val;
}

void ShowCompactResponseElement::__set_partitionname(const std::string& val) {
  this->partitionname = val;
__isset.partitionname = true;
}

void ShowCompactResponseElement::__set_type(const CompactionType::type val) {
  this->type = val;
}

void ShowCompactResponseElement::__set_state(const std::string& val) {
  this->state = val;
}

void ShowCompactResponseElement::__set_workerid(const std::string& val) {
  this->workerid = val;
__isset.workerid = true;
}

void ShowCompactResponseElement::__set_start(const int64_t val) {
  this->start = val;
__isset.start = true;
}

void ShowCompactResponseElement::__set_runAs(const std::string& val) {
  this->runAs = val;
__isset.runAs = true;
}

void ShowCompactResponseElement::__set_hightestTxnId(const int64_t val) {
  this->hightestTxnId = val;
__isset.hightestTxnId = true;
}

void ShowCompactResponseElement::__set_metaInfo(const std::string& val) {
  this->metaInfo = val;
__isset.metaInfo = true;
}

void ShowCompactResponseElement::__set_endTime(const int64_t val) {
  this->endTime = val;
__isset.endTime = true;
}

void ShowCompactResponseElement::__set_hadoopJobId(const std::string& val) {
  this->hadoopJobId = val;
__isset.hadoopJobId = true;
}

void ShowCompactResponseElement::__set_id(const int64_t val) {
  this->id = val;
__isset.id = true;
}

uint32_t ShowCompactResponseElement::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbname = false;
  bool isset_tablename = false;
  bool isset_type = false;
  bool isset_state = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbname);
          isset_dbname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tablename);
          isset_tablename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->partitionname);
          this->__isset.partitionname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast758;
          xfer += iprot->readI32(ecast758);
          this->type = (CompactionType::type)ecast758;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast734;
          xfer += iprot->readI32(ecast734);
          this->type = (CompactionType::type)ecast734;
=======
          int32_t ecast692;
          xfer += iprot->readI32(ecast692);
          this->type = (CompactionType::type)ecast692;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast696;
          xfer += iprot->readI32(ecast696);
          this->type = (CompactionType::type)ecast696;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast692;
          xfer += iprot->readI32(ecast692);
          this->type = (CompactionType::type)ecast692;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast696;
          xfer += iprot->readI32(ecast696);
          this->type = (CompactionType::type)ecast696;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast738;
          xfer += iprot->readI32(ecast738);
          this->type = (CompactionType::type)ecast738;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->state);
          isset_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->workerid);
          this->__isset.workerid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start);
          this->__isset.start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->runAs);
          this->__isset.runAs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->hightestTxnId);
          this->__isset.hightestTxnId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->metaInfo);
          this->__isset.metaInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endTime);
          this->__isset.endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hadoopJobId);
          this->__isset.hadoopJobId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tablename)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_state)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ShowCompactResponseElement::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowCompactResponseElement");

  xfer += oprot->writeFieldBegin("dbname", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tablename", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tablename);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.partitionname) {
    xfer += oprot->writeFieldBegin("partitionname", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->partitionname);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->state);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.workerid) {
    xfer += oprot->writeFieldBegin("workerid", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->workerid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.start) {
    xfer += oprot->writeFieldBegin("start", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->start);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.runAs) {
    xfer += oprot->writeFieldBegin("runAs", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->runAs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hightestTxnId) {
    xfer += oprot->writeFieldBegin("hightestTxnId", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->hightestTxnId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.metaInfo) {
    xfer += oprot->writeFieldBegin("metaInfo", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->metaInfo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.endTime) {
    xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I64, 11);
    xfer += oprot->writeI64(this->endTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hadoopJobId) {
    xfer += oprot->writeFieldBegin("hadoopJobId", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->hadoopJobId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 13);
    xfer += oprot->writeI64(this->id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowCompactResponseElement &a, ShowCompactResponseElement &b) {
  using ::std::swap;
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partitionname, b.partitionname);
  swap(a.type, b.type);
  swap(a.state, b.state);
  swap(a.workerid, b.workerid);
  swap(a.start, b.start);
  swap(a.runAs, b.runAs);
  swap(a.hightestTxnId, b.hightestTxnId);
  swap(a.metaInfo, b.metaInfo);
  swap(a.endTime, b.endTime);
  swap(a.hadoopJobId, b.hadoopJobId);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
ShowCompactResponseElement::ShowCompactResponseElement(const ShowCompactResponseElement& other759) {
  dbname = other759.dbname;
  tablename = other759.tablename;
  partitionname = other759.partitionname;
  type = other759.type;
  state = other759.state;
  workerid = other759.workerid;
  start = other759.start;
  runAs = other759.runAs;
  hightestTxnId = other759.hightestTxnId;
  metaInfo = other759.metaInfo;
  endTime = other759.endTime;
  hadoopJobId = other759.hadoopJobId;
  id = other759.id;
  __isset = other759.__isset;
}
ShowCompactResponseElement& ShowCompactResponseElement::operator=(const ShowCompactResponseElement& other760) {
  dbname = other760.dbname;
  tablename = other760.tablename;
  partitionname = other760.partitionname;
  type = other760.type;
  state = other760.state;
  workerid = other760.workerid;
  start = other760.start;
  runAs = other760.runAs;
  hightestTxnId = other760.hightestTxnId;
  metaInfo = other760.metaInfo;
  endTime = other760.endTime;
  hadoopJobId = other760.hadoopJobId;
  id = other760.id;
  __isset = other760.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ShowCompactResponseElement::ShowCompactResponseElement(const ShowCompactResponseElement& other735) {
  dbname = other735.dbname;
  tablename = other735.tablename;
  partitionname = other735.partitionname;
  type = other735.type;
  state = other735.state;
  workerid = other735.workerid;
  start = other735.start;
  runAs = other735.runAs;
  hightestTxnId = other735.hightestTxnId;
  metaInfo = other735.metaInfo;
  endTime = other735.endTime;
  hadoopJobId = other735.hadoopJobId;
  id = other735.id;
  __isset = other735.__isset;
}
ShowCompactResponseElement& ShowCompactResponseElement::operator=(const ShowCompactResponseElement& other736) {
  dbname = other736.dbname;
  tablename = other736.tablename;
  partitionname = other736.partitionname;
  type = other736.type;
  state = other736.state;
  workerid = other736.workerid;
  start = other736.start;
  runAs = other736.runAs;
  hightestTxnId = other736.hightestTxnId;
  metaInfo = other736.metaInfo;
  endTime = other736.endTime;
  hadoopJobId = other736.hadoopJobId;
  id = other736.id;
  __isset = other736.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
ShowCompactResponseElement::ShowCompactResponseElement(const ShowCompactResponseElement& other693) {
  dbname = other693.dbname;
  tablename = other693.tablename;
  partitionname = other693.partitionname;
  type = other693.type;
  state = other693.state;
  workerid = other693.workerid;
  start = other693.start;
  runAs = other693.runAs;
  hightestTxnId = other693.hightestTxnId;
  metaInfo = other693.metaInfo;
  endTime = other693.endTime;
  hadoopJobId = other693.hadoopJobId;
  id = other693.id;
  __isset = other693.__isset;
}
ShowCompactResponseElement& ShowCompactResponseElement::operator=(const ShowCompactResponseElement& other694) {
  dbname = other694.dbname;
  tablename = other694.tablename;
  partitionname = other694.partitionname;
  type = other694.type;
  state = other694.state;
  workerid = other694.workerid;
  start = other694.start;
  runAs = other694.runAs;
  hightestTxnId = other694.hightestTxnId;
  metaInfo = other694.metaInfo;
  endTime = other694.endTime;
  hadoopJobId = other694.hadoopJobId;
  id = other694.id;
  __isset = other694.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
ShowCompactResponseElement::ShowCompactResponseElement(const ShowCompactResponseElement& other697) {
  dbname = other697.dbname;
  tablename = other697.tablename;
  partitionname = other697.partitionname;
  type = other697.type;
  state = other697.state;
  workerid = other697.workerid;
  start = other697.start;
  runAs = other697.runAs;
  hightestTxnId = other697.hightestTxnId;
  metaInfo = other697.metaInfo;
  endTime = other697.endTime;
  hadoopJobId = other697.hadoopJobId;
  id = other697.id;
  __isset = other697.__isset;
}
ShowCompactResponseElement& ShowCompactResponseElement::operator=(const ShowCompactResponseElement& other698) {
  dbname = other698.dbname;
  tablename = other698.tablename;
  partitionname = other698.partitionname;
  type = other698.type;
  state = other698.state;
  workerid = other698.workerid;
  start = other698.start;
  runAs = other698.runAs;
  hightestTxnId = other698.hightestTxnId;
  metaInfo = other698.metaInfo;
  endTime = other698.endTime;
  hadoopJobId = other698.hadoopJobId;
  id = other698.id;
  __isset = other698.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
ShowCompactResponseElement::ShowCompactResponseElement(const ShowCompactResponseElement& other739) {
  dbname = other739.dbname;
  tablename = other739.tablename;
  partitionname = other739.partitionname;
  type = other739.type;
  state = other739.state;
  workerid = other739.workerid;
  start = other739.start;
  runAs = other739.runAs;
  hightestTxnId = other739.hightestTxnId;
  metaInfo = other739.metaInfo;
  endTime = other739.endTime;
  hadoopJobId = other739.hadoopJobId;
  id = other739.id;
  __isset = other739.__isset;
}
ShowCompactResponseElement& ShowCompactResponseElement::operator=(const ShowCompactResponseElement& other740) {
  dbname = other740.dbname;
  tablename = other740.tablename;
  partitionname = other740.partitionname;
  type = other740.type;
  state = other740.state;
  workerid = other740.workerid;
  start = other740.start;
  runAs = other740.runAs;
  hightestTxnId = other740.hightestTxnId;
  metaInfo = other740.metaInfo;
  endTime = other740.endTime;
  hadoopJobId = other740.hadoopJobId;
  id = other740.id;
  __isset = other740.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void ShowCompactResponseElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowCompactResponseElement(";
  out << "dbname=" << to_string(dbname);
  out << ", " << "tablename=" << to_string(tablename);
  out << ", " << "partitionname="; (__isset.partitionname ? (out << to_string(partitionname)) : (out << "<null>"));
  out << ", " << "type=" << to_string(type);
  out << ", " << "state=" << to_string(state);
  out << ", " << "workerid="; (__isset.workerid ? (out << to_string(workerid)) : (out << "<null>"));
  out << ", " << "start="; (__isset.start ? (out << to_string(start)) : (out << "<null>"));
  out << ", " << "runAs="; (__isset.runAs ? (out << to_string(runAs)) : (out << "<null>"));
  out << ", " << "hightestTxnId="; (__isset.hightestTxnId ? (out << to_string(hightestTxnId)) : (out << "<null>"));
  out << ", " << "metaInfo="; (__isset.metaInfo ? (out << to_string(metaInfo)) : (out << "<null>"));
  out << ", " << "endTime="; (__isset.endTime ? (out << to_string(endTime)) : (out << "<null>"));
  out << ", " << "hadoopJobId="; (__isset.hadoopJobId ? (out << to_string(hadoopJobId)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ")";
}


ShowCompactResponse::~ShowCompactResponse() throw() {
}


void ShowCompactResponse::__set_compacts(const std::vector<ShowCompactResponseElement> & val) {
  this->compacts = val;
}

uint32_t ShowCompactResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_compacts = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->compacts.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size761;
            ::apache::thrift::protocol::TType _etype764;
            xfer += iprot->readListBegin(_etype764, _size761);
            this->compacts.resize(_size761);
            uint32_t _i765;
            for (_i765 = 0; _i765 < _size761; ++_i765)
            {
              xfer += this->compacts[_i765].read(iprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size737;
            ::apache::thrift::protocol::TType _etype740;
            xfer += iprot->readListBegin(_etype740, _size737);
            this->compacts.resize(_size737);
            uint32_t _i741;
            for (_i741 = 0; _i741 < _size737; ++_i741)
            {
              xfer += this->compacts[_i741].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size695;
            ::apache::thrift::protocol::TType _etype698;
            xfer += iprot->readListBegin(_etype698, _size695);
            this->compacts.resize(_size695);
            uint32_t _i699;
            for (_i699 = 0; _i699 < _size695; ++_i699)
            {
              xfer += this->compacts[_i699].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size699;
            ::apache::thrift::protocol::TType _etype702;
            xfer += iprot->readListBegin(_etype702, _size699);
            this->compacts.resize(_size699);
            uint32_t _i703;
            for (_i703 = 0; _i703 < _size699; ++_i703)
            {
              xfer += this->compacts[_i703].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size699;
            ::apache::thrift::protocol::TType _etype702;
            xfer += iprot->readListBegin(_etype702, _size699);
            this->compacts.resize(_size699);
            uint32_t _i703;
            for (_i703 = 0; _i703 < _size699; ++_i703)
            {
              xfer += this->compacts[_i703].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size741;
            ::apache::thrift::protocol::TType _etype744;
            xfer += iprot->readListBegin(_etype744, _size741);
            this->compacts.resize(_size741);
            uint32_t _i745;
            for (_i745 = 0; _i745 < _size741; ++_i745)
            {
              xfer += this->compacts[_i745].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          isset_compacts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_compacts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ShowCompactResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowCompactResponse");

  xfer += oprot->writeFieldBegin("compacts", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->compacts.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<ShowCompactResponseElement> ::const_iterator _iter766;
    for (_iter766 = this->compacts.begin(); _iter766 != this->compacts.end(); ++_iter766)
    {
      xfer += (*_iter766).write(oprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<ShowCompactResponseElement> ::const_iterator _iter742;
    for (_iter742 = this->compacts.begin(); _iter742 != this->compacts.end(); ++_iter742)
    {
      xfer += (*_iter742).write(oprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::vector<ShowCompactResponseElement> ::const_iterator _iter700;
    for (_iter700 = this->compacts.begin(); _iter700 != this->compacts.end(); ++_iter700)
    {
      xfer += (*_iter700).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<ShowCompactResponseElement> ::const_iterator _iter704;
    for (_iter704 = this->compacts.begin(); _iter704 != this->compacts.end(); ++_iter704)
    {
      xfer += (*_iter704).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<ShowCompactResponseElement> ::const_iterator _iter704;
    for (_iter704 = this->compacts.begin(); _iter704 != this->compacts.end(); ++_iter704)
    {
      xfer += (*_iter704).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<ShowCompactResponseElement> ::const_iterator _iter746;
    for (_iter746 = this->compacts.begin(); _iter746 != this->compacts.end(); ++_iter746)
    {
      xfer += (*_iter746).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowCompactResponse &a, ShowCompactResponse &b) {
  using ::std::swap;
  swap(a.compacts, b.compacts);
}

<<<<<<< HEAD
<<<<<<< HEAD
ShowCompactResponse::ShowCompactResponse(const ShowCompactResponse& other767) {
  compacts = other767.compacts;
}
ShowCompactResponse& ShowCompactResponse::operator=(const ShowCompactResponse& other768) {
  compacts = other768.compacts;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ShowCompactResponse::ShowCompactResponse(const ShowCompactResponse& other743) {
  compacts = other743.compacts;
}
ShowCompactResponse& ShowCompactResponse::operator=(const ShowCompactResponse& other744) {
  compacts = other744.compacts;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
ShowCompactResponse::ShowCompactResponse(const ShowCompactResponse& other701) {
  compacts = other701.compacts;
}
ShowCompactResponse& ShowCompactResponse::operator=(const ShowCompactResponse& other702) {
  compacts = other702.compacts;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ShowCompactResponse::ShowCompactResponse(const ShowCompactResponse& other705) {
  compacts = other705.compacts;
}
ShowCompactResponse& ShowCompactResponse::operator=(const ShowCompactResponse& other706) {
  compacts = other706.compacts;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ShowCompactResponse::ShowCompactResponse(const ShowCompactResponse& other705) {
  compacts = other705.compacts;
}
ShowCompactResponse& ShowCompactResponse::operator=(const ShowCompactResponse& other706) {
  compacts = other706.compacts;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
ShowCompactResponse::ShowCompactResponse(const ShowCompactResponse& other747) {
  compacts = other747.compacts;
}
ShowCompactResponse& ShowCompactResponse::operator=(const ShowCompactResponse& other748) {
  compacts = other748.compacts;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void ShowCompactResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowCompactResponse(";
  out << "compacts=" << to_string(compacts);
  out << ")";
}


AddDynamicPartitions::~AddDynamicPartitions() throw() {
}


void AddDynamicPartitions::__set_txnid(const int64_t val) {
  this->txnid = val;
}

void AddDynamicPartitions::__set_writeid(const int64_t val) {
  this->writeid = val;
}

void AddDynamicPartitions::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void AddDynamicPartitions::__set_tablename(const std::string& val) {
  this->tablename = val;
}

void AddDynamicPartitions::__set_partitionnames(const std::vector<std::string> & val) {
  this->partitionnames = val;
}

void AddDynamicPartitions::__set_operationType(const DataOperationType::type val) {
  this->operationType = val;
__isset.operationType = true;
}

uint32_t AddDynamicPartitions::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_txnid = false;
  bool isset_writeid = false;
  bool isset_dbname = false;
  bool isset_tablename = false;
  bool isset_partitionnames = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          isset_txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->writeid);
          isset_writeid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbname);
          isset_dbname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tablename);
          isset_tablename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitionnames.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size769;
            ::apache::thrift::protocol::TType _etype772;
            xfer += iprot->readListBegin(_etype772, _size769);
            this->partitionnames.resize(_size769);
            uint32_t _i773;
            for (_i773 = 0; _i773 < _size769; ++_i773)
            {
              xfer += iprot->readString(this->partitionnames[_i773]);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size745;
            ::apache::thrift::protocol::TType _etype748;
            xfer += iprot->readListBegin(_etype748, _size745);
            this->partitionnames.resize(_size745);
            uint32_t _i749;
            for (_i749 = 0; _i749 < _size745; ++_i749)
            {
              xfer += iprot->readString(this->partitionnames[_i749]);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size703;
            ::apache::thrift::protocol::TType _etype706;
            xfer += iprot->readListBegin(_etype706, _size703);
            this->partitionnames.resize(_size703);
            uint32_t _i707;
            for (_i707 = 0; _i707 < _size703; ++_i707)
            {
              xfer += iprot->readString(this->partitionnames[_i707]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size707;
            ::apache::thrift::protocol::TType _etype710;
            xfer += iprot->readListBegin(_etype710, _size707);
            this->partitionnames.resize(_size707);
            uint32_t _i711;
            for (_i711 = 0; _i711 < _size707; ++_i711)
            {
              xfer += iprot->readString(this->partitionnames[_i711]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size707;
            ::apache::thrift::protocol::TType _etype710;
            xfer += iprot->readListBegin(_etype710, _size707);
            this->partitionnames.resize(_size707);
            uint32_t _i711;
            for (_i711 = 0; _i711 < _size707; ++_i711)
            {
              xfer += iprot->readString(this->partitionnames[_i711]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size749;
            ::apache::thrift::protocol::TType _etype752;
            xfer += iprot->readListBegin(_etype752, _size749);
            this->partitionnames.resize(_size749);
            uint32_t _i753;
            for (_i753 = 0; _i753 < _size749; ++_i753)
            {
              xfer += iprot->readString(this->partitionnames[_i753]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          isset_partitionnames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast774;
          xfer += iprot->readI32(ecast774);
          this->operationType = (DataOperationType::type)ecast774;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast750;
          xfer += iprot->readI32(ecast750);
          this->operationType = (DataOperationType::type)ecast750;
=======
          int32_t ecast708;
          xfer += iprot->readI32(ecast708);
          this->operationType = (DataOperationType::type)ecast708;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast712;
          xfer += iprot->readI32(ecast712);
          this->operationType = (DataOperationType::type)ecast712;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast708;
          xfer += iprot->readI32(ecast708);
          this->operationType = (DataOperationType::type)ecast708;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast712;
          xfer += iprot->readI32(ecast712);
          this->operationType = (DataOperationType::type)ecast712;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast754;
          xfer += iprot->readI32(ecast754);
          this->operationType = (DataOperationType::type)ecast754;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          this->__isset.operationType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_txnid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_writeid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dbname)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tablename)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_partitionnames)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AddDynamicPartitions::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AddDynamicPartitions");

  xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->txnid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("writeid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->writeid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbname", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->dbname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tablename", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->tablename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partitionnames", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->partitionnames.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter775;
    for (_iter775 = this->partitionnames.begin(); _iter775 != this->partitionnames.end(); ++_iter775)
    {
      xfer += oprot->writeString((*_iter775));
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter751;
    for (_iter751 = this->partitionnames.begin(); _iter751 != this->partitionnames.end(); ++_iter751)
    {
      xfer += oprot->writeString((*_iter751));
=======
    std::vector<std::string> ::const_iterator _iter709;
    for (_iter709 = this->partitionnames.begin(); _iter709 != this->partitionnames.end(); ++_iter709)
    {
      xfer += oprot->writeString((*_iter709));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<std::string> ::const_iterator _iter713;
    for (_iter713 = this->partitionnames.begin(); _iter713 != this->partitionnames.end(); ++_iter713)
    {
      xfer += oprot->writeString((*_iter713));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<std::string> ::const_iterator _iter709;
    for (_iter709 = this->partitionnames.begin(); _iter709 != this->partitionnames.end(); ++_iter709)
    {
      xfer += oprot->writeString((*_iter709));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<std::string> ::const_iterator _iter713;
    for (_iter713 = this->partitionnames.begin(); _iter713 != this->partitionnames.end(); ++_iter713)
    {
      xfer += oprot->writeString((*_iter713));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<std::string> ::const_iterator _iter755;
    for (_iter755 = this->partitionnames.begin(); _iter755 != this->partitionnames.end(); ++_iter755)
    {
      xfer += oprot->writeString((*_iter755));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.operationType) {
    xfer += oprot->writeFieldBegin("operationType", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32((int32_t)this->operationType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AddDynamicPartitions &a, AddDynamicPartitions &b) {
  using ::std::swap;
  swap(a.txnid, b.txnid);
  swap(a.writeid, b.writeid);
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partitionnames, b.partitionnames);
  swap(a.operationType, b.operationType);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
AddDynamicPartitions::AddDynamicPartitions(const AddDynamicPartitions& other776) {
  txnid = other776.txnid;
  writeid = other776.writeid;
  dbname = other776.dbname;
  tablename = other776.tablename;
  partitionnames = other776.partitionnames;
  operationType = other776.operationType;
  __isset = other776.__isset;
}
AddDynamicPartitions& AddDynamicPartitions::operator=(const AddDynamicPartitions& other777) {
  txnid = other777.txnid;
  writeid = other777.writeid;
  dbname = other777.dbname;
  tablename = other777.tablename;
  partitionnames = other777.partitionnames;
  operationType = other777.operationType;
  __isset = other777.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
AddDynamicPartitions::AddDynamicPartitions(const AddDynamicPartitions& other752) {
  txnid = other752.txnid;
  writeid = other752.writeid;
  dbname = other752.dbname;
  tablename = other752.tablename;
  partitionnames = other752.partitionnames;
  operationType = other752.operationType;
  __isset = other752.__isset;
}
AddDynamicPartitions& AddDynamicPartitions::operator=(const AddDynamicPartitions& other753) {
  txnid = other753.txnid;
  writeid = other753.writeid;
  dbname = other753.dbname;
  tablename = other753.tablename;
  partitionnames = other753.partitionnames;
  operationType = other753.operationType;
  __isset = other753.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
AddDynamicPartitions::AddDynamicPartitions(const AddDynamicPartitions& other710) {
  txnid = other710.txnid;
  dbname = other710.dbname;
  tablename = other710.tablename;
  partitionnames = other710.partitionnames;
  operationType = other710.operationType;
  __isset = other710.__isset;
}
AddDynamicPartitions& AddDynamicPartitions::operator=(const AddDynamicPartitions& other711) {
  txnid = other711.txnid;
  dbname = other711.dbname;
  tablename = other711.tablename;
  partitionnames = other711.partitionnames;
  operationType = other711.operationType;
  __isset = other711.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
AddDynamicPartitions::AddDynamicPartitions(const AddDynamicPartitions& other714) {
  txnid = other714.txnid;
  dbname = other714.dbname;
  tablename = other714.tablename;
  partitionnames = other714.partitionnames;
  operationType = other714.operationType;
  __isset = other714.__isset;
}
AddDynamicPartitions& AddDynamicPartitions::operator=(const AddDynamicPartitions& other715) {
  txnid = other715.txnid;
  dbname = other715.dbname;
  tablename = other715.tablename;
  partitionnames = other715.partitionnames;
  operationType = other715.operationType;
  __isset = other715.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
AddDynamicPartitions::AddDynamicPartitions(const AddDynamicPartitions& other756) {
  txnid = other756.txnid;
  writeid = other756.writeid;
  dbname = other756.dbname;
  tablename = other756.tablename;
  partitionnames = other756.partitionnames;
  operationType = other756.operationType;
  __isset = other756.__isset;
}
AddDynamicPartitions& AddDynamicPartitions::operator=(const AddDynamicPartitions& other757) {
  txnid = other757.txnid;
  writeid = other757.writeid;
  dbname = other757.dbname;
  tablename = other757.tablename;
  partitionnames = other757.partitionnames;
  operationType = other757.operationType;
  __isset = other757.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void AddDynamicPartitions::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddDynamicPartitions(";
  out << "txnid=" << to_string(txnid);
  out << ", " << "writeid=" << to_string(writeid);
  out << ", " << "dbname=" << to_string(dbname);
  out << ", " << "tablename=" << to_string(tablename);
  out << ", " << "partitionnames=" << to_string(partitionnames);
  out << ", " << "operationType="; (__isset.operationType ? (out << to_string(operationType)) : (out << "<null>"));
  out << ")";
}


BasicTxnInfo::~BasicTxnInfo() throw() {
}


void BasicTxnInfo::__set_isnull(const bool val) {
  this->isnull = val;
}

void BasicTxnInfo::__set_time(const int64_t val) {
  this->time = val;
__isset.time = true;
}

void BasicTxnInfo::__set_txnid(const int64_t val) {
  this->txnid = val;
__isset.txnid = true;
}

void BasicTxnInfo::__set_dbname(const std::string& val) {
  this->dbname = val;
__isset.dbname = true;
}

void BasicTxnInfo::__set_tablename(const std::string& val) {
  this->tablename = val;
__isset.tablename = true;
}

void BasicTxnInfo::__set_partitionname(const std::string& val) {
  this->partitionname = val;
__isset.partitionname = true;
}

uint32_t BasicTxnInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_isnull = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isnull);
          isset_isnull = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txnid);
          this->__isset.txnid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbname);
          this->__isset.dbname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tablename);
          this->__isset.tablename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->partitionname);
          this->__isset.partitionname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_isnull)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BasicTxnInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BasicTxnInfo");

  xfer += oprot->writeFieldBegin("isnull", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->isnull);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.time) {
    xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->time);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.txnid) {
    xfer += oprot->writeFieldBegin("txnid", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->txnid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dbname) {
    xfer += oprot->writeFieldBegin("dbname", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->dbname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tablename) {
    xfer += oprot->writeFieldBegin("tablename", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->tablename);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partitionname) {
    xfer += oprot->writeFieldBegin("partitionname", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->partitionname);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BasicTxnInfo &a, BasicTxnInfo &b) {
  using ::std::swap;
  swap(a.isnull, b.isnull);
  swap(a.time, b.time);
  swap(a.txnid, b.txnid);
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partitionname, b.partitionname);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
BasicTxnInfo::BasicTxnInfo(const BasicTxnInfo& other778) {
  isnull = other778.isnull;
  time = other778.time;
  txnid = other778.txnid;
  dbname = other778.dbname;
  tablename = other778.tablename;
  partitionname = other778.partitionname;
  __isset = other778.__isset;
}
BasicTxnInfo& BasicTxnInfo::operator=(const BasicTxnInfo& other779) {
  isnull = other779.isnull;
  time = other779.time;
  txnid = other779.txnid;
  dbname = other779.dbname;
  tablename = other779.tablename;
  partitionname = other779.partitionname;
  __isset = other779.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
BasicTxnInfo::BasicTxnInfo(const BasicTxnInfo& other754) {
  isnull = other754.isnull;
  time = other754.time;
  txnid = other754.txnid;
  dbname = other754.dbname;
  tablename = other754.tablename;
  partitionname = other754.partitionname;
  __isset = other754.__isset;
}
BasicTxnInfo& BasicTxnInfo::operator=(const BasicTxnInfo& other755) {
  isnull = other755.isnull;
  time = other755.time;
  txnid = other755.txnid;
  dbname = other755.dbname;
  tablename = other755.tablename;
  partitionname = other755.partitionname;
  __isset = other755.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
BasicTxnInfo::BasicTxnInfo(const BasicTxnInfo& other712) {
  isnull = other712.isnull;
  time = other712.time;
  txnid = other712.txnid;
  dbname = other712.dbname;
  tablename = other712.tablename;
  partitionname = other712.partitionname;
  __isset = other712.__isset;
}
BasicTxnInfo& BasicTxnInfo::operator=(const BasicTxnInfo& other713) {
  isnull = other713.isnull;
  time = other713.time;
  txnid = other713.txnid;
  dbname = other713.dbname;
  tablename = other713.tablename;
  partitionname = other713.partitionname;
  __isset = other713.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
BasicTxnInfo::BasicTxnInfo(const BasicTxnInfo& other716) {
  isnull = other716.isnull;
  time = other716.time;
  txnid = other716.txnid;
  dbname = other716.dbname;
  tablename = other716.tablename;
  partitionname = other716.partitionname;
  __isset = other716.__isset;
}
BasicTxnInfo& BasicTxnInfo::operator=(const BasicTxnInfo& other717) {
  isnull = other717.isnull;
  time = other717.time;
  txnid = other717.txnid;
  dbname = other717.dbname;
  tablename = other717.tablename;
  partitionname = other717.partitionname;
  __isset = other717.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
BasicTxnInfo::BasicTxnInfo(const BasicTxnInfo& other758) {
  isnull = other758.isnull;
  time = other758.time;
  txnid = other758.txnid;
  dbname = other758.dbname;
  tablename = other758.tablename;
  partitionname = other758.partitionname;
  __isset = other758.__isset;
}
BasicTxnInfo& BasicTxnInfo::operator=(const BasicTxnInfo& other759) {
  isnull = other759.isnull;
  time = other759.time;
  txnid = other759.txnid;
  dbname = other759.dbname;
  tablename = other759.tablename;
  partitionname = other759.partitionname;
  __isset = other759.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void BasicTxnInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BasicTxnInfo(";
  out << "isnull=" << to_string(isnull);
  out << ", " << "time="; (__isset.time ? (out << to_string(time)) : (out << "<null>"));
  out << ", " << "txnid="; (__isset.txnid ? (out << to_string(txnid)) : (out << "<null>"));
  out << ", " << "dbname="; (__isset.dbname ? (out << to_string(dbname)) : (out << "<null>"));
  out << ", " << "tablename="; (__isset.tablename ? (out << to_string(tablename)) : (out << "<null>"));
  out << ", " << "partitionname="; (__isset.partitionname ? (out << to_string(partitionname)) : (out << "<null>"));
  out << ")";
}


CreationMetadata::~CreationMetadata() throw() {
}


void CreationMetadata::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void CreationMetadata::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void CreationMetadata::__set_tablesUsed(const std::set<std::string> & val) {
  this->tablesUsed = val;
}

void CreationMetadata::__set_validTxnList(const std::string& val) {
  this->validTxnList = val;
__isset.validTxnList = true;
}

uint32_t CreationMetadata::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;
  bool isset_tblName = false;
  bool isset_tablesUsed = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tblName);
          isset_tblName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->tablesUsed.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size780;
            ::apache::thrift::protocol::TType _etype783;
            xfer += iprot->readSetBegin(_etype783, _size780);
            uint32_t _i784;
            for (_i784 = 0; _i784 < _size780; ++_i784)
            {
              std::string _elem785;
              xfer += iprot->readString(_elem785);
              this->tablesUsed.insert(_elem785);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size756;
            ::apache::thrift::protocol::TType _etype759;
            xfer += iprot->readSetBegin(_etype759, _size756);
            uint32_t _i760;
            for (_i760 = 0; _i760 < _size756; ++_i760)
            {
              std::string _elem761;
              xfer += iprot->readString(_elem761);
              this->tablesUsed.insert(_elem761);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size714;
            ::apache::thrift::protocol::TType _etype717;
            xfer += iprot->readSetBegin(_etype717, _size714);
            uint32_t _i718;
            for (_i718 = 0; _i718 < _size714; ++_i718)
            {
              std::string _elem719;
              xfer += iprot->readString(_elem719);
              this->tablesUsed.insert(_elem719);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size718;
            ::apache::thrift::protocol::TType _etype721;
            xfer += iprot->readSetBegin(_etype721, _size718);
            uint32_t _i722;
            for (_i722 = 0; _i722 < _size718; ++_i722)
            {
              std::string _elem723;
              xfer += iprot->readString(_elem723);
              this->tablesUsed.insert(_elem723);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size718;
            ::apache::thrift::protocol::TType _etype721;
            xfer += iprot->readSetBegin(_etype721, _size718);
            uint32_t _i722;
            for (_i722 = 0; _i722 < _size718; ++_i722)
            {
              std::string _elem723;
              xfer += iprot->readString(_elem723);
              this->tablesUsed.insert(_elem723);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size760;
            ::apache::thrift::protocol::TType _etype763;
            xfer += iprot->readSetBegin(_etype763, _size760);
            uint32_t _i764;
            for (_i764 = 0; _i764 < _size760; ++_i764)
            {
              std::string _elem765;
              xfer += iprot->readString(_elem765);
              this->tablesUsed.insert(_elem765);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readSetEnd();
          }
          isset_tablesUsed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->validTxnList);
          this->__isset.validTxnList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tblName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tablesUsed)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CreationMetadata::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreationMetadata");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tblName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tblName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tablesUsed", ::apache::thrift::protocol::T_SET, 3);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tablesUsed.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::set<std::string> ::const_iterator _iter786;
    for (_iter786 = this->tablesUsed.begin(); _iter786 != this->tablesUsed.end(); ++_iter786)
    {
      xfer += oprot->writeString((*_iter786));
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::set<std::string> ::const_iterator _iter762;
    for (_iter762 = this->tablesUsed.begin(); _iter762 != this->tablesUsed.end(); ++_iter762)
    {
      xfer += oprot->writeString((*_iter762));
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::set<std::string> ::const_iterator _iter720;
    for (_iter720 = this->tablesUsed.begin(); _iter720 != this->tablesUsed.end(); ++_iter720)
    {
      xfer += oprot->writeString((*_iter720));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::set<std::string> ::const_iterator _iter724;
    for (_iter724 = this->tablesUsed.begin(); _iter724 != this->tablesUsed.end(); ++_iter724)
    {
      xfer += oprot->writeString((*_iter724));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::set<std::string> ::const_iterator _iter724;
    for (_iter724 = this->tablesUsed.begin(); _iter724 != this->tablesUsed.end(); ++_iter724)
    {
      xfer += oprot->writeString((*_iter724));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::set<std::string> ::const_iterator _iter766;
    for (_iter766 = this->tablesUsed.begin(); _iter766 != this->tablesUsed.end(); ++_iter766)
    {
      xfer += oprot->writeString((*_iter766));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.validTxnList) {
    xfer += oprot->writeFieldBegin("validTxnList", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->validTxnList);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreationMetadata &a, CreationMetadata &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.tablesUsed, b.tablesUsed);
  swap(a.validTxnList, b.validTxnList);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
CreationMetadata::CreationMetadata(const CreationMetadata& other787) {
  dbName = other787.dbName;
  tblName = other787.tblName;
  tablesUsed = other787.tablesUsed;
  validTxnList = other787.validTxnList;
  __isset = other787.__isset;
}
CreationMetadata& CreationMetadata::operator=(const CreationMetadata& other788) {
  dbName = other788.dbName;
  tblName = other788.tblName;
  tablesUsed = other788.tablesUsed;
  validTxnList = other788.validTxnList;
  __isset = other788.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CreationMetadata::CreationMetadata(const CreationMetadata& other763) {
  dbName = other763.dbName;
  tblName = other763.tblName;
  tablesUsed = other763.tablesUsed;
  validTxnList = other763.validTxnList;
  __isset = other763.__isset;
}
CreationMetadata& CreationMetadata::operator=(const CreationMetadata& other764) {
  dbName = other764.dbName;
  tblName = other764.tblName;
  tablesUsed = other764.tablesUsed;
  validTxnList = other764.validTxnList;
  __isset = other764.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
CreationMetadata::CreationMetadata(const CreationMetadata& other721) {
  dbName = other721.dbName;
  tblName = other721.tblName;
  tablesUsed = other721.tablesUsed;
  validTxnList = other721.validTxnList;
  __isset = other721.__isset;
}
CreationMetadata& CreationMetadata::operator=(const CreationMetadata& other722) {
  dbName = other722.dbName;
  tblName = other722.tblName;
  tablesUsed = other722.tablesUsed;
  validTxnList = other722.validTxnList;
  __isset = other722.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CreationMetadata::CreationMetadata(const CreationMetadata& other725) {
  dbName = other725.dbName;
  tblName = other725.tblName;
  tablesUsed = other725.tablesUsed;
  validTxnList = other725.validTxnList;
  __isset = other725.__isset;
}
=======
CreationMetadata::CreationMetadata(const CreationMetadata& other725) {
  dbName = other725.dbName;
  tblName = other725.tblName;
  tablesUsed = other725.tablesUsed;
  validTxnList = other725.validTxnList;
  __isset = other725.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
CreationMetadata& CreationMetadata::operator=(const CreationMetadata& other726) {
  dbName = other726.dbName;
  tblName = other726.tblName;
  tablesUsed = other726.tablesUsed;
  validTxnList = other726.validTxnList;
  __isset = other726.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
CreationMetadata::CreationMetadata(const CreationMetadata& other767) {
  dbName = other767.dbName;
  tblName = other767.tblName;
  tablesUsed = other767.tablesUsed;
  validTxnList = other767.validTxnList;
  __isset = other767.__isset;
}
CreationMetadata& CreationMetadata::operator=(const CreationMetadata& other768) {
  dbName = other768.dbName;
  tblName = other768.tblName;
  tablesUsed = other768.tablesUsed;
  validTxnList = other768.validTxnList;
  __isset = other768.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void CreationMetadata::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreationMetadata(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "tablesUsed=" << to_string(tablesUsed);
  out << ", " << "validTxnList="; (__isset.validTxnList ? (out << to_string(validTxnList)) : (out << "<null>"));
  out << ")";
}


NotificationEventRequest::~NotificationEventRequest() throw() {
}


void NotificationEventRequest::__set_lastEvent(const int64_t val) {
  this->lastEvent = val;
}

void NotificationEventRequest::__set_maxEvents(const int32_t val) {
  this->maxEvents = val;
__isset.maxEvents = true;
}

uint32_t NotificationEventRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_lastEvent = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastEvent);
          isset_lastEvent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxEvents);
          this->__isset.maxEvents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_lastEvent)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NotificationEventRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotificationEventRequest");

  xfer += oprot->writeFieldBegin("lastEvent", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lastEvent);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.maxEvents) {
    xfer += oprot->writeFieldBegin("maxEvents", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->maxEvents);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotificationEventRequest &a, NotificationEventRequest &b) {
  using ::std::swap;
  swap(a.lastEvent, b.lastEvent);
  swap(a.maxEvents, b.maxEvents);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
NotificationEventRequest::NotificationEventRequest(const NotificationEventRequest& other789) {
  lastEvent = other789.lastEvent;
  maxEvents = other789.maxEvents;
  __isset = other789.__isset;
}
NotificationEventRequest& NotificationEventRequest::operator=(const NotificationEventRequest& other790) {
  lastEvent = other790.lastEvent;
  maxEvents = other790.maxEvents;
  __isset = other790.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NotificationEventRequest::NotificationEventRequest(const NotificationEventRequest& other765) {
  lastEvent = other765.lastEvent;
  maxEvents = other765.maxEvents;
  __isset = other765.__isset;
}
NotificationEventRequest& NotificationEventRequest::operator=(const NotificationEventRequest& other766) {
  lastEvent = other766.lastEvent;
  maxEvents = other766.maxEvents;
  __isset = other766.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
NotificationEventRequest::NotificationEventRequest(const NotificationEventRequest& other723) {
  lastEvent = other723.lastEvent;
  maxEvents = other723.maxEvents;
  __isset = other723.__isset;
}
NotificationEventRequest& NotificationEventRequest::operator=(const NotificationEventRequest& other724) {
  lastEvent = other724.lastEvent;
  maxEvents = other724.maxEvents;
  __isset = other724.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NotificationEventRequest::NotificationEventRequest(const NotificationEventRequest& other727) {
  lastEvent = other727.lastEvent;
  maxEvents = other727.maxEvents;
  __isset = other727.__isset;
}
=======
NotificationEventRequest::NotificationEventRequest(const NotificationEventRequest& other727) {
  lastEvent = other727.lastEvent;
  maxEvents = other727.maxEvents;
  __isset = other727.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
NotificationEventRequest& NotificationEventRequest::operator=(const NotificationEventRequest& other728) {
  lastEvent = other728.lastEvent;
  maxEvents = other728.maxEvents;
  __isset = other728.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
NotificationEventRequest::NotificationEventRequest(const NotificationEventRequest& other769) {
  lastEvent = other769.lastEvent;
  maxEvents = other769.maxEvents;
  __isset = other769.__isset;
}
NotificationEventRequest& NotificationEventRequest::operator=(const NotificationEventRequest& other770) {
  lastEvent = other770.lastEvent;
  maxEvents = other770.maxEvents;
  __isset = other770.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void NotificationEventRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotificationEventRequest(";
  out << "lastEvent=" << to_string(lastEvent);
  out << ", " << "maxEvents="; (__isset.maxEvents ? (out << to_string(maxEvents)) : (out << "<null>"));
  out << ")";
}


NotificationEvent::~NotificationEvent() throw() {
}


void NotificationEvent::__set_eventId(const int64_t val) {
  this->eventId = val;
}

void NotificationEvent::__set_eventTime(const int32_t val) {
  this->eventTime = val;
}

void NotificationEvent::__set_eventType(const std::string& val) {
  this->eventType = val;
}

void NotificationEvent::__set_dbName(const std::string& val) {
  this->dbName = val;
__isset.dbName = true;
}

void NotificationEvent::__set_tableName(const std::string& val) {
  this->tableName = val;
__isset.tableName = true;
}

void NotificationEvent::__set_message(const std::string& val) {
  this->message = val;
}

void NotificationEvent::__set_messageFormat(const std::string& val) {
  this->messageFormat = val;
__isset.messageFormat = true;
}

uint32_t NotificationEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_eventId = false;
  bool isset_eventTime = false;
  bool isset_eventType = false;
  bool isset_message = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventId);
          isset_eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventTime);
          isset_eventTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventType);
          isset_eventType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          this->__isset.dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          isset_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->messageFormat);
          this->__isset.messageFormat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_eventId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_message)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NotificationEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotificationEvent");

  xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->eventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventTime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->eventTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventType", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->eventType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.dbName) {
    xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->dbName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tableName) {
    xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->tableName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.messageFormat) {
    xfer += oprot->writeFieldBegin("messageFormat", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->messageFormat);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotificationEvent &a, NotificationEvent &b) {
  using ::std::swap;
  swap(a.eventId, b.eventId);
  swap(a.eventTime, b.eventTime);
  swap(a.eventType, b.eventType);
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.message, b.message);
  swap(a.messageFormat, b.messageFormat);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
NotificationEvent::NotificationEvent(const NotificationEvent& other791) {
  eventId = other791.eventId;
  eventTime = other791.eventTime;
  eventType = other791.eventType;
  dbName = other791.dbName;
  tableName = other791.tableName;
  message = other791.message;
  messageFormat = other791.messageFormat;
  __isset = other791.__isset;
}
NotificationEvent& NotificationEvent::operator=(const NotificationEvent& other792) {
  eventId = other792.eventId;
  eventTime = other792.eventTime;
  eventType = other792.eventType;
  dbName = other792.dbName;
  tableName = other792.tableName;
  message = other792.message;
  messageFormat = other792.messageFormat;
  __isset = other792.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NotificationEvent::NotificationEvent(const NotificationEvent& other767) {
  eventId = other767.eventId;
  eventTime = other767.eventTime;
  eventType = other767.eventType;
  dbName = other767.dbName;
  tableName = other767.tableName;
  message = other767.message;
  messageFormat = other767.messageFormat;
  __isset = other767.__isset;
}
NotificationEvent& NotificationEvent::operator=(const NotificationEvent& other768) {
  eventId = other768.eventId;
  eventTime = other768.eventTime;
  eventType = other768.eventType;
  dbName = other768.dbName;
  tableName = other768.tableName;
  message = other768.message;
  messageFormat = other768.messageFormat;
  __isset = other768.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
NotificationEvent::NotificationEvent(const NotificationEvent& other725) {
  eventId = other725.eventId;
  eventTime = other725.eventTime;
  eventType = other725.eventType;
  dbName = other725.dbName;
  tableName = other725.tableName;
  message = other725.message;
  messageFormat = other725.messageFormat;
  __isset = other725.__isset;
}
NotificationEvent& NotificationEvent::operator=(const NotificationEvent& other726) {
  eventId = other726.eventId;
  eventTime = other726.eventTime;
  eventType = other726.eventType;
  dbName = other726.dbName;
  tableName = other726.tableName;
  message = other726.message;
  messageFormat = other726.messageFormat;
  __isset = other726.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
NotificationEvent::NotificationEvent(const NotificationEvent& other729) {
  eventId = other729.eventId;
  eventTime = other729.eventTime;
  eventType = other729.eventType;
  dbName = other729.dbName;
  tableName = other729.tableName;
  message = other729.message;
  messageFormat = other729.messageFormat;
  __isset = other729.__isset;
}
NotificationEvent& NotificationEvent::operator=(const NotificationEvent& other730) {
  eventId = other730.eventId;
  eventTime = other730.eventTime;
  eventType = other730.eventType;
  dbName = other730.dbName;
  tableName = other730.tableName;
  message = other730.message;
  messageFormat = other730.messageFormat;
  __isset = other730.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
NotificationEvent::NotificationEvent(const NotificationEvent& other771) {
  eventId = other771.eventId;
  eventTime = other771.eventTime;
  eventType = other771.eventType;
  dbName = other771.dbName;
  tableName = other771.tableName;
  message = other771.message;
  messageFormat = other771.messageFormat;
  __isset = other771.__isset;
}
NotificationEvent& NotificationEvent::operator=(const NotificationEvent& other772) {
  eventId = other772.eventId;
  eventTime = other772.eventTime;
  eventType = other772.eventType;
  dbName = other772.dbName;
  tableName = other772.tableName;
  message = other772.message;
  messageFormat = other772.messageFormat;
  __isset = other772.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void NotificationEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotificationEvent(";
  out << "eventId=" << to_string(eventId);
  out << ", " << "eventTime=" << to_string(eventTime);
  out << ", " << "eventType=" << to_string(eventType);
  out << ", " << "dbName="; (__isset.dbName ? (out << to_string(dbName)) : (out << "<null>"));
  out << ", " << "tableName="; (__isset.tableName ? (out << to_string(tableName)) : (out << "<null>"));
  out << ", " << "message=" << to_string(message);
  out << ", " << "messageFormat="; (__isset.messageFormat ? (out << to_string(messageFormat)) : (out << "<null>"));
  out << ")";
}


NotificationEventResponse::~NotificationEventResponse() throw() {
}


void NotificationEventResponse::__set_events(const std::vector<NotificationEvent> & val) {
  this->events = val;
}

uint32_t NotificationEventResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_events = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->events.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size793;
            ::apache::thrift::protocol::TType _etype796;
            xfer += iprot->readListBegin(_etype796, _size793);
            this->events.resize(_size793);
            uint32_t _i797;
            for (_i797 = 0; _i797 < _size793; ++_i797)
            {
              xfer += this->events[_i797].read(iprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size769;
            ::apache::thrift::protocol::TType _etype772;
            xfer += iprot->readListBegin(_etype772, _size769);
            this->events.resize(_size769);
            uint32_t _i773;
            for (_i773 = 0; _i773 < _size769; ++_i773)
            {
              xfer += this->events[_i773].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size727;
            ::apache::thrift::protocol::TType _etype730;
            xfer += iprot->readListBegin(_etype730, _size727);
            this->events.resize(_size727);
            uint32_t _i731;
            for (_i731 = 0; _i731 < _size727; ++_i731)
<<<<<<< HEAD
            {
              xfer += this->events[_i731].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size731;
            ::apache::thrift::protocol::TType _etype734;
            xfer += iprot->readListBegin(_etype734, _size731);
            this->events.resize(_size731);
            uint32_t _i735;
            for (_i735 = 0; _i735 < _size731; ++_i735)
<<<<<<< HEAD
            {
              xfer += this->events[_i735].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              xfer += this->events[_i731].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += this->events[_i735].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size773;
            ::apache::thrift::protocol::TType _etype776;
            xfer += iprot->readListBegin(_etype776, _size773);
            this->events.resize(_size773);
            uint32_t _i777;
            for (_i777 = 0; _i777 < _size773; ++_i777)
            {
              xfer += this->events[_i777].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          isset_events = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_events)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NotificationEventResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotificationEventResponse");

  xfer += oprot->writeFieldBegin("events", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->events.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<NotificationEvent> ::const_iterator _iter798;
    for (_iter798 = this->events.begin(); _iter798 != this->events.end(); ++_iter798)
    {
      xfer += (*_iter798).write(oprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<NotificationEvent> ::const_iterator _iter774;
    for (_iter774 = this->events.begin(); _iter774 != this->events.end(); ++_iter774)
    {
      xfer += (*_iter774).write(oprot);
=======
    std::vector<NotificationEvent> ::const_iterator _iter732;
    for (_iter732 = this->events.begin(); _iter732 != this->events.end(); ++_iter732)
    {
      xfer += (*_iter732).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<NotificationEvent> ::const_iterator _iter736;
    for (_iter736 = this->events.begin(); _iter736 != this->events.end(); ++_iter736)
    {
      xfer += (*_iter736).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<NotificationEvent> ::const_iterator _iter732;
    for (_iter732 = this->events.begin(); _iter732 != this->events.end(); ++_iter732)
    {
      xfer += (*_iter732).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<NotificationEvent> ::const_iterator _iter736;
    for (_iter736 = this->events.begin(); _iter736 != this->events.end(); ++_iter736)
    {
      xfer += (*_iter736).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<NotificationEvent> ::const_iterator _iter778;
    for (_iter778 = this->events.begin(); _iter778 != this->events.end(); ++_iter778)
    {
      xfer += (*_iter778).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotificationEventResponse &a, NotificationEventResponse &b) {
  using ::std::swap;
  swap(a.events, b.events);
}

<<<<<<< HEAD
<<<<<<< HEAD
NotificationEventResponse::NotificationEventResponse(const NotificationEventResponse& other799) {
  events = other799.events;
}
NotificationEventResponse& NotificationEventResponse::operator=(const NotificationEventResponse& other800) {
  events = other800.events;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NotificationEventResponse::NotificationEventResponse(const NotificationEventResponse& other775) {
  events = other775.events;
}
NotificationEventResponse& NotificationEventResponse::operator=(const NotificationEventResponse& other776) {
  events = other776.events;
=======
NotificationEventResponse::NotificationEventResponse(const NotificationEventResponse& other733) {
  events = other733.events;
}
NotificationEventResponse& NotificationEventResponse::operator=(const NotificationEventResponse& other734) {
  events = other734.events;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NotificationEventResponse::NotificationEventResponse(const NotificationEventResponse& other737) {
  events = other737.events;
}
NotificationEventResponse& NotificationEventResponse::operator=(const NotificationEventResponse& other738) {
  events = other738.events;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
NotificationEventResponse::NotificationEventResponse(const NotificationEventResponse& other733) {
  events = other733.events;
}
NotificationEventResponse& NotificationEventResponse::operator=(const NotificationEventResponse& other734) {
  events = other734.events;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NotificationEventResponse::NotificationEventResponse(const NotificationEventResponse& other737) {
  events = other737.events;
}
NotificationEventResponse& NotificationEventResponse::operator=(const NotificationEventResponse& other738) {
  events = other738.events;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
NotificationEventResponse::NotificationEventResponse(const NotificationEventResponse& other779) {
  events = other779.events;
}
NotificationEventResponse& NotificationEventResponse::operator=(const NotificationEventResponse& other780) {
  events = other780.events;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void NotificationEventResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotificationEventResponse(";
  out << "events=" << to_string(events);
  out << ")";
}


CurrentNotificationEventId::~CurrentNotificationEventId() throw() {
}


void CurrentNotificationEventId::__set_eventId(const int64_t val) {
  this->eventId = val;
}

uint32_t CurrentNotificationEventId::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_eventId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventId);
          isset_eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_eventId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CurrentNotificationEventId::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CurrentNotificationEventId");

  xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->eventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CurrentNotificationEventId &a, CurrentNotificationEventId &b) {
  using ::std::swap;
  swap(a.eventId, b.eventId);
}

<<<<<<< HEAD
<<<<<<< HEAD
CurrentNotificationEventId::CurrentNotificationEventId(const CurrentNotificationEventId& other801) {
  eventId = other801.eventId;
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(const CurrentNotificationEventId& other802) {
  eventId = other802.eventId;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CurrentNotificationEventId::CurrentNotificationEventId(const CurrentNotificationEventId& other777) {
  eventId = other777.eventId;
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(const CurrentNotificationEventId& other778) {
  eventId = other778.eventId;
=======
CurrentNotificationEventId::CurrentNotificationEventId(const CurrentNotificationEventId& other735) {
  eventId = other735.eventId;
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(const CurrentNotificationEventId& other736) {
  eventId = other736.eventId;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CurrentNotificationEventId::CurrentNotificationEventId(const CurrentNotificationEventId& other739) {
  eventId = other739.eventId;
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(const CurrentNotificationEventId& other740) {
  eventId = other740.eventId;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
CurrentNotificationEventId::CurrentNotificationEventId(const CurrentNotificationEventId& other735) {
  eventId = other735.eventId;
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(const CurrentNotificationEventId& other736) {
  eventId = other736.eventId;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CurrentNotificationEventId::CurrentNotificationEventId(const CurrentNotificationEventId& other739) {
  eventId = other739.eventId;
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(const CurrentNotificationEventId& other740) {
  eventId = other740.eventId;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
CurrentNotificationEventId::CurrentNotificationEventId(const CurrentNotificationEventId& other781) {
  eventId = other781.eventId;
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(const CurrentNotificationEventId& other782) {
  eventId = other782.eventId;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void CurrentNotificationEventId::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CurrentNotificationEventId(";
  out << "eventId=" << to_string(eventId);
  out << ")";
}


NotificationEventsCountRequest::~NotificationEventsCountRequest() throw() {
}


void NotificationEventsCountRequest::__set_fromEventId(const int64_t val) {
  this->fromEventId = val;
}

void NotificationEventsCountRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

uint32_t NotificationEventsCountRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fromEventId = false;
  bool isset_dbName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fromEventId);
          isset_fromEventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fromEventId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NotificationEventsCountRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotificationEventsCountRequest");

  xfer += oprot->writeFieldBegin("fromEventId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->fromEventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotificationEventsCountRequest &a, NotificationEventsCountRequest &b) {
  using ::std::swap;
  swap(a.fromEventId, b.fromEventId);
  swap(a.dbName, b.dbName);
}

<<<<<<< HEAD
<<<<<<< HEAD
NotificationEventsCountRequest::NotificationEventsCountRequest(const NotificationEventsCountRequest& other803) {
  fromEventId = other803.fromEventId;
  dbName = other803.dbName;
}
NotificationEventsCountRequest& NotificationEventsCountRequest::operator=(const NotificationEventsCountRequest& other804) {
  fromEventId = other804.fromEventId;
  dbName = other804.dbName;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NotificationEventsCountRequest::NotificationEventsCountRequest(const NotificationEventsCountRequest& other779) {
  fromEventId = other779.fromEventId;
  dbName = other779.dbName;
}
NotificationEventsCountRequest& NotificationEventsCountRequest::operator=(const NotificationEventsCountRequest& other780) {
  fromEventId = other780.fromEventId;
  dbName = other780.dbName;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
NotificationEventsCountRequest::NotificationEventsCountRequest(const NotificationEventsCountRequest& other737) {
  fromEventId = other737.fromEventId;
  dbName = other737.dbName;
}
NotificationEventsCountRequest& NotificationEventsCountRequest::operator=(const NotificationEventsCountRequest& other738) {
  fromEventId = other738.fromEventId;
  dbName = other738.dbName;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NotificationEventsCountRequest::NotificationEventsCountRequest(const NotificationEventsCountRequest& other741) {
  fromEventId = other741.fromEventId;
  dbName = other741.dbName;
}
NotificationEventsCountRequest& NotificationEventsCountRequest::operator=(const NotificationEventsCountRequest& other742) {
  fromEventId = other742.fromEventId;
  dbName = other742.dbName;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NotificationEventsCountRequest::NotificationEventsCountRequest(const NotificationEventsCountRequest& other741) {
  fromEventId = other741.fromEventId;
  dbName = other741.dbName;
}
NotificationEventsCountRequest& NotificationEventsCountRequest::operator=(const NotificationEventsCountRequest& other742) {
  fromEventId = other742.fromEventId;
  dbName = other742.dbName;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
NotificationEventsCountRequest::NotificationEventsCountRequest(const NotificationEventsCountRequest& other783) {
  fromEventId = other783.fromEventId;
  dbName = other783.dbName;
}
NotificationEventsCountRequest& NotificationEventsCountRequest::operator=(const NotificationEventsCountRequest& other784) {
  fromEventId = other784.fromEventId;
  dbName = other784.dbName;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void NotificationEventsCountRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotificationEventsCountRequest(";
  out << "fromEventId=" << to_string(fromEventId);
  out << ", " << "dbName=" << to_string(dbName);
  out << ")";
}


NotificationEventsCountResponse::~NotificationEventsCountResponse() throw() {
}


void NotificationEventsCountResponse::__set_eventsCount(const int64_t val) {
  this->eventsCount = val;
}

uint32_t NotificationEventsCountResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_eventsCount = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventsCount);
          isset_eventsCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_eventsCount)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NotificationEventsCountResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NotificationEventsCountResponse");

  xfer += oprot->writeFieldBegin("eventsCount", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->eventsCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotificationEventsCountResponse &a, NotificationEventsCountResponse &b) {
  using ::std::swap;
  swap(a.eventsCount, b.eventsCount);
}

<<<<<<< HEAD
<<<<<<< HEAD
NotificationEventsCountResponse::NotificationEventsCountResponse(const NotificationEventsCountResponse& other805) {
  eventsCount = other805.eventsCount;
}
NotificationEventsCountResponse& NotificationEventsCountResponse::operator=(const NotificationEventsCountResponse& other806) {
  eventsCount = other806.eventsCount;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NotificationEventsCountResponse::NotificationEventsCountResponse(const NotificationEventsCountResponse& other781) {
  eventsCount = other781.eventsCount;
}
NotificationEventsCountResponse& NotificationEventsCountResponse::operator=(const NotificationEventsCountResponse& other782) {
  eventsCount = other782.eventsCount;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
NotificationEventsCountResponse::NotificationEventsCountResponse(const NotificationEventsCountResponse& other739) {
  eventsCount = other739.eventsCount;
}
NotificationEventsCountResponse& NotificationEventsCountResponse::operator=(const NotificationEventsCountResponse& other740) {
  eventsCount = other740.eventsCount;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NotificationEventsCountResponse::NotificationEventsCountResponse(const NotificationEventsCountResponse& other743) {
  eventsCount = other743.eventsCount;
}
NotificationEventsCountResponse& NotificationEventsCountResponse::operator=(const NotificationEventsCountResponse& other744) {
  eventsCount = other744.eventsCount;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NotificationEventsCountResponse::NotificationEventsCountResponse(const NotificationEventsCountResponse& other743) {
  eventsCount = other743.eventsCount;
}
NotificationEventsCountResponse& NotificationEventsCountResponse::operator=(const NotificationEventsCountResponse& other744) {
  eventsCount = other744.eventsCount;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
NotificationEventsCountResponse::NotificationEventsCountResponse(const NotificationEventsCountResponse& other785) {
  eventsCount = other785.eventsCount;
}
NotificationEventsCountResponse& NotificationEventsCountResponse::operator=(const NotificationEventsCountResponse& other786) {
  eventsCount = other786.eventsCount;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void NotificationEventsCountResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotificationEventsCountResponse(";
  out << "eventsCount=" << to_string(eventsCount);
  out << ")";
}


InsertEventRequestData::~InsertEventRequestData() throw() {
}


void InsertEventRequestData::__set_replace(const bool val) {
  this->replace = val;
__isset.replace = true;
}

void InsertEventRequestData::__set_filesAdded(const std::vector<std::string> & val) {
  this->filesAdded = val;
}

void InsertEventRequestData::__set_filesAddedChecksum(const std::vector<std::string> & val) {
  this->filesAddedChecksum = val;
__isset.filesAddedChecksum = true;
}

uint32_t InsertEventRequestData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_filesAdded = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->replace);
          this->__isset.replace = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->filesAdded.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size807;
            ::apache::thrift::protocol::TType _etype810;
            xfer += iprot->readListBegin(_etype810, _size807);
            this->filesAdded.resize(_size807);
            uint32_t _i811;
            for (_i811 = 0; _i811 < _size807; ++_i811)
            {
              xfer += iprot->readString(this->filesAdded[_i811]);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size783;
            ::apache::thrift::protocol::TType _etype786;
            xfer += iprot->readListBegin(_etype786, _size783);
            this->filesAdded.resize(_size783);
            uint32_t _i787;
            for (_i787 = 0; _i787 < _size783; ++_i787)
            {
              xfer += iprot->readString(this->filesAdded[_i787]);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size741;
            ::apache::thrift::protocol::TType _etype744;
            xfer += iprot->readListBegin(_etype744, _size741);
            this->filesAdded.resize(_size741);
            uint32_t _i745;
            for (_i745 = 0; _i745 < _size741; ++_i745)
            {
              xfer += iprot->readString(this->filesAdded[_i745]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size745;
            ::apache::thrift::protocol::TType _etype748;
            xfer += iprot->readListBegin(_etype748, _size745);
            this->filesAdded.resize(_size745);
            uint32_t _i749;
            for (_i749 = 0; _i749 < _size745; ++_i749)
            {
              xfer += iprot->readString(this->filesAdded[_i749]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size745;
            ::apache::thrift::protocol::TType _etype748;
            xfer += iprot->readListBegin(_etype748, _size745);
            this->filesAdded.resize(_size745);
            uint32_t _i749;
            for (_i749 = 0; _i749 < _size745; ++_i749)
            {
              xfer += iprot->readString(this->filesAdded[_i749]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size787;
            ::apache::thrift::protocol::TType _etype790;
            xfer += iprot->readListBegin(_etype790, _size787);
            this->filesAdded.resize(_size787);
            uint32_t _i791;
            for (_i791 = 0; _i791 < _size787; ++_i791)
            {
              xfer += iprot->readString(this->filesAdded[_i791]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          isset_filesAdded = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->filesAddedChecksum.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size812;
            ::apache::thrift::protocol::TType _etype815;
            xfer += iprot->readListBegin(_etype815, _size812);
            this->filesAddedChecksum.resize(_size812);
            uint32_t _i816;
            for (_i816 = 0; _i816 < _size812; ++_i816)
            {
              xfer += iprot->readString(this->filesAddedChecksum[_i816]);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size788;
            ::apache::thrift::protocol::TType _etype791;
            xfer += iprot->readListBegin(_etype791, _size788);
            this->filesAddedChecksum.resize(_size788);
            uint32_t _i792;
            for (_i792 = 0; _i792 < _size788; ++_i792)
            {
              xfer += iprot->readString(this->filesAddedChecksum[_i792]);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size746;
            ::apache::thrift::protocol::TType _etype749;
            xfer += iprot->readListBegin(_etype749, _size746);
            this->filesAddedChecksum.resize(_size746);
            uint32_t _i750;
            for (_i750 = 0; _i750 < _size746; ++_i750)
            {
              xfer += iprot->readString(this->filesAddedChecksum[_i750]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size750;
            ::apache::thrift::protocol::TType _etype753;
            xfer += iprot->readListBegin(_etype753, _size750);
            this->filesAddedChecksum.resize(_size750);
            uint32_t _i754;
            for (_i754 = 0; _i754 < _size750; ++_i754)
            {
              xfer += iprot->readString(this->filesAddedChecksum[_i754]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size750;
            ::apache::thrift::protocol::TType _etype753;
            xfer += iprot->readListBegin(_etype753, _size750);
            this->filesAddedChecksum.resize(_size750);
            uint32_t _i754;
            for (_i754 = 0; _i754 < _size750; ++_i754)
            {
              xfer += iprot->readString(this->filesAddedChecksum[_i754]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size792;
            ::apache::thrift::protocol::TType _etype795;
            xfer += iprot->readListBegin(_etype795, _size792);
            this->filesAddedChecksum.resize(_size792);
            uint32_t _i796;
            for (_i796 = 0; _i796 < _size792; ++_i796)
            {
              xfer += iprot->readString(this->filesAddedChecksum[_i796]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.filesAddedChecksum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_filesAdded)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t InsertEventRequestData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InsertEventRequestData");

  if (this->__isset.replace) {
    xfer += oprot->writeFieldBegin("replace", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->replace);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("filesAdded", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->filesAdded.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter817;
    for (_iter817 = this->filesAdded.begin(); _iter817 != this->filesAdded.end(); ++_iter817)
    {
      xfer += oprot->writeString((*_iter817));
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter793;
    for (_iter793 = this->filesAdded.begin(); _iter793 != this->filesAdded.end(); ++_iter793)
    {
      xfer += oprot->writeString((*_iter793));
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::vector<std::string> ::const_iterator _iter751;
    for (_iter751 = this->filesAdded.begin(); _iter751 != this->filesAdded.end(); ++_iter751)
    {
      xfer += oprot->writeString((*_iter751));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<std::string> ::const_iterator _iter755;
    for (_iter755 = this->filesAdded.begin(); _iter755 != this->filesAdded.end(); ++_iter755)
    {
      xfer += oprot->writeString((*_iter755));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<std::string> ::const_iterator _iter755;
    for (_iter755 = this->filesAdded.begin(); _iter755 != this->filesAdded.end(); ++_iter755)
    {
      xfer += oprot->writeString((*_iter755));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<std::string> ::const_iterator _iter797;
    for (_iter797 = this->filesAdded.begin(); _iter797 != this->filesAdded.end(); ++_iter797)
    {
      xfer += oprot->writeString((*_iter797));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.filesAddedChecksum) {
    xfer += oprot->writeFieldBegin("filesAddedChecksum", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->filesAddedChecksum.size()));
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter818;
      for (_iter818 = this->filesAddedChecksum.begin(); _iter818 != this->filesAddedChecksum.end(); ++_iter818)
      {
        xfer += oprot->writeString((*_iter818));
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter794;
      for (_iter794 = this->filesAddedChecksum.begin(); _iter794 != this->filesAddedChecksum.end(); ++_iter794)
      {
        xfer += oprot->writeString((*_iter794));
=======
      std::vector<std::string> ::const_iterator _iter752;
      for (_iter752 = this->filesAddedChecksum.begin(); _iter752 != this->filesAddedChecksum.end(); ++_iter752)
      {
        xfer += oprot->writeString((*_iter752));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter756;
      for (_iter756 = this->filesAddedChecksum.begin(); _iter756 != this->filesAddedChecksum.end(); ++_iter756)
      {
        xfer += oprot->writeString((*_iter756));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<std::string> ::const_iterator _iter752;
      for (_iter752 = this->filesAddedChecksum.begin(); _iter752 != this->filesAddedChecksum.end(); ++_iter752)
      {
        xfer += oprot->writeString((*_iter752));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter756;
      for (_iter756 = this->filesAddedChecksum.begin(); _iter756 != this->filesAddedChecksum.end(); ++_iter756)
      {
        xfer += oprot->writeString((*_iter756));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<std::string> ::const_iterator _iter798;
      for (_iter798 = this->filesAddedChecksum.begin(); _iter798 != this->filesAddedChecksum.end(); ++_iter798)
      {
        xfer += oprot->writeString((*_iter798));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InsertEventRequestData &a, InsertEventRequestData &b) {
  using ::std::swap;
  swap(a.replace, b.replace);
  swap(a.filesAdded, b.filesAdded);
  swap(a.filesAddedChecksum, b.filesAddedChecksum);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
InsertEventRequestData::InsertEventRequestData(const InsertEventRequestData& other819) {
  replace = other819.replace;
  filesAdded = other819.filesAdded;
  filesAddedChecksum = other819.filesAddedChecksum;
  __isset = other819.__isset;
}
InsertEventRequestData& InsertEventRequestData::operator=(const InsertEventRequestData& other820) {
  replace = other820.replace;
  filesAdded = other820.filesAdded;
  filesAddedChecksum = other820.filesAddedChecksum;
  __isset = other820.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
InsertEventRequestData::InsertEventRequestData(const InsertEventRequestData& other795) {
  replace = other795.replace;
  filesAdded = other795.filesAdded;
  filesAddedChecksum = other795.filesAddedChecksum;
  __isset = other795.__isset;
}
InsertEventRequestData& InsertEventRequestData::operator=(const InsertEventRequestData& other796) {
  replace = other796.replace;
  filesAdded = other796.filesAdded;
  filesAddedChecksum = other796.filesAddedChecksum;
  __isset = other796.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
InsertEventRequestData::InsertEventRequestData(const InsertEventRequestData& other753) {
  replace = other753.replace;
  filesAdded = other753.filesAdded;
  filesAddedChecksum = other753.filesAddedChecksum;
  __isset = other753.__isset;
<<<<<<< HEAD
}
InsertEventRequestData& InsertEventRequestData::operator=(const InsertEventRequestData& other754) {
  replace = other754.replace;
  filesAdded = other754.filesAdded;
  filesAddedChecksum = other754.filesAddedChecksum;
  __isset = other754.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
InsertEventRequestData::InsertEventRequestData(const InsertEventRequestData& other757) {
  replace = other757.replace;
  filesAdded = other757.filesAdded;
  filesAddedChecksum = other757.filesAddedChecksum;
  __isset = other757.__isset;
<<<<<<< HEAD
}
InsertEventRequestData& InsertEventRequestData::operator=(const InsertEventRequestData& other758) {
  replace = other758.replace;
  filesAdded = other758.filesAdded;
  filesAddedChecksum = other758.filesAddedChecksum;
  __isset = other758.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
}
InsertEventRequestData& InsertEventRequestData::operator=(const InsertEventRequestData& other754) {
  replace = other754.replace;
  filesAdded = other754.filesAdded;
  filesAddedChecksum = other754.filesAddedChecksum;
  __isset = other754.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
}
InsertEventRequestData& InsertEventRequestData::operator=(const InsertEventRequestData& other758) {
  replace = other758.replace;
  filesAdded = other758.filesAdded;
  filesAddedChecksum = other758.filesAddedChecksum;
  __isset = other758.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
InsertEventRequestData::InsertEventRequestData(const InsertEventRequestData& other799) {
  replace = other799.replace;
  filesAdded = other799.filesAdded;
  filesAddedChecksum = other799.filesAddedChecksum;
  __isset = other799.__isset;
}
InsertEventRequestData& InsertEventRequestData::operator=(const InsertEventRequestData& other800) {
  replace = other800.replace;
  filesAdded = other800.filesAdded;
  filesAddedChecksum = other800.filesAddedChecksum;
  __isset = other800.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void InsertEventRequestData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InsertEventRequestData(";
  out << "replace="; (__isset.replace ? (out << to_string(replace)) : (out << "<null>"));
  out << ", " << "filesAdded=" << to_string(filesAdded);
  out << ", " << "filesAddedChecksum="; (__isset.filesAddedChecksum ? (out << to_string(filesAddedChecksum)) : (out << "<null>"));
  out << ")";
}


FireEventRequestData::~FireEventRequestData() throw() {
}


void FireEventRequestData::__set_insertData(const InsertEventRequestData& val) {
  this->insertData = val;
}

uint32_t FireEventRequestData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->insertData.read(iprot);
          this->__isset.insertData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FireEventRequestData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FireEventRequestData");

  xfer += oprot->writeFieldBegin("insertData", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->insertData.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FireEventRequestData &a, FireEventRequestData &b) {
  using ::std::swap;
  swap(a.insertData, b.insertData);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
FireEventRequestData::FireEventRequestData(const FireEventRequestData& other821) {
  insertData = other821.insertData;
  __isset = other821.__isset;
}
FireEventRequestData& FireEventRequestData::operator=(const FireEventRequestData& other822) {
  insertData = other822.insertData;
  __isset = other822.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
FireEventRequestData::FireEventRequestData(const FireEventRequestData& other797) {
  insertData = other797.insertData;
  __isset = other797.__isset;
}
FireEventRequestData& FireEventRequestData::operator=(const FireEventRequestData& other798) {
  insertData = other798.insertData;
  __isset = other798.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
FireEventRequestData::FireEventRequestData(const FireEventRequestData& other755) {
  insertData = other755.insertData;
  __isset = other755.__isset;
}
FireEventRequestData& FireEventRequestData::operator=(const FireEventRequestData& other756) {
  insertData = other756.insertData;
  __isset = other756.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
FireEventRequestData::FireEventRequestData(const FireEventRequestData& other759) {
  insertData = other759.insertData;
  __isset = other759.__isset;
}
FireEventRequestData& FireEventRequestData::operator=(const FireEventRequestData& other760) {
  insertData = other760.insertData;
  __isset = other760.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
FireEventRequestData::FireEventRequestData(const FireEventRequestData& other759) {
  insertData = other759.insertData;
  __isset = other759.__isset;
}
FireEventRequestData& FireEventRequestData::operator=(const FireEventRequestData& other760) {
  insertData = other760.insertData;
  __isset = other760.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
FireEventRequestData::FireEventRequestData(const FireEventRequestData& other801) {
  insertData = other801.insertData;
  __isset = other801.__isset;
}
FireEventRequestData& FireEventRequestData::operator=(const FireEventRequestData& other802) {
  insertData = other802.insertData;
  __isset = other802.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void FireEventRequestData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FireEventRequestData(";
  out << "insertData=" << to_string(insertData);
  out << ")";
}


FireEventRequest::~FireEventRequest() throw() {
}


void FireEventRequest::__set_successful(const bool val) {
  this->successful = val;
}

void FireEventRequest::__set_data(const FireEventRequestData& val) {
  this->data = val;
}

void FireEventRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
__isset.dbName = true;
}

void FireEventRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
__isset.tableName = true;
}

void FireEventRequest::__set_partitionVals(const std::vector<std::string> & val) {
  this->partitionVals = val;
__isset.partitionVals = true;
}

uint32_t FireEventRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_successful = false;
  bool isset_data = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->successful);
          isset_successful = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          isset_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          this->__isset.dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          this->__isset.tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partitionVals.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size823;
            ::apache::thrift::protocol::TType _etype826;
            xfer += iprot->readListBegin(_etype826, _size823);
            this->partitionVals.resize(_size823);
            uint32_t _i827;
            for (_i827 = 0; _i827 < _size823; ++_i827)
            {
              xfer += iprot->readString(this->partitionVals[_i827]);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size799;
            ::apache::thrift::protocol::TType _etype802;
            xfer += iprot->readListBegin(_etype802, _size799);
            this->partitionVals.resize(_size799);
            uint32_t _i803;
            for (_i803 = 0; _i803 < _size799; ++_i803)
            {
              xfer += iprot->readString(this->partitionVals[_i803]);
=======
            uint32_t _size757;
            ::apache::thrift::protocol::TType _etype760;
            xfer += iprot->readListBegin(_etype760, _size757);
            this->partitionVals.resize(_size757);
            uint32_t _i761;
            for (_i761 = 0; _i761 < _size757; ++_i761)
            {
              xfer += iprot->readString(this->partitionVals[_i761]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size761;
            ::apache::thrift::protocol::TType _etype764;
            xfer += iprot->readListBegin(_etype764, _size761);
            this->partitionVals.resize(_size761);
            uint32_t _i765;
            for (_i765 = 0; _i765 < _size761; ++_i765)
<<<<<<< HEAD
            {
              xfer += iprot->readString(this->partitionVals[_i765]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size757;
            ::apache::thrift::protocol::TType _etype760;
            xfer += iprot->readListBegin(_etype760, _size757);
            this->partitionVals.resize(_size757);
            uint32_t _i761;
            for (_i761 = 0; _i761 < _size757; ++_i761)
            {
              xfer += iprot->readString(this->partitionVals[_i761]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += iprot->readString(this->partitionVals[_i765]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size803;
            ::apache::thrift::protocol::TType _etype806;
            xfer += iprot->readListBegin(_etype806, _size803);
            this->partitionVals.resize(_size803);
            uint32_t _i807;
            for (_i807 = 0; _i807 < _size803; ++_i807)
            {
              xfer += iprot->readString(this->partitionVals[_i807]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partitionVals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_successful)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FireEventRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FireEventRequest");

  xfer += oprot->writeFieldBegin("successful", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->successful);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.dbName) {
    xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->dbName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tableName) {
    xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->tableName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partitionVals) {
    xfer += oprot->writeFieldBegin("partitionVals", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->partitionVals.size()));
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter828;
      for (_iter828 = this->partitionVals.begin(); _iter828 != this->partitionVals.end(); ++_iter828)
      {
        xfer += oprot->writeString((*_iter828));
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter804;
      for (_iter804 = this->partitionVals.begin(); _iter804 != this->partitionVals.end(); ++_iter804)
      {
        xfer += oprot->writeString((*_iter804));
=======
      std::vector<std::string> ::const_iterator _iter762;
      for (_iter762 = this->partitionVals.begin(); _iter762 != this->partitionVals.end(); ++_iter762)
      {
        xfer += oprot->writeString((*_iter762));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter766;
      for (_iter766 = this->partitionVals.begin(); _iter766 != this->partitionVals.end(); ++_iter766)
      {
        xfer += oprot->writeString((*_iter766));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<std::string> ::const_iterator _iter762;
      for (_iter762 = this->partitionVals.begin(); _iter762 != this->partitionVals.end(); ++_iter762)
      {
        xfer += oprot->writeString((*_iter762));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter766;
      for (_iter766 = this->partitionVals.begin(); _iter766 != this->partitionVals.end(); ++_iter766)
      {
        xfer += oprot->writeString((*_iter766));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<std::string> ::const_iterator _iter808;
      for (_iter808 = this->partitionVals.begin(); _iter808 != this->partitionVals.end(); ++_iter808)
      {
        xfer += oprot->writeString((*_iter808));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FireEventRequest &a, FireEventRequest &b) {
  using ::std::swap;
  swap(a.successful, b.successful);
  swap(a.data, b.data);
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.partitionVals, b.partitionVals);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
FireEventRequest::FireEventRequest(const FireEventRequest& other829) {
  successful = other829.successful;
  data = other829.data;
  dbName = other829.dbName;
  tableName = other829.tableName;
  partitionVals = other829.partitionVals;
  __isset = other829.__isset;
}
FireEventRequest& FireEventRequest::operator=(const FireEventRequest& other830) {
  successful = other830.successful;
  data = other830.data;
  dbName = other830.dbName;
  tableName = other830.tableName;
  partitionVals = other830.partitionVals;
  __isset = other830.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
FireEventRequest::FireEventRequest(const FireEventRequest& other805) {
  successful = other805.successful;
  data = other805.data;
  dbName = other805.dbName;
  tableName = other805.tableName;
  partitionVals = other805.partitionVals;
  __isset = other805.__isset;
}
FireEventRequest& FireEventRequest::operator=(const FireEventRequest& other806) {
  successful = other806.successful;
  data = other806.data;
  dbName = other806.dbName;
  tableName = other806.tableName;
  partitionVals = other806.partitionVals;
  __isset = other806.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
FireEventRequest::FireEventRequest(const FireEventRequest& other763) {
  successful = other763.successful;
  data = other763.data;
  dbName = other763.dbName;
  tableName = other763.tableName;
  partitionVals = other763.partitionVals;
  __isset = other763.__isset;
}
FireEventRequest& FireEventRequest::operator=(const FireEventRequest& other764) {
  successful = other764.successful;
  data = other764.data;
  dbName = other764.dbName;
  tableName = other764.tableName;
  partitionVals = other764.partitionVals;
  __isset = other764.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
FireEventRequest::FireEventRequest(const FireEventRequest& other767) {
  successful = other767.successful;
  data = other767.data;
  dbName = other767.dbName;
  tableName = other767.tableName;
  partitionVals = other767.partitionVals;
  __isset = other767.__isset;
}
FireEventRequest& FireEventRequest::operator=(const FireEventRequest& other768) {
  successful = other768.successful;
  data = other768.data;
  dbName = other768.dbName;
  tableName = other768.tableName;
  partitionVals = other768.partitionVals;
  __isset = other768.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
FireEventRequest::FireEventRequest(const FireEventRequest& other809) {
  successful = other809.successful;
  data = other809.data;
  dbName = other809.dbName;
  tableName = other809.tableName;
  partitionVals = other809.partitionVals;
  __isset = other809.__isset;
}
FireEventRequest& FireEventRequest::operator=(const FireEventRequest& other810) {
  successful = other810.successful;
  data = other810.data;
  dbName = other810.dbName;
  tableName = other810.tableName;
  partitionVals = other810.partitionVals;
  __isset = other810.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void FireEventRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FireEventRequest(";
  out << "successful=" << to_string(successful);
  out << ", " << "data=" << to_string(data);
  out << ", " << "dbName="; (__isset.dbName ? (out << to_string(dbName)) : (out << "<null>"));
  out << ", " << "tableName="; (__isset.tableName ? (out << to_string(tableName)) : (out << "<null>"));
  out << ", " << "partitionVals="; (__isset.partitionVals ? (out << to_string(partitionVals)) : (out << "<null>"));
  out << ")";
}


FireEventResponse::~FireEventResponse() throw() {
}


uint32_t FireEventResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FireEventResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FireEventResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FireEventResponse &a, FireEventResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
FireEventResponse::FireEventResponse(const FireEventResponse& other831) {
  (void) other831;
}
FireEventResponse& FireEventResponse::operator=(const FireEventResponse& other832) {
  (void) other832;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
FireEventResponse::FireEventResponse(const FireEventResponse& other807) {
  (void) other807;
}
FireEventResponse& FireEventResponse::operator=(const FireEventResponse& other808) {
  (void) other808;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
FireEventResponse::FireEventResponse(const FireEventResponse& other765) {
  (void) other765;
}
FireEventResponse& FireEventResponse::operator=(const FireEventResponse& other766) {
  (void) other766;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
FireEventResponse::FireEventResponse(const FireEventResponse& other769) {
  (void) other769;
}
FireEventResponse& FireEventResponse::operator=(const FireEventResponse& other770) {
  (void) other770;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
FireEventResponse::FireEventResponse(const FireEventResponse& other769) {
  (void) other769;
}
FireEventResponse& FireEventResponse::operator=(const FireEventResponse& other770) {
  (void) other770;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
FireEventResponse::FireEventResponse(const FireEventResponse& other811) {
  (void) other811;
}
FireEventResponse& FireEventResponse::operator=(const FireEventResponse& other812) {
  (void) other812;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void FireEventResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FireEventResponse(";
  out << ")";
}


MetadataPpdResult::~MetadataPpdResult() throw() {
}


void MetadataPpdResult::__set_metadata(const std::string& val) {
  this->metadata = val;
__isset.metadata = true;
}

void MetadataPpdResult::__set_includeBitset(const std::string& val) {
  this->includeBitset = val;
__isset.includeBitset = true;
}

uint32_t MetadataPpdResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->metadata);
          this->__isset.metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->includeBitset);
          this->__isset.includeBitset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetadataPpdResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetadataPpdResult");

  if (this->__isset.metadata) {
    xfer += oprot->writeFieldBegin("metadata", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeBinary(this->metadata);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.includeBitset) {
    xfer += oprot->writeFieldBegin("includeBitset", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeBinary(this->includeBitset);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MetadataPpdResult &a, MetadataPpdResult &b) {
  using ::std::swap;
  swap(a.metadata, b.metadata);
  swap(a.includeBitset, b.includeBitset);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
MetadataPpdResult::MetadataPpdResult(const MetadataPpdResult& other833) {
  metadata = other833.metadata;
  includeBitset = other833.includeBitset;
  __isset = other833.__isset;
}
MetadataPpdResult& MetadataPpdResult::operator=(const MetadataPpdResult& other834) {
  metadata = other834.metadata;
  includeBitset = other834.includeBitset;
  __isset = other834.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
MetadataPpdResult::MetadataPpdResult(const MetadataPpdResult& other809) {
  metadata = other809.metadata;
  includeBitset = other809.includeBitset;
  __isset = other809.__isset;
}
MetadataPpdResult& MetadataPpdResult::operator=(const MetadataPpdResult& other810) {
  metadata = other810.metadata;
  includeBitset = other810.includeBitset;
  __isset = other810.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
MetadataPpdResult::MetadataPpdResult(const MetadataPpdResult& other767) {
  metadata = other767.metadata;
  includeBitset = other767.includeBitset;
  __isset = other767.__isset;
<<<<<<< HEAD
}
MetadataPpdResult& MetadataPpdResult::operator=(const MetadataPpdResult& other768) {
  metadata = other768.metadata;
  includeBitset = other768.includeBitset;
  __isset = other768.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
MetadataPpdResult::MetadataPpdResult(const MetadataPpdResult& other771) {
  metadata = other771.metadata;
  includeBitset = other771.includeBitset;
  __isset = other771.__isset;
}
=======
MetadataPpdResult::MetadataPpdResult(const MetadataPpdResult& other771) {
  metadata = other771.metadata;
  includeBitset = other771.includeBitset;
  __isset = other771.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
MetadataPpdResult& MetadataPpdResult::operator=(const MetadataPpdResult& other772) {
  metadata = other772.metadata;
  includeBitset = other772.includeBitset;
  __isset = other772.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
}
MetadataPpdResult& MetadataPpdResult::operator=(const MetadataPpdResult& other768) {
  metadata = other768.metadata;
  includeBitset = other768.includeBitset;
  __isset = other768.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
MetadataPpdResult::MetadataPpdResult(const MetadataPpdResult& other813) {
  metadata = other813.metadata;
  includeBitset = other813.includeBitset;
  __isset = other813.__isset;
}
MetadataPpdResult& MetadataPpdResult::operator=(const MetadataPpdResult& other814) {
  metadata = other814.metadata;
  includeBitset = other814.includeBitset;
  __isset = other814.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void MetadataPpdResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MetadataPpdResult(";
  out << "metadata="; (__isset.metadata ? (out << to_string(metadata)) : (out << "<null>"));
  out << ", " << "includeBitset="; (__isset.includeBitset ? (out << to_string(includeBitset)) : (out << "<null>"));
  out << ")";
}


GetFileMetadataByExprResult::~GetFileMetadataByExprResult() throw() {
}


void GetFileMetadataByExprResult::__set_metadata(const std::map<int64_t, MetadataPpdResult> & val) {
  this->metadata = val;
}

void GetFileMetadataByExprResult::__set_isSupported(const bool val) {
  this->isSupported = val;
}

uint32_t GetFileMetadataByExprResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_metadata = false;
  bool isset_isSupported = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->metadata.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size835;
            ::apache::thrift::protocol::TType _ktype836;
            ::apache::thrift::protocol::TType _vtype837;
            xfer += iprot->readMapBegin(_ktype836, _vtype837, _size835);
            uint32_t _i839;
            for (_i839 = 0; _i839 < _size835; ++_i839)
            {
              int64_t _key840;
              xfer += iprot->readI64(_key840);
              MetadataPpdResult& _val841 = this->metadata[_key840];
              xfer += _val841.read(iprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size811;
            ::apache::thrift::protocol::TType _ktype812;
            ::apache::thrift::protocol::TType _vtype813;
            xfer += iprot->readMapBegin(_ktype812, _vtype813, _size811);
            uint32_t _i815;
            for (_i815 = 0; _i815 < _size811; ++_i815)
            {
              int64_t _key816;
              xfer += iprot->readI64(_key816);
              MetadataPpdResult& _val817 = this->metadata[_key816];
              xfer += _val817.read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size769;
            ::apache::thrift::protocol::TType _ktype770;
            ::apache::thrift::protocol::TType _vtype771;
            xfer += iprot->readMapBegin(_ktype770, _vtype771, _size769);
            uint32_t _i773;
            for (_i773 = 0; _i773 < _size769; ++_i773)
<<<<<<< HEAD
            {
              int64_t _key774;
              xfer += iprot->readI64(_key774);
              MetadataPpdResult& _val775 = this->metadata[_key774];
              xfer += _val775.read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size773;
            ::apache::thrift::protocol::TType _ktype774;
            ::apache::thrift::protocol::TType _vtype775;
            xfer += iprot->readMapBegin(_ktype774, _vtype775, _size773);
            uint32_t _i777;
            for (_i777 = 0; _i777 < _size773; ++_i777)
<<<<<<< HEAD
            {
              int64_t _key778;
              xfer += iprot->readI64(_key778);
              MetadataPpdResult& _val779 = this->metadata[_key778];
              xfer += _val779.read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              int64_t _key774;
              xfer += iprot->readI64(_key774);
              MetadataPpdResult& _val775 = this->metadata[_key774];
              xfer += _val775.read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              int64_t _key778;
              xfer += iprot->readI64(_key778);
              MetadataPpdResult& _val779 = this->metadata[_key778];
              xfer += _val779.read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size815;
            ::apache::thrift::protocol::TType _ktype816;
            ::apache::thrift::protocol::TType _vtype817;
            xfer += iprot->readMapBegin(_ktype816, _vtype817, _size815);
            uint32_t _i819;
            for (_i819 = 0; _i819 < _size815; ++_i819)
            {
              int64_t _key820;
              xfer += iprot->readI64(_key820);
              MetadataPpdResult& _val821 = this->metadata[_key820];
              xfer += _val821.read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readMapEnd();
          }
          isset_metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isSupported);
          isset_isSupported = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_metadata)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_isSupported)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetFileMetadataByExprResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetFileMetadataByExprResult");

  xfer += oprot->writeFieldBegin("metadata", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->metadata.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::map<int64_t, MetadataPpdResult> ::const_iterator _iter842;
    for (_iter842 = this->metadata.begin(); _iter842 != this->metadata.end(); ++_iter842)
    {
      xfer += oprot->writeI64(_iter842->first);
      xfer += _iter842->second.write(oprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::map<int64_t, MetadataPpdResult> ::const_iterator _iter818;
    for (_iter818 = this->metadata.begin(); _iter818 != this->metadata.end(); ++_iter818)
    {
      xfer += oprot->writeI64(_iter818->first);
      xfer += _iter818->second.write(oprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::map<int64_t, MetadataPpdResult> ::const_iterator _iter776;
    for (_iter776 = this->metadata.begin(); _iter776 != this->metadata.end(); ++_iter776)
    {
      xfer += oprot->writeI64(_iter776->first);
      xfer += _iter776->second.write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::map<int64_t, MetadataPpdResult> ::const_iterator _iter780;
    for (_iter780 = this->metadata.begin(); _iter780 != this->metadata.end(); ++_iter780)
    {
      xfer += oprot->writeI64(_iter780->first);
      xfer += _iter780->second.write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::map<int64_t, MetadataPpdResult> ::const_iterator _iter780;
    for (_iter780 = this->metadata.begin(); _iter780 != this->metadata.end(); ++_iter780)
    {
      xfer += oprot->writeI64(_iter780->first);
      xfer += _iter780->second.write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::map<int64_t, MetadataPpdResult> ::const_iterator _iter822;
    for (_iter822 = this->metadata.begin(); _iter822 != this->metadata.end(); ++_iter822)
    {
      xfer += oprot->writeI64(_iter822->first);
      xfer += _iter822->second.write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isSupported", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->isSupported);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetFileMetadataByExprResult &a, GetFileMetadataByExprResult &b) {
  using ::std::swap;
  swap(a.metadata, b.metadata);
  swap(a.isSupported, b.isSupported);
}

<<<<<<< HEAD
<<<<<<< HEAD
GetFileMetadataByExprResult::GetFileMetadataByExprResult(const GetFileMetadataByExprResult& other843) {
  metadata = other843.metadata;
  isSupported = other843.isSupported;
}
GetFileMetadataByExprResult& GetFileMetadataByExprResult::operator=(const GetFileMetadataByExprResult& other844) {
  metadata = other844.metadata;
  isSupported = other844.isSupported;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetFileMetadataByExprResult::GetFileMetadataByExprResult(const GetFileMetadataByExprResult& other819) {
  metadata = other819.metadata;
  isSupported = other819.isSupported;
}
GetFileMetadataByExprResult& GetFileMetadataByExprResult::operator=(const GetFileMetadataByExprResult& other820) {
  metadata = other820.metadata;
  isSupported = other820.isSupported;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
GetFileMetadataByExprResult::GetFileMetadataByExprResult(const GetFileMetadataByExprResult& other777) {
  metadata = other777.metadata;
  isSupported = other777.isSupported;
}
GetFileMetadataByExprResult& GetFileMetadataByExprResult::operator=(const GetFileMetadataByExprResult& other778) {
  metadata = other778.metadata;
  isSupported = other778.isSupported;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetFileMetadataByExprResult::GetFileMetadataByExprResult(const GetFileMetadataByExprResult& other781) {
  metadata = other781.metadata;
  isSupported = other781.isSupported;
}
GetFileMetadataByExprResult& GetFileMetadataByExprResult::operator=(const GetFileMetadataByExprResult& other782) {
  metadata = other782.metadata;
  isSupported = other782.isSupported;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetFileMetadataByExprResult::GetFileMetadataByExprResult(const GetFileMetadataByExprResult& other781) {
  metadata = other781.metadata;
  isSupported = other781.isSupported;
}
GetFileMetadataByExprResult& GetFileMetadataByExprResult::operator=(const GetFileMetadataByExprResult& other782) {
  metadata = other782.metadata;
  isSupported = other782.isSupported;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
GetFileMetadataByExprResult::GetFileMetadataByExprResult(const GetFileMetadataByExprResult& other823) {
  metadata = other823.metadata;
  isSupported = other823.isSupported;
}
GetFileMetadataByExprResult& GetFileMetadataByExprResult::operator=(const GetFileMetadataByExprResult& other824) {
  metadata = other824.metadata;
  isSupported = other824.isSupported;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void GetFileMetadataByExprResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFileMetadataByExprResult(";
  out << "metadata=" << to_string(metadata);
  out << ", " << "isSupported=" << to_string(isSupported);
  out << ")";
}


GetFileMetadataByExprRequest::~GetFileMetadataByExprRequest() throw() {
}


void GetFileMetadataByExprRequest::__set_fileIds(const std::vector<int64_t> & val) {
  this->fileIds = val;
}

void GetFileMetadataByExprRequest::__set_expr(const std::string& val) {
  this->expr = val;
}

void GetFileMetadataByExprRequest::__set_doGetFooters(const bool val) {
  this->doGetFooters = val;
__isset.doGetFooters = true;
}

void GetFileMetadataByExprRequest::__set_type(const FileMetadataExprType::type val) {
  this->type = val;
__isset.type = true;
}

uint32_t GetFileMetadataByExprRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fileIds = false;
  bool isset_expr = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fileIds.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size845;
            ::apache::thrift::protocol::TType _etype848;
            xfer += iprot->readListBegin(_etype848, _size845);
            this->fileIds.resize(_size845);
            uint32_t _i849;
            for (_i849 = 0; _i849 < _size845; ++_i849)
            {
              xfer += iprot->readI64(this->fileIds[_i849]);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size821;
            ::apache::thrift::protocol::TType _etype824;
            xfer += iprot->readListBegin(_etype824, _size821);
            this->fileIds.resize(_size821);
            uint32_t _i825;
            for (_i825 = 0; _i825 < _size821; ++_i825)
            {
              xfer += iprot->readI64(this->fileIds[_i825]);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size779;
            ::apache::thrift::protocol::TType _etype782;
            xfer += iprot->readListBegin(_etype782, _size779);
            this->fileIds.resize(_size779);
            uint32_t _i783;
            for (_i783 = 0; _i783 < _size779; ++_i783)
            {
              xfer += iprot->readI64(this->fileIds[_i783]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size783;
            ::apache::thrift::protocol::TType _etype786;
            xfer += iprot->readListBegin(_etype786, _size783);
            this->fileIds.resize(_size783);
            uint32_t _i787;
            for (_i787 = 0; _i787 < _size783; ++_i787)
            {
              xfer += iprot->readI64(this->fileIds[_i787]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size783;
            ::apache::thrift::protocol::TType _etype786;
            xfer += iprot->readListBegin(_etype786, _size783);
            this->fileIds.resize(_size783);
            uint32_t _i787;
            for (_i787 = 0; _i787 < _size783; ++_i787)
            {
              xfer += iprot->readI64(this->fileIds[_i787]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size825;
            ::apache::thrift::protocol::TType _etype828;
            xfer += iprot->readListBegin(_etype828, _size825);
            this->fileIds.resize(_size825);
            uint32_t _i829;
            for (_i829 = 0; _i829 < _size825; ++_i829)
            {
              xfer += iprot->readI64(this->fileIds[_i829]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          isset_fileIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->expr);
          isset_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->doGetFooters);
          this->__isset.doGetFooters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast850;
          xfer += iprot->readI32(ecast850);
          this->type = (FileMetadataExprType::type)ecast850;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast826;
          xfer += iprot->readI32(ecast826);
          this->type = (FileMetadataExprType::type)ecast826;
=======
          int32_t ecast784;
          xfer += iprot->readI32(ecast784);
          this->type = (FileMetadataExprType::type)ecast784;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast788;
          xfer += iprot->readI32(ecast788);
          this->type = (FileMetadataExprType::type)ecast788;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast784;
          xfer += iprot->readI32(ecast784);
          this->type = (FileMetadataExprType::type)ecast784;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast788;
          xfer += iprot->readI32(ecast788);
          this->type = (FileMetadataExprType::type)ecast788;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast830;
          xfer += iprot->readI32(ecast830);
          this->type = (FileMetadataExprType::type)ecast830;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fileIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_expr)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetFileMetadataByExprRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetFileMetadataByExprRequest");

  xfer += oprot->writeFieldBegin("fileIds", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->fileIds.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter851;
    for (_iter851 = this->fileIds.begin(); _iter851 != this->fileIds.end(); ++_iter851)
    {
      xfer += oprot->writeI64((*_iter851));
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter827;
    for (_iter827 = this->fileIds.begin(); _iter827 != this->fileIds.end(); ++_iter827)
    {
      xfer += oprot->writeI64((*_iter827));
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::vector<int64_t> ::const_iterator _iter785;
    for (_iter785 = this->fileIds.begin(); _iter785 != this->fileIds.end(); ++_iter785)
    {
      xfer += oprot->writeI64((*_iter785));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<int64_t> ::const_iterator _iter789;
    for (_iter789 = this->fileIds.begin(); _iter789 != this->fileIds.end(); ++_iter789)
    {
      xfer += oprot->writeI64((*_iter789));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<int64_t> ::const_iterator _iter789;
    for (_iter789 = this->fileIds.begin(); _iter789 != this->fileIds.end(); ++_iter789)
    {
      xfer += oprot->writeI64((*_iter789));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<int64_t> ::const_iterator _iter831;
    for (_iter831 = this->fileIds.begin(); _iter831 != this->fileIds.end(); ++_iter831)
    {
      xfer += oprot->writeI64((*_iter831));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expr", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->expr);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.doGetFooters) {
    xfer += oprot->writeFieldBegin("doGetFooters", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->doGetFooters);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetFileMetadataByExprRequest &a, GetFileMetadataByExprRequest &b) {
  using ::std::swap;
  swap(a.fileIds, b.fileIds);
  swap(a.expr, b.expr);
  swap(a.doGetFooters, b.doGetFooters);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
GetFileMetadataByExprRequest::GetFileMetadataByExprRequest(const GetFileMetadataByExprRequest& other852) {
  fileIds = other852.fileIds;
  expr = other852.expr;
  doGetFooters = other852.doGetFooters;
  type = other852.type;
  __isset = other852.__isset;
}
GetFileMetadataByExprRequest& GetFileMetadataByExprRequest::operator=(const GetFileMetadataByExprRequest& other853) {
  fileIds = other853.fileIds;
  expr = other853.expr;
  doGetFooters = other853.doGetFooters;
  type = other853.type;
  __isset = other853.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetFileMetadataByExprRequest::GetFileMetadataByExprRequest(const GetFileMetadataByExprRequest& other828) {
  fileIds = other828.fileIds;
  expr = other828.expr;
  doGetFooters = other828.doGetFooters;
  type = other828.type;
  __isset = other828.__isset;
}
GetFileMetadataByExprRequest& GetFileMetadataByExprRequest::operator=(const GetFileMetadataByExprRequest& other829) {
  fileIds = other829.fileIds;
  expr = other829.expr;
  doGetFooters = other829.doGetFooters;
  type = other829.type;
  __isset = other829.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
GetFileMetadataByExprRequest::GetFileMetadataByExprRequest(const GetFileMetadataByExprRequest& other786) {
  fileIds = other786.fileIds;
  expr = other786.expr;
  doGetFooters = other786.doGetFooters;
  type = other786.type;
  __isset = other786.__isset;
}
GetFileMetadataByExprRequest& GetFileMetadataByExprRequest::operator=(const GetFileMetadataByExprRequest& other787) {
  fileIds = other787.fileIds;
  expr = other787.expr;
  doGetFooters = other787.doGetFooters;
  type = other787.type;
  __isset = other787.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetFileMetadataByExprRequest::GetFileMetadataByExprRequest(const GetFileMetadataByExprRequest& other790) {
  fileIds = other790.fileIds;
  expr = other790.expr;
  doGetFooters = other790.doGetFooters;
  type = other790.type;
  __isset = other790.__isset;
}
=======
GetFileMetadataByExprRequest::GetFileMetadataByExprRequest(const GetFileMetadataByExprRequest& other790) {
  fileIds = other790.fileIds;
  expr = other790.expr;
  doGetFooters = other790.doGetFooters;
  type = other790.type;
  __isset = other790.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
GetFileMetadataByExprRequest& GetFileMetadataByExprRequest::operator=(const GetFileMetadataByExprRequest& other791) {
  fileIds = other791.fileIds;
  expr = other791.expr;
  doGetFooters = other791.doGetFooters;
  type = other791.type;
  __isset = other791.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
GetFileMetadataByExprRequest::GetFileMetadataByExprRequest(const GetFileMetadataByExprRequest& other832) {
  fileIds = other832.fileIds;
  expr = other832.expr;
  doGetFooters = other832.doGetFooters;
  type = other832.type;
  __isset = other832.__isset;
}
GetFileMetadataByExprRequest& GetFileMetadataByExprRequest::operator=(const GetFileMetadataByExprRequest& other833) {
  fileIds = other833.fileIds;
  expr = other833.expr;
  doGetFooters = other833.doGetFooters;
  type = other833.type;
  __isset = other833.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void GetFileMetadataByExprRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFileMetadataByExprRequest(";
  out << "fileIds=" << to_string(fileIds);
  out << ", " << "expr=" << to_string(expr);
  out << ", " << "doGetFooters="; (__isset.doGetFooters ? (out << to_string(doGetFooters)) : (out << "<null>"));
  out << ", " << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ")";
}


GetFileMetadataResult::~GetFileMetadataResult() throw() {
}


void GetFileMetadataResult::__set_metadata(const std::map<int64_t, std::string> & val) {
  this->metadata = val;
}

void GetFileMetadataResult::__set_isSupported(const bool val) {
  this->isSupported = val;
}

uint32_t GetFileMetadataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_metadata = false;
  bool isset_isSupported = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->metadata.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size854;
            ::apache::thrift::protocol::TType _ktype855;
            ::apache::thrift::protocol::TType _vtype856;
            xfer += iprot->readMapBegin(_ktype855, _vtype856, _size854);
            uint32_t _i858;
            for (_i858 = 0; _i858 < _size854; ++_i858)
            {
              int64_t _key859;
              xfer += iprot->readI64(_key859);
              std::string& _val860 = this->metadata[_key859];
              xfer += iprot->readBinary(_val860);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size830;
            ::apache::thrift::protocol::TType _ktype831;
            ::apache::thrift::protocol::TType _vtype832;
            xfer += iprot->readMapBegin(_ktype831, _vtype832, _size830);
            uint32_t _i834;
            for (_i834 = 0; _i834 < _size830; ++_i834)
            {
              int64_t _key835;
              xfer += iprot->readI64(_key835);
              std::string& _val836 = this->metadata[_key835];
              xfer += iprot->readBinary(_val836);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size788;
            ::apache::thrift::protocol::TType _ktype789;
            ::apache::thrift::protocol::TType _vtype790;
            xfer += iprot->readMapBegin(_ktype789, _vtype790, _size788);
            uint32_t _i792;
            for (_i792 = 0; _i792 < _size788; ++_i792)
            {
              int64_t _key793;
              xfer += iprot->readI64(_key793);
              std::string& _val794 = this->metadata[_key793];
              xfer += iprot->readBinary(_val794);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size792;
            ::apache::thrift::protocol::TType _ktype793;
            ::apache::thrift::protocol::TType _vtype794;
            xfer += iprot->readMapBegin(_ktype793, _vtype794, _size792);
            uint32_t _i796;
            for (_i796 = 0; _i796 < _size792; ++_i796)
            {
=======
            uint32_t _size792;
            ::apache::thrift::protocol::TType _ktype793;
            ::apache::thrift::protocol::TType _vtype794;
            xfer += iprot->readMapBegin(_ktype793, _vtype794, _size792);
            uint32_t _i796;
            for (_i796 = 0; _i796 < _size792; ++_i796)
            {
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
              int64_t _key797;
              xfer += iprot->readI64(_key797);
              std::string& _val798 = this->metadata[_key797];
              xfer += iprot->readBinary(_val798);
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size834;
            ::apache::thrift::protocol::TType _ktype835;
            ::apache::thrift::protocol::TType _vtype836;
            xfer += iprot->readMapBegin(_ktype835, _vtype836, _size834);
            uint32_t _i838;
            for (_i838 = 0; _i838 < _size834; ++_i838)
            {
              int64_t _key839;
              xfer += iprot->readI64(_key839);
              std::string& _val840 = this->metadata[_key839];
              xfer += iprot->readBinary(_val840);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readMapEnd();
          }
          isset_metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isSupported);
          isset_isSupported = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_metadata)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_isSupported)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetFileMetadataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetFileMetadataResult");

  xfer += oprot->writeFieldBegin("metadata", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->metadata.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::map<int64_t, std::string> ::const_iterator _iter861;
    for (_iter861 = this->metadata.begin(); _iter861 != this->metadata.end(); ++_iter861)
    {
      xfer += oprot->writeI64(_iter861->first);
      xfer += oprot->writeBinary(_iter861->second);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::map<int64_t, std::string> ::const_iterator _iter837;
    for (_iter837 = this->metadata.begin(); _iter837 != this->metadata.end(); ++_iter837)
    {
      xfer += oprot->writeI64(_iter837->first);
      xfer += oprot->writeBinary(_iter837->second);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::map<int64_t, std::string> ::const_iterator _iter795;
    for (_iter795 = this->metadata.begin(); _iter795 != this->metadata.end(); ++_iter795)
    {
      xfer += oprot->writeI64(_iter795->first);
      xfer += oprot->writeBinary(_iter795->second);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::map<int64_t, std::string> ::const_iterator _iter799;
    for (_iter799 = this->metadata.begin(); _iter799 != this->metadata.end(); ++_iter799)
    {
      xfer += oprot->writeI64(_iter799->first);
      xfer += oprot->writeBinary(_iter799->second);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::map<int64_t, std::string> ::const_iterator _iter799;
    for (_iter799 = this->metadata.begin(); _iter799 != this->metadata.end(); ++_iter799)
    {
      xfer += oprot->writeI64(_iter799->first);
      xfer += oprot->writeBinary(_iter799->second);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::map<int64_t, std::string> ::const_iterator _iter841;
    for (_iter841 = this->metadata.begin(); _iter841 != this->metadata.end(); ++_iter841)
    {
      xfer += oprot->writeI64(_iter841->first);
      xfer += oprot->writeBinary(_iter841->second);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isSupported", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->isSupported);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetFileMetadataResult &a, GetFileMetadataResult &b) {
  using ::std::swap;
  swap(a.metadata, b.metadata);
  swap(a.isSupported, b.isSupported);
}

<<<<<<< HEAD
<<<<<<< HEAD
GetFileMetadataResult::GetFileMetadataResult(const GetFileMetadataResult& other862) {
  metadata = other862.metadata;
  isSupported = other862.isSupported;
}
GetFileMetadataResult& GetFileMetadataResult::operator=(const GetFileMetadataResult& other863) {
  metadata = other863.metadata;
  isSupported = other863.isSupported;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetFileMetadataResult::GetFileMetadataResult(const GetFileMetadataResult& other838) {
  metadata = other838.metadata;
  isSupported = other838.isSupported;
}
GetFileMetadataResult& GetFileMetadataResult::operator=(const GetFileMetadataResult& other839) {
  metadata = other839.metadata;
  isSupported = other839.isSupported;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
GetFileMetadataResult::GetFileMetadataResult(const GetFileMetadataResult& other796) {
  metadata = other796.metadata;
  isSupported = other796.isSupported;
}
GetFileMetadataResult& GetFileMetadataResult::operator=(const GetFileMetadataResult& other797) {
  metadata = other797.metadata;
  isSupported = other797.isSupported;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetFileMetadataResult::GetFileMetadataResult(const GetFileMetadataResult& other800) {
  metadata = other800.metadata;
  isSupported = other800.isSupported;
}
GetFileMetadataResult& GetFileMetadataResult::operator=(const GetFileMetadataResult& other801) {
  metadata = other801.metadata;
  isSupported = other801.isSupported;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetFileMetadataResult::GetFileMetadataResult(const GetFileMetadataResult& other800) {
  metadata = other800.metadata;
  isSupported = other800.isSupported;
}
GetFileMetadataResult& GetFileMetadataResult::operator=(const GetFileMetadataResult& other801) {
  metadata = other801.metadata;
  isSupported = other801.isSupported;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
GetFileMetadataResult::GetFileMetadataResult(const GetFileMetadataResult& other842) {
  metadata = other842.metadata;
  isSupported = other842.isSupported;
}
GetFileMetadataResult& GetFileMetadataResult::operator=(const GetFileMetadataResult& other843) {
  metadata = other843.metadata;
  isSupported = other843.isSupported;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void GetFileMetadataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFileMetadataResult(";
  out << "metadata=" << to_string(metadata);
  out << ", " << "isSupported=" << to_string(isSupported);
  out << ")";
}


GetFileMetadataRequest::~GetFileMetadataRequest() throw() {
}


void GetFileMetadataRequest::__set_fileIds(const std::vector<int64_t> & val) {
  this->fileIds = val;
}

uint32_t GetFileMetadataRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fileIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fileIds.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size864;
            ::apache::thrift::protocol::TType _etype867;
            xfer += iprot->readListBegin(_etype867, _size864);
            this->fileIds.resize(_size864);
            uint32_t _i868;
            for (_i868 = 0; _i868 < _size864; ++_i868)
            {
              xfer += iprot->readI64(this->fileIds[_i868]);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size840;
            ::apache::thrift::protocol::TType _etype843;
            xfer += iprot->readListBegin(_etype843, _size840);
            this->fileIds.resize(_size840);
            uint32_t _i844;
            for (_i844 = 0; _i844 < _size840; ++_i844)
            {
              xfer += iprot->readI64(this->fileIds[_i844]);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size798;
            ::apache::thrift::protocol::TType _etype801;
            xfer += iprot->readListBegin(_etype801, _size798);
            this->fileIds.resize(_size798);
            uint32_t _i802;
            for (_i802 = 0; _i802 < _size798; ++_i802)
<<<<<<< HEAD
            {
              xfer += iprot->readI64(this->fileIds[_i802]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size802;
            ::apache::thrift::protocol::TType _etype805;
            xfer += iprot->readListBegin(_etype805, _size802);
            this->fileIds.resize(_size802);
            uint32_t _i806;
            for (_i806 = 0; _i806 < _size802; ++_i806)
<<<<<<< HEAD
            {
              xfer += iprot->readI64(this->fileIds[_i806]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              xfer += iprot->readI64(this->fileIds[_i802]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += iprot->readI64(this->fileIds[_i806]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size844;
            ::apache::thrift::protocol::TType _etype847;
            xfer += iprot->readListBegin(_etype847, _size844);
            this->fileIds.resize(_size844);
            uint32_t _i848;
            for (_i848 = 0; _i848 < _size844; ++_i848)
            {
              xfer += iprot->readI64(this->fileIds[_i848]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          isset_fileIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fileIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetFileMetadataRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetFileMetadataRequest");

  xfer += oprot->writeFieldBegin("fileIds", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->fileIds.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter869;
    for (_iter869 = this->fileIds.begin(); _iter869 != this->fileIds.end(); ++_iter869)
    {
      xfer += oprot->writeI64((*_iter869));
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter845;
    for (_iter845 = this->fileIds.begin(); _iter845 != this->fileIds.end(); ++_iter845)
    {
      xfer += oprot->writeI64((*_iter845));
=======
    std::vector<int64_t> ::const_iterator _iter803;
    for (_iter803 = this->fileIds.begin(); _iter803 != this->fileIds.end(); ++_iter803)
    {
      xfer += oprot->writeI64((*_iter803));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<int64_t> ::const_iterator _iter807;
    for (_iter807 = this->fileIds.begin(); _iter807 != this->fileIds.end(); ++_iter807)
    {
      xfer += oprot->writeI64((*_iter807));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<int64_t> ::const_iterator _iter803;
    for (_iter803 = this->fileIds.begin(); _iter803 != this->fileIds.end(); ++_iter803)
    {
      xfer += oprot->writeI64((*_iter803));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<int64_t> ::const_iterator _iter807;
    for (_iter807 = this->fileIds.begin(); _iter807 != this->fileIds.end(); ++_iter807)
    {
      xfer += oprot->writeI64((*_iter807));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<int64_t> ::const_iterator _iter849;
    for (_iter849 = this->fileIds.begin(); _iter849 != this->fileIds.end(); ++_iter849)
    {
      xfer += oprot->writeI64((*_iter849));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetFileMetadataRequest &a, GetFileMetadataRequest &b) {
  using ::std::swap;
  swap(a.fileIds, b.fileIds);
}

<<<<<<< HEAD
<<<<<<< HEAD
GetFileMetadataRequest::GetFileMetadataRequest(const GetFileMetadataRequest& other870) {
  fileIds = other870.fileIds;
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(const GetFileMetadataRequest& other871) {
  fileIds = other871.fileIds;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetFileMetadataRequest::GetFileMetadataRequest(const GetFileMetadataRequest& other846) {
  fileIds = other846.fileIds;
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(const GetFileMetadataRequest& other847) {
  fileIds = other847.fileIds;
=======
GetFileMetadataRequest::GetFileMetadataRequest(const GetFileMetadataRequest& other804) {
  fileIds = other804.fileIds;
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(const GetFileMetadataRequest& other805) {
  fileIds = other805.fileIds;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetFileMetadataRequest::GetFileMetadataRequest(const GetFileMetadataRequest& other808) {
  fileIds = other808.fileIds;
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(const GetFileMetadataRequest& other809) {
  fileIds = other809.fileIds;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
GetFileMetadataRequest::GetFileMetadataRequest(const GetFileMetadataRequest& other804) {
  fileIds = other804.fileIds;
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(const GetFileMetadataRequest& other805) {
  fileIds = other805.fileIds;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetFileMetadataRequest::GetFileMetadataRequest(const GetFileMetadataRequest& other808) {
  fileIds = other808.fileIds;
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(const GetFileMetadataRequest& other809) {
  fileIds = other809.fileIds;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
GetFileMetadataRequest::GetFileMetadataRequest(const GetFileMetadataRequest& other850) {
  fileIds = other850.fileIds;
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(const GetFileMetadataRequest& other851) {
  fileIds = other851.fileIds;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void GetFileMetadataRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFileMetadataRequest(";
  out << "fileIds=" << to_string(fileIds);
  out << ")";
}


PutFileMetadataResult::~PutFileMetadataResult() throw() {
}


uint32_t PutFileMetadataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PutFileMetadataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PutFileMetadataResult");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PutFileMetadataResult &a, PutFileMetadataResult &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
PutFileMetadataResult::PutFileMetadataResult(const PutFileMetadataResult& other872) {
  (void) other872;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(const PutFileMetadataResult& other873) {
  (void) other873;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
PutFileMetadataResult::PutFileMetadataResult(const PutFileMetadataResult& other848) {
  (void) other848;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(const PutFileMetadataResult& other849) {
  (void) other849;
=======
PutFileMetadataResult::PutFileMetadataResult(const PutFileMetadataResult& other806) {
  (void) other806;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(const PutFileMetadataResult& other807) {
  (void) other807;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
PutFileMetadataResult::PutFileMetadataResult(const PutFileMetadataResult& other810) {
  (void) other810;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(const PutFileMetadataResult& other811) {
  (void) other811;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
PutFileMetadataResult::PutFileMetadataResult(const PutFileMetadataResult& other806) {
  (void) other806;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(const PutFileMetadataResult& other807) {
  (void) other807;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
PutFileMetadataResult::PutFileMetadataResult(const PutFileMetadataResult& other810) {
  (void) other810;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(const PutFileMetadataResult& other811) {
  (void) other811;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
PutFileMetadataResult::PutFileMetadataResult(const PutFileMetadataResult& other852) {
  (void) other852;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(const PutFileMetadataResult& other853) {
  (void) other853;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void PutFileMetadataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PutFileMetadataResult(";
  out << ")";
}


PutFileMetadataRequest::~PutFileMetadataRequest() throw() {
}


void PutFileMetadataRequest::__set_fileIds(const std::vector<int64_t> & val) {
  this->fileIds = val;
}

void PutFileMetadataRequest::__set_metadata(const std::vector<std::string> & val) {
  this->metadata = val;
}

void PutFileMetadataRequest::__set_type(const FileMetadataExprType::type val) {
  this->type = val;
__isset.type = true;
}

uint32_t PutFileMetadataRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fileIds = false;
  bool isset_metadata = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fileIds.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size874;
            ::apache::thrift::protocol::TType _etype877;
            xfer += iprot->readListBegin(_etype877, _size874);
            this->fileIds.resize(_size874);
            uint32_t _i878;
            for (_i878 = 0; _i878 < _size874; ++_i878)
            {
              xfer += iprot->readI64(this->fileIds[_i878]);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size850;
            ::apache::thrift::protocol::TType _etype853;
            xfer += iprot->readListBegin(_etype853, _size850);
            this->fileIds.resize(_size850);
            uint32_t _i854;
            for (_i854 = 0; _i854 < _size850; ++_i854)
            {
              xfer += iprot->readI64(this->fileIds[_i854]);
=======
            uint32_t _size808;
            ::apache::thrift::protocol::TType _etype811;
            xfer += iprot->readListBegin(_etype811, _size808);
            this->fileIds.resize(_size808);
            uint32_t _i812;
            for (_i812 = 0; _i812 < _size808; ++_i812)
            {
              xfer += iprot->readI64(this->fileIds[_i812]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size812;
            ::apache::thrift::protocol::TType _etype815;
            xfer += iprot->readListBegin(_etype815, _size812);
            this->fileIds.resize(_size812);
            uint32_t _i816;
            for (_i816 = 0; _i816 < _size812; ++_i816)
<<<<<<< HEAD
            {
              xfer += iprot->readI64(this->fileIds[_i816]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size808;
            ::apache::thrift::protocol::TType _etype811;
            xfer += iprot->readListBegin(_etype811, _size808);
            this->fileIds.resize(_size808);
            uint32_t _i812;
            for (_i812 = 0; _i812 < _size808; ++_i812)
            {
              xfer += iprot->readI64(this->fileIds[_i812]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += iprot->readI64(this->fileIds[_i816]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size854;
            ::apache::thrift::protocol::TType _etype857;
            xfer += iprot->readListBegin(_etype857, _size854);
            this->fileIds.resize(_size854);
            uint32_t _i858;
            for (_i858 = 0; _i858 < _size854; ++_i858)
            {
              xfer += iprot->readI64(this->fileIds[_i858]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          isset_fileIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->metadata.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size879;
            ::apache::thrift::protocol::TType _etype882;
            xfer += iprot->readListBegin(_etype882, _size879);
            this->metadata.resize(_size879);
            uint32_t _i883;
            for (_i883 = 0; _i883 < _size879; ++_i883)
            {
              xfer += iprot->readBinary(this->metadata[_i883]);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size855;
            ::apache::thrift::protocol::TType _etype858;
            xfer += iprot->readListBegin(_etype858, _size855);
            this->metadata.resize(_size855);
            uint32_t _i859;
            for (_i859 = 0; _i859 < _size855; ++_i859)
            {
              xfer += iprot->readBinary(this->metadata[_i859]);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size813;
            ::apache::thrift::protocol::TType _etype816;
            xfer += iprot->readListBegin(_etype816, _size813);
            this->metadata.resize(_size813);
            uint32_t _i817;
            for (_i817 = 0; _i817 < _size813; ++_i817)
            {
              xfer += iprot->readBinary(this->metadata[_i817]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size817;
            ::apache::thrift::protocol::TType _etype820;
            xfer += iprot->readListBegin(_etype820, _size817);
            this->metadata.resize(_size817);
            uint32_t _i821;
            for (_i821 = 0; _i821 < _size817; ++_i821)
            {
              xfer += iprot->readBinary(this->metadata[_i821]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size817;
            ::apache::thrift::protocol::TType _etype820;
            xfer += iprot->readListBegin(_etype820, _size817);
            this->metadata.resize(_size817);
            uint32_t _i821;
            for (_i821 = 0; _i821 < _size817; ++_i821)
            {
              xfer += iprot->readBinary(this->metadata[_i821]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size859;
            ::apache::thrift::protocol::TType _etype862;
            xfer += iprot->readListBegin(_etype862, _size859);
            this->metadata.resize(_size859);
            uint32_t _i863;
            for (_i863 = 0; _i863 < _size859; ++_i863)
            {
              xfer += iprot->readBinary(this->metadata[_i863]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          isset_metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast884;
          xfer += iprot->readI32(ecast884);
          this->type = (FileMetadataExprType::type)ecast884;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast860;
          xfer += iprot->readI32(ecast860);
          this->type = (FileMetadataExprType::type)ecast860;
=======
          int32_t ecast818;
          xfer += iprot->readI32(ecast818);
          this->type = (FileMetadataExprType::type)ecast818;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast822;
          xfer += iprot->readI32(ecast822);
          this->type = (FileMetadataExprType::type)ecast822;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast818;
          xfer += iprot->readI32(ecast818);
          this->type = (FileMetadataExprType::type)ecast818;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast822;
          xfer += iprot->readI32(ecast822);
          this->type = (FileMetadataExprType::type)ecast822;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast864;
          xfer += iprot->readI32(ecast864);
          this->type = (FileMetadataExprType::type)ecast864;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fileIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_metadata)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PutFileMetadataRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PutFileMetadataRequest");

  xfer += oprot->writeFieldBegin("fileIds", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->fileIds.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter885;
    for (_iter885 = this->fileIds.begin(); _iter885 != this->fileIds.end(); ++_iter885)
    {
      xfer += oprot->writeI64((*_iter885));
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter861;
    for (_iter861 = this->fileIds.begin(); _iter861 != this->fileIds.end(); ++_iter861)
    {
      xfer += oprot->writeI64((*_iter861));
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::vector<int64_t> ::const_iterator _iter819;
    for (_iter819 = this->fileIds.begin(); _iter819 != this->fileIds.end(); ++_iter819)
    {
      xfer += oprot->writeI64((*_iter819));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<int64_t> ::const_iterator _iter823;
    for (_iter823 = this->fileIds.begin(); _iter823 != this->fileIds.end(); ++_iter823)
    {
      xfer += oprot->writeI64((*_iter823));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<int64_t> ::const_iterator _iter823;
    for (_iter823 = this->fileIds.begin(); _iter823 != this->fileIds.end(); ++_iter823)
    {
      xfer += oprot->writeI64((*_iter823));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<int64_t> ::const_iterator _iter865;
    for (_iter865 = this->fileIds.begin(); _iter865 != this->fileIds.end(); ++_iter865)
    {
      xfer += oprot->writeI64((*_iter865));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("metadata", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->metadata.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter886;
    for (_iter886 = this->metadata.begin(); _iter886 != this->metadata.end(); ++_iter886)
    {
      xfer += oprot->writeBinary((*_iter886));
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<std::string> ::const_iterator _iter862;
    for (_iter862 = this->metadata.begin(); _iter862 != this->metadata.end(); ++_iter862)
    {
      xfer += oprot->writeBinary((*_iter862));
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::vector<std::string> ::const_iterator _iter820;
    for (_iter820 = this->metadata.begin(); _iter820 != this->metadata.end(); ++_iter820)
    {
      xfer += oprot->writeBinary((*_iter820));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<std::string> ::const_iterator _iter824;
    for (_iter824 = this->metadata.begin(); _iter824 != this->metadata.end(); ++_iter824)
    {
      xfer += oprot->writeBinary((*_iter824));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<std::string> ::const_iterator _iter824;
    for (_iter824 = this->metadata.begin(); _iter824 != this->metadata.end(); ++_iter824)
    {
      xfer += oprot->writeBinary((*_iter824));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<std::string> ::const_iterator _iter866;
    for (_iter866 = this->metadata.begin(); _iter866 != this->metadata.end(); ++_iter866)
    {
      xfer += oprot->writeBinary((*_iter866));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PutFileMetadataRequest &a, PutFileMetadataRequest &b) {
  using ::std::swap;
  swap(a.fileIds, b.fileIds);
  swap(a.metadata, b.metadata);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
PutFileMetadataRequest::PutFileMetadataRequest(const PutFileMetadataRequest& other887) {
  fileIds = other887.fileIds;
  metadata = other887.metadata;
  type = other887.type;
  __isset = other887.__isset;
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(const PutFileMetadataRequest& other888) {
  fileIds = other888.fileIds;
  metadata = other888.metadata;
  type = other888.type;
  __isset = other888.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
PutFileMetadataRequest::PutFileMetadataRequest(const PutFileMetadataRequest& other863) {
  fileIds = other863.fileIds;
  metadata = other863.metadata;
  type = other863.type;
  __isset = other863.__isset;
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(const PutFileMetadataRequest& other864) {
  fileIds = other864.fileIds;
  metadata = other864.metadata;
  type = other864.type;
  __isset = other864.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
PutFileMetadataRequest::PutFileMetadataRequest(const PutFileMetadataRequest& other821) {
  fileIds = other821.fileIds;
  metadata = other821.metadata;
  type = other821.type;
  __isset = other821.__isset;
<<<<<<< HEAD
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(const PutFileMetadataRequest& other822) {
  fileIds = other822.fileIds;
  metadata = other822.metadata;
  type = other822.type;
  __isset = other822.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
PutFileMetadataRequest::PutFileMetadataRequest(const PutFileMetadataRequest& other825) {
  fileIds = other825.fileIds;
  metadata = other825.metadata;
  type = other825.type;
  __isset = other825.__isset;
<<<<<<< HEAD
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(const PutFileMetadataRequest& other826) {
  fileIds = other826.fileIds;
  metadata = other826.metadata;
  type = other826.type;
  __isset = other826.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(const PutFileMetadataRequest& other822) {
  fileIds = other822.fileIds;
  metadata = other822.metadata;
  type = other822.type;
  __isset = other822.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(const PutFileMetadataRequest& other826) {
  fileIds = other826.fileIds;
  metadata = other826.metadata;
  type = other826.type;
  __isset = other826.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
PutFileMetadataRequest::PutFileMetadataRequest(const PutFileMetadataRequest& other867) {
  fileIds = other867.fileIds;
  metadata = other867.metadata;
  type = other867.type;
  __isset = other867.__isset;
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(const PutFileMetadataRequest& other868) {
  fileIds = other868.fileIds;
  metadata = other868.metadata;
  type = other868.type;
  __isset = other868.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void PutFileMetadataRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PutFileMetadataRequest(";
  out << "fileIds=" << to_string(fileIds);
  out << ", " << "metadata=" << to_string(metadata);
  out << ", " << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ")";
}


ClearFileMetadataResult::~ClearFileMetadataResult() throw() {
}


uint32_t ClearFileMetadataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ClearFileMetadataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ClearFileMetadataResult");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClearFileMetadataResult &a, ClearFileMetadataResult &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
ClearFileMetadataResult::ClearFileMetadataResult(const ClearFileMetadataResult& other889) {
  (void) other889;
}
ClearFileMetadataResult& ClearFileMetadataResult::operator=(const ClearFileMetadataResult& other890) {
  (void) other890;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ClearFileMetadataResult::ClearFileMetadataResult(const ClearFileMetadataResult& other865) {
  (void) other865;
}
ClearFileMetadataResult& ClearFileMetadataResult::operator=(const ClearFileMetadataResult& other866) {
  (void) other866;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
ClearFileMetadataResult::ClearFileMetadataResult(const ClearFileMetadataResult& other823) {
  (void) other823;
}
ClearFileMetadataResult& ClearFileMetadataResult::operator=(const ClearFileMetadataResult& other824) {
  (void) other824;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ClearFileMetadataResult::ClearFileMetadataResult(const ClearFileMetadataResult& other827) {
  (void) other827;
}
ClearFileMetadataResult& ClearFileMetadataResult::operator=(const ClearFileMetadataResult& other828) {
  (void) other828;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ClearFileMetadataResult::ClearFileMetadataResult(const ClearFileMetadataResult& other827) {
  (void) other827;
}
ClearFileMetadataResult& ClearFileMetadataResult::operator=(const ClearFileMetadataResult& other828) {
  (void) other828;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
ClearFileMetadataResult::ClearFileMetadataResult(const ClearFileMetadataResult& other869) {
  (void) other869;
}
ClearFileMetadataResult& ClearFileMetadataResult::operator=(const ClearFileMetadataResult& other870) {
  (void) other870;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void ClearFileMetadataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClearFileMetadataResult(";
  out << ")";
}


ClearFileMetadataRequest::~ClearFileMetadataRequest() throw() {
}


void ClearFileMetadataRequest::__set_fileIds(const std::vector<int64_t> & val) {
  this->fileIds = val;
}

uint32_t ClearFileMetadataRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fileIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fileIds.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size891;
            ::apache::thrift::protocol::TType _etype894;
            xfer += iprot->readListBegin(_etype894, _size891);
            this->fileIds.resize(_size891);
            uint32_t _i895;
            for (_i895 = 0; _i895 < _size891; ++_i895)
            {
              xfer += iprot->readI64(this->fileIds[_i895]);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size867;
            ::apache::thrift::protocol::TType _etype870;
            xfer += iprot->readListBegin(_etype870, _size867);
            this->fileIds.resize(_size867);
            uint32_t _i871;
            for (_i871 = 0; _i871 < _size867; ++_i871)
            {
              xfer += iprot->readI64(this->fileIds[_i871]);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size825;
            ::apache::thrift::protocol::TType _etype828;
            xfer += iprot->readListBegin(_etype828, _size825);
            this->fileIds.resize(_size825);
            uint32_t _i829;
            for (_i829 = 0; _i829 < _size825; ++_i829)
            {
              xfer += iprot->readI64(this->fileIds[_i829]);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size829;
            ::apache::thrift::protocol::TType _etype832;
            xfer += iprot->readListBegin(_etype832, _size829);
            this->fileIds.resize(_size829);
            uint32_t _i833;
            for (_i833 = 0; _i833 < _size829; ++_i833)
            {
              xfer += iprot->readI64(this->fileIds[_i833]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size829;
            ::apache::thrift::protocol::TType _etype832;
            xfer += iprot->readListBegin(_etype832, _size829);
            this->fileIds.resize(_size829);
            uint32_t _i833;
            for (_i833 = 0; _i833 < _size829; ++_i833)
            {
              xfer += iprot->readI64(this->fileIds[_i833]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size871;
            ::apache::thrift::protocol::TType _etype874;
            xfer += iprot->readListBegin(_etype874, _size871);
            this->fileIds.resize(_size871);
            uint32_t _i875;
            for (_i875 = 0; _i875 < _size871; ++_i875)
            {
              xfer += iprot->readI64(this->fileIds[_i875]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          isset_fileIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fileIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ClearFileMetadataRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ClearFileMetadataRequest");

  xfer += oprot->writeFieldBegin("fileIds", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->fileIds.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter896;
    for (_iter896 = this->fileIds.begin(); _iter896 != this->fileIds.end(); ++_iter896)
    {
      xfer += oprot->writeI64((*_iter896));
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<int64_t> ::const_iterator _iter872;
    for (_iter872 = this->fileIds.begin(); _iter872 != this->fileIds.end(); ++_iter872)
    {
      xfer += oprot->writeI64((*_iter872));
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::vector<int64_t> ::const_iterator _iter830;
    for (_iter830 = this->fileIds.begin(); _iter830 != this->fileIds.end(); ++_iter830)
    {
      xfer += oprot->writeI64((*_iter830));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<int64_t> ::const_iterator _iter834;
    for (_iter834 = this->fileIds.begin(); _iter834 != this->fileIds.end(); ++_iter834)
    {
      xfer += oprot->writeI64((*_iter834));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<int64_t> ::const_iterator _iter834;
    for (_iter834 = this->fileIds.begin(); _iter834 != this->fileIds.end(); ++_iter834)
    {
      xfer += oprot->writeI64((*_iter834));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<int64_t> ::const_iterator _iter876;
    for (_iter876 = this->fileIds.begin(); _iter876 != this->fileIds.end(); ++_iter876)
    {
      xfer += oprot->writeI64((*_iter876));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClearFileMetadataRequest &a, ClearFileMetadataRequest &b) {
  using ::std::swap;
  swap(a.fileIds, b.fileIds);
}

<<<<<<< HEAD
<<<<<<< HEAD
ClearFileMetadataRequest::ClearFileMetadataRequest(const ClearFileMetadataRequest& other897) {
  fileIds = other897.fileIds;
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(const ClearFileMetadataRequest& other898) {
  fileIds = other898.fileIds;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ClearFileMetadataRequest::ClearFileMetadataRequest(const ClearFileMetadataRequest& other873) {
  fileIds = other873.fileIds;
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(const ClearFileMetadataRequest& other874) {
  fileIds = other874.fileIds;
=======
ClearFileMetadataRequest::ClearFileMetadataRequest(const ClearFileMetadataRequest& other831) {
  fileIds = other831.fileIds;
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(const ClearFileMetadataRequest& other832) {
  fileIds = other832.fileIds;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ClearFileMetadataRequest::ClearFileMetadataRequest(const ClearFileMetadataRequest& other835) {
  fileIds = other835.fileIds;
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(const ClearFileMetadataRequest& other836) {
  fileIds = other836.fileIds;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
ClearFileMetadataRequest::ClearFileMetadataRequest(const ClearFileMetadataRequest& other831) {
  fileIds = other831.fileIds;
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(const ClearFileMetadataRequest& other832) {
  fileIds = other832.fileIds;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ClearFileMetadataRequest::ClearFileMetadataRequest(const ClearFileMetadataRequest& other835) {
  fileIds = other835.fileIds;
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(const ClearFileMetadataRequest& other836) {
  fileIds = other836.fileIds;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
ClearFileMetadataRequest::ClearFileMetadataRequest(const ClearFileMetadataRequest& other877) {
  fileIds = other877.fileIds;
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(const ClearFileMetadataRequest& other878) {
  fileIds = other878.fileIds;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void ClearFileMetadataRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClearFileMetadataRequest(";
  out << "fileIds=" << to_string(fileIds);
  out << ")";
}


CacheFileMetadataResult::~CacheFileMetadataResult() throw() {
}


void CacheFileMetadataResult::__set_isSupported(const bool val) {
  this->isSupported = val;
}

uint32_t CacheFileMetadataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_isSupported = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isSupported);
          isset_isSupported = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_isSupported)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CacheFileMetadataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CacheFileMetadataResult");

  xfer += oprot->writeFieldBegin("isSupported", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->isSupported);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CacheFileMetadataResult &a, CacheFileMetadataResult &b) {
  using ::std::swap;
  swap(a.isSupported, b.isSupported);
}

<<<<<<< HEAD
<<<<<<< HEAD
CacheFileMetadataResult::CacheFileMetadataResult(const CacheFileMetadataResult& other899) {
  isSupported = other899.isSupported;
}
CacheFileMetadataResult& CacheFileMetadataResult::operator=(const CacheFileMetadataResult& other900) {
  isSupported = other900.isSupported;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CacheFileMetadataResult::CacheFileMetadataResult(const CacheFileMetadataResult& other875) {
  isSupported = other875.isSupported;
}
CacheFileMetadataResult& CacheFileMetadataResult::operator=(const CacheFileMetadataResult& other876) {
  isSupported = other876.isSupported;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
CacheFileMetadataResult::CacheFileMetadataResult(const CacheFileMetadataResult& other833) {
  isSupported = other833.isSupported;
}
CacheFileMetadataResult& CacheFileMetadataResult::operator=(const CacheFileMetadataResult& other834) {
  isSupported = other834.isSupported;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CacheFileMetadataResult::CacheFileMetadataResult(const CacheFileMetadataResult& other837) {
  isSupported = other837.isSupported;
}
CacheFileMetadataResult& CacheFileMetadataResult::operator=(const CacheFileMetadataResult& other838) {
  isSupported = other838.isSupported;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CacheFileMetadataResult::CacheFileMetadataResult(const CacheFileMetadataResult& other837) {
  isSupported = other837.isSupported;
}
CacheFileMetadataResult& CacheFileMetadataResult::operator=(const CacheFileMetadataResult& other838) {
  isSupported = other838.isSupported;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
CacheFileMetadataResult::CacheFileMetadataResult(const CacheFileMetadataResult& other879) {
  isSupported = other879.isSupported;
}
CacheFileMetadataResult& CacheFileMetadataResult::operator=(const CacheFileMetadataResult& other880) {
  isSupported = other880.isSupported;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void CacheFileMetadataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CacheFileMetadataResult(";
  out << "isSupported=" << to_string(isSupported);
  out << ")";
}


CacheFileMetadataRequest::~CacheFileMetadataRequest() throw() {
}


void CacheFileMetadataRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void CacheFileMetadataRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void CacheFileMetadataRequest::__set_partName(const std::string& val) {
  this->partName = val;
__isset.partName = true;
}

void CacheFileMetadataRequest::__set_isAllParts(const bool val) {
  this->isAllParts = val;
__isset.isAllParts = true;
}

uint32_t CacheFileMetadataRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;
  bool isset_tblName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tblName);
          isset_tblName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->partName);
          this->__isset.partName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isAllParts);
          this->__isset.isAllParts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tblName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CacheFileMetadataRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CacheFileMetadataRequest");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tblName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tblName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.partName) {
    xfer += oprot->writeFieldBegin("partName", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->partName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isAllParts) {
    xfer += oprot->writeFieldBegin("isAllParts", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->isAllParts);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CacheFileMetadataRequest &a, CacheFileMetadataRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.partName, b.partName);
  swap(a.isAllParts, b.isAllParts);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
CacheFileMetadataRequest::CacheFileMetadataRequest(const CacheFileMetadataRequest& other901) {
  dbName = other901.dbName;
  tblName = other901.tblName;
  partName = other901.partName;
  isAllParts = other901.isAllParts;
  __isset = other901.__isset;
}
CacheFileMetadataRequest& CacheFileMetadataRequest::operator=(const CacheFileMetadataRequest& other902) {
  dbName = other902.dbName;
  tblName = other902.tblName;
  partName = other902.partName;
  isAllParts = other902.isAllParts;
  __isset = other902.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CacheFileMetadataRequest::CacheFileMetadataRequest(const CacheFileMetadataRequest& other877) {
  dbName = other877.dbName;
  tblName = other877.tblName;
  partName = other877.partName;
  isAllParts = other877.isAllParts;
  __isset = other877.__isset;
}
CacheFileMetadataRequest& CacheFileMetadataRequest::operator=(const CacheFileMetadataRequest& other878) {
  dbName = other878.dbName;
  tblName = other878.tblName;
  partName = other878.partName;
  isAllParts = other878.isAllParts;
  __isset = other878.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
CacheFileMetadataRequest::CacheFileMetadataRequest(const CacheFileMetadataRequest& other835) {
  dbName = other835.dbName;
  tblName = other835.tblName;
  partName = other835.partName;
  isAllParts = other835.isAllParts;
  __isset = other835.__isset;
}
CacheFileMetadataRequest& CacheFileMetadataRequest::operator=(const CacheFileMetadataRequest& other836) {
  dbName = other836.dbName;
  tblName = other836.tblName;
  partName = other836.partName;
  isAllParts = other836.isAllParts;
  __isset = other836.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CacheFileMetadataRequest::CacheFileMetadataRequest(const CacheFileMetadataRequest& other839) {
  dbName = other839.dbName;
  tblName = other839.tblName;
  partName = other839.partName;
  isAllParts = other839.isAllParts;
  __isset = other839.__isset;
}
=======
CacheFileMetadataRequest::CacheFileMetadataRequest(const CacheFileMetadataRequest& other839) {
  dbName = other839.dbName;
  tblName = other839.tblName;
  partName = other839.partName;
  isAllParts = other839.isAllParts;
  __isset = other839.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
CacheFileMetadataRequest& CacheFileMetadataRequest::operator=(const CacheFileMetadataRequest& other840) {
  dbName = other840.dbName;
  tblName = other840.tblName;
  partName = other840.partName;
  isAllParts = other840.isAllParts;
  __isset = other840.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
CacheFileMetadataRequest::CacheFileMetadataRequest(const CacheFileMetadataRequest& other881) {
  dbName = other881.dbName;
  tblName = other881.tblName;
  partName = other881.partName;
  isAllParts = other881.isAllParts;
  __isset = other881.__isset;
}
CacheFileMetadataRequest& CacheFileMetadataRequest::operator=(const CacheFileMetadataRequest& other882) {
  dbName = other882.dbName;
  tblName = other882.tblName;
  partName = other882.partName;
  isAllParts = other882.isAllParts;
  __isset = other882.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void CacheFileMetadataRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CacheFileMetadataRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "partName="; (__isset.partName ? (out << to_string(partName)) : (out << "<null>"));
  out << ", " << "isAllParts="; (__isset.isAllParts ? (out << to_string(isAllParts)) : (out << "<null>"));
  out << ")";
}


GetAllFunctionsResponse::~GetAllFunctionsResponse() throw() {
}


void GetAllFunctionsResponse::__set_functions(const std::vector<Function> & val) {
  this->functions = val;
__isset.functions = true;
}

uint32_t GetAllFunctionsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->functions.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size903;
            ::apache::thrift::protocol::TType _etype906;
            xfer += iprot->readListBegin(_etype906, _size903);
            this->functions.resize(_size903);
            uint32_t _i907;
            for (_i907 = 0; _i907 < _size903; ++_i907)
            {
              xfer += this->functions[_i907].read(iprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size879;
            ::apache::thrift::protocol::TType _etype882;
            xfer += iprot->readListBegin(_etype882, _size879);
            this->functions.resize(_size879);
            uint32_t _i883;
            for (_i883 = 0; _i883 < _size879; ++_i883)
            {
              xfer += this->functions[_i883].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size837;
            ::apache::thrift::protocol::TType _etype840;
            xfer += iprot->readListBegin(_etype840, _size837);
            this->functions.resize(_size837);
            uint32_t _i841;
            for (_i841 = 0; _i841 < _size837; ++_i841)
            {
              xfer += this->functions[_i841].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size841;
            ::apache::thrift::protocol::TType _etype844;
            xfer += iprot->readListBegin(_etype844, _size841);
            this->functions.resize(_size841);
            uint32_t _i845;
            for (_i845 = 0; _i845 < _size841; ++_i845)
            {
              xfer += this->functions[_i845].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size841;
            ::apache::thrift::protocol::TType _etype844;
            xfer += iprot->readListBegin(_etype844, _size841);
            this->functions.resize(_size841);
            uint32_t _i845;
            for (_i845 = 0; _i845 < _size841; ++_i845)
            {
              xfer += this->functions[_i845].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size883;
            ::apache::thrift::protocol::TType _etype886;
            xfer += iprot->readListBegin(_etype886, _size883);
            this->functions.resize(_size883);
            uint32_t _i887;
            for (_i887 = 0; _i887 < _size883; ++_i887)
            {
              xfer += this->functions[_i887].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.functions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetAllFunctionsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetAllFunctionsResponse");

  if (this->__isset.functions) {
    xfer += oprot->writeFieldBegin("functions", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->functions.size()));
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<Function> ::const_iterator _iter908;
      for (_iter908 = this->functions.begin(); _iter908 != this->functions.end(); ++_iter908)
      {
        xfer += (*_iter908).write(oprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<Function> ::const_iterator _iter884;
      for (_iter884 = this->functions.begin(); _iter884 != this->functions.end(); ++_iter884)
      {
        xfer += (*_iter884).write(oprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
      std::vector<Function> ::const_iterator _iter842;
      for (_iter842 = this->functions.begin(); _iter842 != this->functions.end(); ++_iter842)
      {
        xfer += (*_iter842).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<Function> ::const_iterator _iter846;
      for (_iter846 = this->functions.begin(); _iter846 != this->functions.end(); ++_iter846)
      {
        xfer += (*_iter846).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<Function> ::const_iterator _iter846;
      for (_iter846 = this->functions.begin(); _iter846 != this->functions.end(); ++_iter846)
      {
        xfer += (*_iter846).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<Function> ::const_iterator _iter888;
      for (_iter888 = this->functions.begin(); _iter888 != this->functions.end(); ++_iter888)
      {
        xfer += (*_iter888).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetAllFunctionsResponse &a, GetAllFunctionsResponse &b) {
  using ::std::swap;
  swap(a.functions, b.functions);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
GetAllFunctionsResponse::GetAllFunctionsResponse(const GetAllFunctionsResponse& other909) {
  functions = other909.functions;
  __isset = other909.__isset;
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(const GetAllFunctionsResponse& other910) {
  functions = other910.functions;
  __isset = other910.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetAllFunctionsResponse::GetAllFunctionsResponse(const GetAllFunctionsResponse& other885) {
  functions = other885.functions;
  __isset = other885.__isset;
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(const GetAllFunctionsResponse& other886) {
  functions = other886.functions;
  __isset = other886.__isset;
=======
GetAllFunctionsResponse::GetAllFunctionsResponse(const GetAllFunctionsResponse& other843) {
  functions = other843.functions;
  __isset = other843.__isset;
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(const GetAllFunctionsResponse& other844) {
  functions = other844.functions;
  __isset = other844.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetAllFunctionsResponse::GetAllFunctionsResponse(const GetAllFunctionsResponse& other847) {
  functions = other847.functions;
  __isset = other847.__isset;
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(const GetAllFunctionsResponse& other848) {
  functions = other848.functions;
  __isset = other848.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
GetAllFunctionsResponse::GetAllFunctionsResponse(const GetAllFunctionsResponse& other843) {
  functions = other843.functions;
  __isset = other843.__isset;
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(const GetAllFunctionsResponse& other844) {
  functions = other844.functions;
  __isset = other844.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetAllFunctionsResponse::GetAllFunctionsResponse(const GetAllFunctionsResponse& other847) {
  functions = other847.functions;
  __isset = other847.__isset;
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(const GetAllFunctionsResponse& other848) {
  functions = other848.functions;
  __isset = other848.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
GetAllFunctionsResponse::GetAllFunctionsResponse(const GetAllFunctionsResponse& other889) {
  functions = other889.functions;
  __isset = other889.__isset;
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(const GetAllFunctionsResponse& other890) {
  functions = other890.functions;
  __isset = other890.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void GetAllFunctionsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetAllFunctionsResponse(";
  out << "functions="; (__isset.functions ? (out << to_string(functions)) : (out << "<null>"));
  out << ")";
}


ClientCapabilities::~ClientCapabilities() throw() {
}


void ClientCapabilities::__set_values(const std::vector<ClientCapability::type> & val) {
  this->values = val;
}

uint32_t ClientCapabilities::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_values = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size911;
            ::apache::thrift::protocol::TType _etype914;
            xfer += iprot->readListBegin(_etype914, _size911);
            this->values.resize(_size911);
            uint32_t _i915;
            for (_i915 = 0; _i915 < _size911; ++_i915)
            {
              int32_t ecast916;
              xfer += iprot->readI32(ecast916);
              this->values[_i915] = (ClientCapability::type)ecast916;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size887;
            ::apache::thrift::protocol::TType _etype890;
            xfer += iprot->readListBegin(_etype890, _size887);
            this->values.resize(_size887);
            uint32_t _i891;
            for (_i891 = 0; _i891 < _size887; ++_i891)
            {
              int32_t ecast892;
              xfer += iprot->readI32(ecast892);
              this->values[_i891] = (ClientCapability::type)ecast892;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size845;
            ::apache::thrift::protocol::TType _etype848;
            xfer += iprot->readListBegin(_etype848, _size845);
            this->values.resize(_size845);
            uint32_t _i849;
            for (_i849 = 0; _i849 < _size845; ++_i849)
            {
              int32_t ecast850;
              xfer += iprot->readI32(ecast850);
              this->values[_i849] = (ClientCapability::type)ecast850;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size849;
            ::apache::thrift::protocol::TType _etype852;
            xfer += iprot->readListBegin(_etype852, _size849);
            this->values.resize(_size849);
            uint32_t _i853;
            for (_i853 = 0; _i853 < _size849; ++_i853)
            {
              int32_t ecast854;
              xfer += iprot->readI32(ecast854);
              this->values[_i853] = (ClientCapability::type)ecast854;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size849;
            ::apache::thrift::protocol::TType _etype852;
            xfer += iprot->readListBegin(_etype852, _size849);
            this->values.resize(_size849);
            uint32_t _i853;
            for (_i853 = 0; _i853 < _size849; ++_i853)
            {
              int32_t ecast854;
              xfer += iprot->readI32(ecast854);
              this->values[_i853] = (ClientCapability::type)ecast854;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size891;
            ::apache::thrift::protocol::TType _etype894;
            xfer += iprot->readListBegin(_etype894, _size891);
            this->values.resize(_size891);
            uint32_t _i895;
            for (_i895 = 0; _i895 < _size891; ++_i895)
            {
              int32_t ecast896;
              xfer += iprot->readI32(ecast896);
              this->values[_i895] = (ClientCapability::type)ecast896;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          isset_values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_values)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ClientCapabilities::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ClientCapabilities");

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->values.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<ClientCapability::type> ::const_iterator _iter917;
    for (_iter917 = this->values.begin(); _iter917 != this->values.end(); ++_iter917)
    {
      xfer += oprot->writeI32((int32_t)(*_iter917));
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<ClientCapability::type> ::const_iterator _iter893;
    for (_iter893 = this->values.begin(); _iter893 != this->values.end(); ++_iter893)
    {
      xfer += oprot->writeI32((int32_t)(*_iter893));
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::vector<ClientCapability::type> ::const_iterator _iter851;
    for (_iter851 = this->values.begin(); _iter851 != this->values.end(); ++_iter851)
    {
      xfer += oprot->writeI32((int32_t)(*_iter851));
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<ClientCapability::type> ::const_iterator _iter855;
    for (_iter855 = this->values.begin(); _iter855 != this->values.end(); ++_iter855)
    {
      xfer += oprot->writeI32((int32_t)(*_iter855));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<ClientCapability::type> ::const_iterator _iter855;
    for (_iter855 = this->values.begin(); _iter855 != this->values.end(); ++_iter855)
    {
      xfer += oprot->writeI32((int32_t)(*_iter855));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<ClientCapability::type> ::const_iterator _iter897;
    for (_iter897 = this->values.begin(); _iter897 != this->values.end(); ++_iter897)
    {
      xfer += oprot->writeI32((int32_t)(*_iter897));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ClientCapabilities &a, ClientCapabilities &b) {
  using ::std::swap;
  swap(a.values, b.values);
}

<<<<<<< HEAD
<<<<<<< HEAD
ClientCapabilities::ClientCapabilities(const ClientCapabilities& other918) {
  values = other918.values;
}
ClientCapabilities& ClientCapabilities::operator=(const ClientCapabilities& other919) {
  values = other919.values;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ClientCapabilities::ClientCapabilities(const ClientCapabilities& other894) {
  values = other894.values;
}
ClientCapabilities& ClientCapabilities::operator=(const ClientCapabilities& other895) {
  values = other895.values;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
ClientCapabilities::ClientCapabilities(const ClientCapabilities& other852) {
  values = other852.values;
}
ClientCapabilities& ClientCapabilities::operator=(const ClientCapabilities& other853) {
  values = other853.values;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ClientCapabilities::ClientCapabilities(const ClientCapabilities& other856) {
  values = other856.values;
}
ClientCapabilities& ClientCapabilities::operator=(const ClientCapabilities& other857) {
  values = other857.values;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ClientCapabilities::ClientCapabilities(const ClientCapabilities& other856) {
  values = other856.values;
}
ClientCapabilities& ClientCapabilities::operator=(const ClientCapabilities& other857) {
  values = other857.values;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
ClientCapabilities::ClientCapabilities(const ClientCapabilities& other898) {
  values = other898.values;
}
ClientCapabilities& ClientCapabilities::operator=(const ClientCapabilities& other899) {
  values = other899.values;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void ClientCapabilities::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClientCapabilities(";
  out << "values=" << to_string(values);
  out << ")";
}


GetTableRequest::~GetTableRequest() throw() {
}


void GetTableRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void GetTableRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void GetTableRequest::__set_capabilities(const ClientCapabilities& val) {
  this->capabilities = val;
__isset.capabilities = true;
}

uint32_t GetTableRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;
  bool isset_tblName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tblName);
          isset_tblName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->capabilities.read(iprot);
          this->__isset.capabilities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tblName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetTableRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetTableRequest");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tblName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tblName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.capabilities) {
    xfer += oprot->writeFieldBegin("capabilities", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->capabilities.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetTableRequest &a, GetTableRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.capabilities, b.capabilities);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
GetTableRequest::GetTableRequest(const GetTableRequest& other920) {
  dbName = other920.dbName;
  tblName = other920.tblName;
  capabilities = other920.capabilities;
  __isset = other920.__isset;
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other921) {
  dbName = other921.dbName;
  tblName = other921.tblName;
  capabilities = other921.capabilities;
  __isset = other921.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetTableRequest::GetTableRequest(const GetTableRequest& other896) {
  dbName = other896.dbName;
  tblName = other896.tblName;
  capabilities = other896.capabilities;
  __isset = other896.__isset;
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other897) {
  dbName = other897.dbName;
  tblName = other897.tblName;
  capabilities = other897.capabilities;
  __isset = other897.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
GetTableRequest::GetTableRequest(const GetTableRequest& other854) {
  dbName = other854.dbName;
  tblName = other854.tblName;
  capabilities = other854.capabilities;
  __isset = other854.__isset;
<<<<<<< HEAD
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other855) {
  dbName = other855.dbName;
  tblName = other855.tblName;
  capabilities = other855.capabilities;
  __isset = other855.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
GetTableRequest::GetTableRequest(const GetTableRequest& other858) {
  dbName = other858.dbName;
  tblName = other858.tblName;
  capabilities = other858.capabilities;
  __isset = other858.__isset;
<<<<<<< HEAD
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other859) {
  dbName = other859.dbName;
  tblName = other859.tblName;
  capabilities = other859.capabilities;
  __isset = other859.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other855) {
  dbName = other855.dbName;
  tblName = other855.tblName;
  capabilities = other855.capabilities;
  __isset = other855.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other859) {
  dbName = other859.dbName;
  tblName = other859.tblName;
  capabilities = other859.capabilities;
  __isset = other859.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
GetTableRequest::GetTableRequest(const GetTableRequest& other900) {
  dbName = other900.dbName;
  tblName = other900.tblName;
  capabilities = other900.capabilities;
  __isset = other900.__isset;
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other901) {
  dbName = other901.dbName;
  tblName = other901.tblName;
  capabilities = other901.capabilities;
  __isset = other901.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void GetTableRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTableRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "capabilities="; (__isset.capabilities ? (out << to_string(capabilities)) : (out << "<null>"));
  out << ")";
}


GetTableResult::~GetTableResult() throw() {
}


void GetTableResult::__set_table(const Table& val) {
  this->table = val;
}

uint32_t GetTableResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_table = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->table.read(iprot);
          isset_table = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_table)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetTableResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetTableResult");

  xfer += oprot->writeFieldBegin("table", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->table.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetTableResult &a, GetTableResult &b) {
  using ::std::swap;
  swap(a.table, b.table);
}

<<<<<<< HEAD
<<<<<<< HEAD
GetTableResult::GetTableResult(const GetTableResult& other922) {
  table = other922.table;
}
GetTableResult& GetTableResult::operator=(const GetTableResult& other923) {
  table = other923.table;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetTableResult::GetTableResult(const GetTableResult& other898) {
  table = other898.table;
}
GetTableResult& GetTableResult::operator=(const GetTableResult& other899) {
  table = other899.table;
=======
GetTableResult::GetTableResult(const GetTableResult& other856) {
  table = other856.table;
}
GetTableResult& GetTableResult::operator=(const GetTableResult& other857) {
  table = other857.table;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetTableResult::GetTableResult(const GetTableResult& other860) {
  table = other860.table;
}
GetTableResult& GetTableResult::operator=(const GetTableResult& other861) {
  table = other861.table;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
GetTableResult::GetTableResult(const GetTableResult& other856) {
  table = other856.table;
}
GetTableResult& GetTableResult::operator=(const GetTableResult& other857) {
  table = other857.table;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetTableResult::GetTableResult(const GetTableResult& other860) {
  table = other860.table;
}
GetTableResult& GetTableResult::operator=(const GetTableResult& other861) {
  table = other861.table;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
GetTableResult::GetTableResult(const GetTableResult& other902) {
  table = other902.table;
}
GetTableResult& GetTableResult::operator=(const GetTableResult& other903) {
  table = other903.table;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void GetTableResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTableResult(";
  out << "table=" << to_string(table);
  out << ")";
}


GetTablesRequest::~GetTablesRequest() throw() {
}


void GetTablesRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void GetTablesRequest::__set_tblNames(const std::vector<std::string> & val) {
  this->tblNames = val;
__isset.tblNames = true;
}

void GetTablesRequest::__set_capabilities(const ClientCapabilities& val) {
  this->capabilities = val;
__isset.capabilities = true;
}

uint32_t GetTablesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tblNames.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size924;
            ::apache::thrift::protocol::TType _etype927;
            xfer += iprot->readListBegin(_etype927, _size924);
            this->tblNames.resize(_size924);
            uint32_t _i928;
            for (_i928 = 0; _i928 < _size924; ++_i928)
            {
              xfer += iprot->readString(this->tblNames[_i928]);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size900;
            ::apache::thrift::protocol::TType _etype903;
            xfer += iprot->readListBegin(_etype903, _size900);
            this->tblNames.resize(_size900);
            uint32_t _i904;
            for (_i904 = 0; _i904 < _size900; ++_i904)
            {
              xfer += iprot->readString(this->tblNames[_i904]);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size858;
            ::apache::thrift::protocol::TType _etype861;
            xfer += iprot->readListBegin(_etype861, _size858);
            this->tblNames.resize(_size858);
            uint32_t _i862;
            for (_i862 = 0; _i862 < _size858; ++_i862)
<<<<<<< HEAD
            {
              xfer += iprot->readString(this->tblNames[_i862]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size862;
            ::apache::thrift::protocol::TType _etype865;
            xfer += iprot->readListBegin(_etype865, _size862);
            this->tblNames.resize(_size862);
            uint32_t _i866;
            for (_i866 = 0; _i866 < _size862; ++_i866)
<<<<<<< HEAD
            {
              xfer += iprot->readString(this->tblNames[_i866]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              xfer += iprot->readString(this->tblNames[_i862]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += iprot->readString(this->tblNames[_i866]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size904;
            ::apache::thrift::protocol::TType _etype907;
            xfer += iprot->readListBegin(_etype907, _size904);
            this->tblNames.resize(_size904);
            uint32_t _i908;
            for (_i908 = 0; _i908 < _size904; ++_i908)
            {
              xfer += iprot->readString(this->tblNames[_i908]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tblNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->capabilities.read(iprot);
          this->__isset.capabilities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetTablesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetTablesRequest");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tblNames) {
    xfer += oprot->writeFieldBegin("tblNames", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tblNames.size()));
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter929;
      for (_iter929 = this->tblNames.begin(); _iter929 != this->tblNames.end(); ++_iter929)
      {
        xfer += oprot->writeString((*_iter929));
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter905;
      for (_iter905 = this->tblNames.begin(); _iter905 != this->tblNames.end(); ++_iter905)
      {
        xfer += oprot->writeString((*_iter905));
=======
      std::vector<std::string> ::const_iterator _iter863;
      for (_iter863 = this->tblNames.begin(); _iter863 != this->tblNames.end(); ++_iter863)
      {
        xfer += oprot->writeString((*_iter863));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter867;
      for (_iter867 = this->tblNames.begin(); _iter867 != this->tblNames.end(); ++_iter867)
      {
        xfer += oprot->writeString((*_iter867));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<std::string> ::const_iterator _iter863;
      for (_iter863 = this->tblNames.begin(); _iter863 != this->tblNames.end(); ++_iter863)
      {
        xfer += oprot->writeString((*_iter863));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter867;
      for (_iter867 = this->tblNames.begin(); _iter867 != this->tblNames.end(); ++_iter867)
      {
        xfer += oprot->writeString((*_iter867));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<std::string> ::const_iterator _iter909;
      for (_iter909 = this->tblNames.begin(); _iter909 != this->tblNames.end(); ++_iter909)
      {
        xfer += oprot->writeString((*_iter909));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.capabilities) {
    xfer += oprot->writeFieldBegin("capabilities", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->capabilities.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetTablesRequest &a, GetTablesRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblNames, b.tblNames);
  swap(a.capabilities, b.capabilities);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
GetTablesRequest::GetTablesRequest(const GetTablesRequest& other930) {
  dbName = other930.dbName;
  tblNames = other930.tblNames;
  capabilities = other930.capabilities;
  __isset = other930.__isset;
}
GetTablesRequest& GetTablesRequest::operator=(const GetTablesRequest& other931) {
  dbName = other931.dbName;
  tblNames = other931.tblNames;
  capabilities = other931.capabilities;
  __isset = other931.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetTablesRequest::GetTablesRequest(const GetTablesRequest& other906) {
  dbName = other906.dbName;
  tblNames = other906.tblNames;
  capabilities = other906.capabilities;
  __isset = other906.__isset;
}
GetTablesRequest& GetTablesRequest::operator=(const GetTablesRequest& other907) {
  dbName = other907.dbName;
  tblNames = other907.tblNames;
  capabilities = other907.capabilities;
  __isset = other907.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
GetTablesRequest::GetTablesRequest(const GetTablesRequest& other864) {
  dbName = other864.dbName;
  tblNames = other864.tblNames;
  capabilities = other864.capabilities;
  __isset = other864.__isset;
}
GetTablesRequest& GetTablesRequest::operator=(const GetTablesRequest& other865) {
  dbName = other865.dbName;
  tblNames = other865.tblNames;
  capabilities = other865.capabilities;
  __isset = other865.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetTablesRequest::GetTablesRequest(const GetTablesRequest& other868) {
  dbName = other868.dbName;
  tblNames = other868.tblNames;
  capabilities = other868.capabilities;
  __isset = other868.__isset;
}
=======
GetTablesRequest::GetTablesRequest(const GetTablesRequest& other868) {
  dbName = other868.dbName;
  tblNames = other868.tblNames;
  capabilities = other868.capabilities;
  __isset = other868.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
GetTablesRequest& GetTablesRequest::operator=(const GetTablesRequest& other869) {
  dbName = other869.dbName;
  tblNames = other869.tblNames;
  capabilities = other869.capabilities;
  __isset = other869.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
GetTablesRequest::GetTablesRequest(const GetTablesRequest& other910) {
  dbName = other910.dbName;
  tblNames = other910.tblNames;
  capabilities = other910.capabilities;
  __isset = other910.__isset;
}
GetTablesRequest& GetTablesRequest::operator=(const GetTablesRequest& other911) {
  dbName = other911.dbName;
  tblNames = other911.tblNames;
  capabilities = other911.capabilities;
  __isset = other911.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void GetTablesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTablesRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblNames="; (__isset.tblNames ? (out << to_string(tblNames)) : (out << "<null>"));
  out << ", " << "capabilities="; (__isset.capabilities ? (out << to_string(capabilities)) : (out << "<null>"));
  out << ")";
}


GetTablesResult::~GetTablesResult() throw() {
}


void GetTablesResult::__set_tables(const std::vector<Table> & val) {
  this->tables = val;
}

uint32_t GetTablesResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tables = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tables.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size932;
            ::apache::thrift::protocol::TType _etype935;
            xfer += iprot->readListBegin(_etype935, _size932);
            this->tables.resize(_size932);
            uint32_t _i936;
            for (_i936 = 0; _i936 < _size932; ++_i936)
            {
              xfer += this->tables[_i936].read(iprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size908;
            ::apache::thrift::protocol::TType _etype911;
            xfer += iprot->readListBegin(_etype911, _size908);
            this->tables.resize(_size908);
            uint32_t _i912;
            for (_i912 = 0; _i912 < _size908; ++_i912)
            {
              xfer += this->tables[_i912].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size866;
            ::apache::thrift::protocol::TType _etype869;
            xfer += iprot->readListBegin(_etype869, _size866);
            this->tables.resize(_size866);
            uint32_t _i870;
            for (_i870 = 0; _i870 < _size866; ++_i870)
            {
              xfer += this->tables[_i870].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size870;
            ::apache::thrift::protocol::TType _etype873;
            xfer += iprot->readListBegin(_etype873, _size870);
            this->tables.resize(_size870);
            uint32_t _i874;
            for (_i874 = 0; _i874 < _size870; ++_i874)
            {
              xfer += this->tables[_i874].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size870;
            ::apache::thrift::protocol::TType _etype873;
            xfer += iprot->readListBegin(_etype873, _size870);
            this->tables.resize(_size870);
            uint32_t _i874;
            for (_i874 = 0; _i874 < _size870; ++_i874)
            {
              xfer += this->tables[_i874].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size912;
            ::apache::thrift::protocol::TType _etype915;
            xfer += iprot->readListBegin(_etype915, _size912);
            this->tables.resize(_size912);
            uint32_t _i916;
            for (_i916 = 0; _i916 < _size912; ++_i916)
            {
              xfer += this->tables[_i916].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          isset_tables = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tables)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GetTablesResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetTablesResult");

  xfer += oprot->writeFieldBegin("tables", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tables.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<Table> ::const_iterator _iter937;
    for (_iter937 = this->tables.begin(); _iter937 != this->tables.end(); ++_iter937)
    {
      xfer += (*_iter937).write(oprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<Table> ::const_iterator _iter913;
    for (_iter913 = this->tables.begin(); _iter913 != this->tables.end(); ++_iter913)
    {
      xfer += (*_iter913).write(oprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
    std::vector<Table> ::const_iterator _iter871;
    for (_iter871 = this->tables.begin(); _iter871 != this->tables.end(); ++_iter871)
    {
      xfer += (*_iter871).write(oprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<Table> ::const_iterator _iter875;
    for (_iter875 = this->tables.begin(); _iter875 != this->tables.end(); ++_iter875)
    {
      xfer += (*_iter875).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<Table> ::const_iterator _iter875;
    for (_iter875 = this->tables.begin(); _iter875 != this->tables.end(); ++_iter875)
    {
      xfer += (*_iter875).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<Table> ::const_iterator _iter917;
    for (_iter917 = this->tables.begin(); _iter917 != this->tables.end(); ++_iter917)
    {
      xfer += (*_iter917).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetTablesResult &a, GetTablesResult &b) {
  using ::std::swap;
  swap(a.tables, b.tables);
}

<<<<<<< HEAD
<<<<<<< HEAD
GetTablesResult::GetTablesResult(const GetTablesResult& other938) {
  tables = other938.tables;
}
GetTablesResult& GetTablesResult::operator=(const GetTablesResult& other939) {
  tables = other939.tables;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
GetTablesResult::GetTablesResult(const GetTablesResult& other914) {
  tables = other914.tables;
}
GetTablesResult& GetTablesResult::operator=(const GetTablesResult& other915) {
  tables = other915.tables;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
GetTablesResult::GetTablesResult(const GetTablesResult& other872) {
  tables = other872.tables;
}
GetTablesResult& GetTablesResult::operator=(const GetTablesResult& other873) {
  tables = other873.tables;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetTablesResult::GetTablesResult(const GetTablesResult& other876) {
  tables = other876.tables;
}
GetTablesResult& GetTablesResult::operator=(const GetTablesResult& other877) {
  tables = other877.tables;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
GetTablesResult::GetTablesResult(const GetTablesResult& other876) {
  tables = other876.tables;
}
GetTablesResult& GetTablesResult::operator=(const GetTablesResult& other877) {
  tables = other877.tables;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
GetTablesResult::GetTablesResult(const GetTablesResult& other918) {
  tables = other918.tables;
}
GetTablesResult& GetTablesResult::operator=(const GetTablesResult& other919) {
  tables = other919.tables;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void GetTablesResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTablesResult(";
  out << "tables=" << to_string(tables);
  out << ")";
}


CmRecycleRequest::~CmRecycleRequest() throw() {
}


void CmRecycleRequest::__set_dataPath(const std::string& val) {
  this->dataPath = val;
}

void CmRecycleRequest::__set_purge(const bool val) {
  this->purge = val;
}

uint32_t CmRecycleRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dataPath = false;
  bool isset_purge = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dataPath);
          isset_dataPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->purge);
          isset_purge = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dataPath)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_purge)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CmRecycleRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CmRecycleRequest");

  xfer += oprot->writeFieldBegin("dataPath", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dataPath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("purge", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->purge);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CmRecycleRequest &a, CmRecycleRequest &b) {
  using ::std::swap;
  swap(a.dataPath, b.dataPath);
  swap(a.purge, b.purge);
}

<<<<<<< HEAD
<<<<<<< HEAD
CmRecycleRequest::CmRecycleRequest(const CmRecycleRequest& other940) {
  dataPath = other940.dataPath;
  purge = other940.purge;
}
CmRecycleRequest& CmRecycleRequest::operator=(const CmRecycleRequest& other941) {
  dataPath = other941.dataPath;
  purge = other941.purge;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CmRecycleRequest::CmRecycleRequest(const CmRecycleRequest& other916) {
  dataPath = other916.dataPath;
  purge = other916.purge;
}
CmRecycleRequest& CmRecycleRequest::operator=(const CmRecycleRequest& other917) {
  dataPath = other917.dataPath;
  purge = other917.purge;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
CmRecycleRequest::CmRecycleRequest(const CmRecycleRequest& other874) {
  dataPath = other874.dataPath;
  purge = other874.purge;
}
CmRecycleRequest& CmRecycleRequest::operator=(const CmRecycleRequest& other875) {
  dataPath = other875.dataPath;
  purge = other875.purge;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CmRecycleRequest::CmRecycleRequest(const CmRecycleRequest& other878) {
  dataPath = other878.dataPath;
  purge = other878.purge;
}
CmRecycleRequest& CmRecycleRequest::operator=(const CmRecycleRequest& other879) {
  dataPath = other879.dataPath;
  purge = other879.purge;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CmRecycleRequest::CmRecycleRequest(const CmRecycleRequest& other878) {
  dataPath = other878.dataPath;
  purge = other878.purge;
}
CmRecycleRequest& CmRecycleRequest::operator=(const CmRecycleRequest& other879) {
  dataPath = other879.dataPath;
  purge = other879.purge;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
CmRecycleRequest::CmRecycleRequest(const CmRecycleRequest& other920) {
  dataPath = other920.dataPath;
  purge = other920.purge;
}
CmRecycleRequest& CmRecycleRequest::operator=(const CmRecycleRequest& other921) {
  dataPath = other921.dataPath;
  purge = other921.purge;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void CmRecycleRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CmRecycleRequest(";
  out << "dataPath=" << to_string(dataPath);
  out << ", " << "purge=" << to_string(purge);
  out << ")";
}


CmRecycleResponse::~CmRecycleResponse() throw() {
}


uint32_t CmRecycleResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CmRecycleResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CmRecycleResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CmRecycleResponse &a, CmRecycleResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
CmRecycleResponse::CmRecycleResponse(const CmRecycleResponse& other942) {
  (void) other942;
}
CmRecycleResponse& CmRecycleResponse::operator=(const CmRecycleResponse& other943) {
  (void) other943;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
CmRecycleResponse::CmRecycleResponse(const CmRecycleResponse& other918) {
  (void) other918;
}
CmRecycleResponse& CmRecycleResponse::operator=(const CmRecycleResponse& other919) {
  (void) other919;
=======
CmRecycleResponse::CmRecycleResponse(const CmRecycleResponse& other876) {
  (void) other876;
}
CmRecycleResponse& CmRecycleResponse::operator=(const CmRecycleResponse& other877) {
  (void) other877;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CmRecycleResponse::CmRecycleResponse(const CmRecycleResponse& other880) {
  (void) other880;
}
CmRecycleResponse& CmRecycleResponse::operator=(const CmRecycleResponse& other881) {
  (void) other881;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
CmRecycleResponse::CmRecycleResponse(const CmRecycleResponse& other876) {
  (void) other876;
}
CmRecycleResponse& CmRecycleResponse::operator=(const CmRecycleResponse& other877) {
  (void) other877;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
CmRecycleResponse::CmRecycleResponse(const CmRecycleResponse& other880) {
  (void) other880;
}
CmRecycleResponse& CmRecycleResponse::operator=(const CmRecycleResponse& other881) {
  (void) other881;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
CmRecycleResponse::CmRecycleResponse(const CmRecycleResponse& other922) {
  (void) other922;
}
CmRecycleResponse& CmRecycleResponse::operator=(const CmRecycleResponse& other923) {
  (void) other923;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void CmRecycleResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CmRecycleResponse(";
  out << ")";
}


TableMeta::~TableMeta() throw() {
}


void TableMeta::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void TableMeta::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void TableMeta::__set_tableType(const std::string& val) {
  this->tableType = val;
}

void TableMeta::__set_comments(const std::string& val) {
  this->comments = val;
__isset.comments = true;
}

uint32_t TableMeta::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dbName = false;
  bool isset_tableName = false;
  bool isset_tableType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dbName);
          isset_dbName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableName);
          isset_tableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableType);
          isset_tableType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comments);
          this->__isset.comments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dbName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tableName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tableType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TableMeta::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TableMeta");

  xfer += oprot->writeFieldBegin("dbName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dbName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tableName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tableName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tableType", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->tableType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.comments) {
    xfer += oprot->writeFieldBegin("comments", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->comments);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TableMeta &a, TableMeta &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.tableType, b.tableType);
  swap(a.comments, b.comments);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
TableMeta::TableMeta(const TableMeta& other944) {
  dbName = other944.dbName;
  tableName = other944.tableName;
  tableType = other944.tableType;
  comments = other944.comments;
  __isset = other944.__isset;
}
TableMeta& TableMeta::operator=(const TableMeta& other945) {
  dbName = other945.dbName;
  tableName = other945.tableName;
  tableType = other945.tableType;
  comments = other945.comments;
  __isset = other945.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
TableMeta::TableMeta(const TableMeta& other920) {
  dbName = other920.dbName;
  tableName = other920.tableName;
  tableType = other920.tableType;
  comments = other920.comments;
  __isset = other920.__isset;
}
TableMeta& TableMeta::operator=(const TableMeta& other921) {
  dbName = other921.dbName;
  tableName = other921.tableName;
  tableType = other921.tableType;
  comments = other921.comments;
  __isset = other921.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
TableMeta::TableMeta(const TableMeta& other878) {
  dbName = other878.dbName;
  tableName = other878.tableName;
  tableType = other878.tableType;
  comments = other878.comments;
  __isset = other878.__isset;
}
TableMeta& TableMeta::operator=(const TableMeta& other879) {
  dbName = other879.dbName;
  tableName = other879.tableName;
  tableType = other879.tableType;
  comments = other879.comments;
  __isset = other879.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
TableMeta::TableMeta(const TableMeta& other882) {
  dbName = other882.dbName;
  tableName = other882.tableName;
  tableType = other882.tableType;
  comments = other882.comments;
  __isset = other882.__isset;
}
=======
TableMeta::TableMeta(const TableMeta& other882) {
  dbName = other882.dbName;
  tableName = other882.tableName;
  tableType = other882.tableType;
  comments = other882.comments;
  __isset = other882.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
TableMeta& TableMeta::operator=(const TableMeta& other883) {
  dbName = other883.dbName;
  tableName = other883.tableName;
  tableType = other883.tableType;
  comments = other883.comments;
  __isset = other883.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
TableMeta::TableMeta(const TableMeta& other924) {
  dbName = other924.dbName;
  tableName = other924.tableName;
  tableType = other924.tableType;
  comments = other924.comments;
  __isset = other924.__isset;
}
TableMeta& TableMeta::operator=(const TableMeta& other925) {
  dbName = other925.dbName;
  tableName = other925.tableName;
  tableType = other925.tableType;
  comments = other925.comments;
  __isset = other925.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void TableMeta::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TableMeta(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ", " << "tableType=" << to_string(tableType);
  out << ", " << "comments="; (__isset.comments ? (out << to_string(comments)) : (out << "<null>"));
  out << ")";
}


Materialization::~Materialization() throw() {
}


void Materialization::__set_tablesUsed(const std::set<std::string> & val) {
  this->tablesUsed = val;
}

void Materialization::__set_validTxnList(const std::string& val) {
  this->validTxnList = val;
__isset.validTxnList = true;
}

void Materialization::__set_invalidationTime(const int64_t val) {
  this->invalidationTime = val;
}

uint32_t Materialization::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_tablesUsed = false;
  bool isset_invalidationTime = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->tablesUsed.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size946;
            ::apache::thrift::protocol::TType _etype949;
            xfer += iprot->readSetBegin(_etype949, _size946);
            uint32_t _i950;
            for (_i950 = 0; _i950 < _size946; ++_i950)
            {
              std::string _elem951;
              xfer += iprot->readString(_elem951);
              this->tablesUsed.insert(_elem951);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size922;
            ::apache::thrift::protocol::TType _etype925;
            xfer += iprot->readSetBegin(_etype925, _size922);
            uint32_t _i926;
            for (_i926 = 0; _i926 < _size922; ++_i926)
            {
              std::string _elem927;
              xfer += iprot->readString(_elem927);
              this->tablesUsed.insert(_elem927);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size880;
            ::apache::thrift::protocol::TType _etype883;
            xfer += iprot->readSetBegin(_etype883, _size880);
            uint32_t _i884;
            for (_i884 = 0; _i884 < _size880; ++_i884)
            {
              std::string _elem885;
              xfer += iprot->readString(_elem885);
              this->tablesUsed.insert(_elem885);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size884;
            ::apache::thrift::protocol::TType _etype887;
            xfer += iprot->readSetBegin(_etype887, _size884);
            uint32_t _i888;
            for (_i888 = 0; _i888 < _size884; ++_i888)
            {
              std::string _elem889;
              xfer += iprot->readString(_elem889);
              this->tablesUsed.insert(_elem889);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size884;
            ::apache::thrift::protocol::TType _etype887;
            xfer += iprot->readSetBegin(_etype887, _size884);
            uint32_t _i888;
            for (_i888 = 0; _i888 < _size884; ++_i888)
            {
              std::string _elem889;
              xfer += iprot->readString(_elem889);
              this->tablesUsed.insert(_elem889);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size926;
            ::apache::thrift::protocol::TType _etype929;
            xfer += iprot->readSetBegin(_etype929, _size926);
            uint32_t _i930;
            for (_i930 = 0; _i930 < _size926; ++_i930)
            {
              std::string _elem931;
              xfer += iprot->readString(_elem931);
              this->tablesUsed.insert(_elem931);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readSetEnd();
          }
          isset_tablesUsed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->validTxnList);
          this->__isset.validTxnList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->invalidationTime);
          isset_invalidationTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_tablesUsed)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_invalidationTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Materialization::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Materialization");

  xfer += oprot->writeFieldBegin("tablesUsed", ::apache::thrift::protocol::T_SET, 1);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tablesUsed.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::set<std::string> ::const_iterator _iter952;
    for (_iter952 = this->tablesUsed.begin(); _iter952 != this->tablesUsed.end(); ++_iter952)
    {
      xfer += oprot->writeString((*_iter952));
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::set<std::string> ::const_iterator _iter928;
    for (_iter928 = this->tablesUsed.begin(); _iter928 != this->tablesUsed.end(); ++_iter928)
    {
      xfer += oprot->writeString((*_iter928));
=======
    std::set<std::string> ::const_iterator _iter886;
    for (_iter886 = this->tablesUsed.begin(); _iter886 != this->tablesUsed.end(); ++_iter886)
    {
      xfer += oprot->writeString((*_iter886));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::set<std::string> ::const_iterator _iter890;
    for (_iter890 = this->tablesUsed.begin(); _iter890 != this->tablesUsed.end(); ++_iter890)
    {
      xfer += oprot->writeString((*_iter890));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::set<std::string> ::const_iterator _iter886;
    for (_iter886 = this->tablesUsed.begin(); _iter886 != this->tablesUsed.end(); ++_iter886)
    {
      xfer += oprot->writeString((*_iter886));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::set<std::string> ::const_iterator _iter890;
    for (_iter890 = this->tablesUsed.begin(); _iter890 != this->tablesUsed.end(); ++_iter890)
    {
      xfer += oprot->writeString((*_iter890));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::set<std::string> ::const_iterator _iter932;
    for (_iter932 = this->tablesUsed.begin(); _iter932 != this->tablesUsed.end(); ++_iter932)
    {
      xfer += oprot->writeString((*_iter932));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.validTxnList) {
    xfer += oprot->writeFieldBegin("validTxnList", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->validTxnList);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("invalidationTime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->invalidationTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Materialization &a, Materialization &b) {
  using ::std::swap;
  swap(a.tablesUsed, b.tablesUsed);
  swap(a.validTxnList, b.validTxnList);
  swap(a.invalidationTime, b.invalidationTime);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
Materialization::Materialization(const Materialization& other953) {
  tablesUsed = other953.tablesUsed;
  validTxnList = other953.validTxnList;
  invalidationTime = other953.invalidationTime;
  __isset = other953.__isset;
}
Materialization& Materialization::operator=(const Materialization& other954) {
  tablesUsed = other954.tablesUsed;
  validTxnList = other954.validTxnList;
  invalidationTime = other954.invalidationTime;
  __isset = other954.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
Materialization::Materialization(const Materialization& other929) {
  tablesUsed = other929.tablesUsed;
  validTxnList = other929.validTxnList;
  invalidationTime = other929.invalidationTime;
  __isset = other929.__isset;
}
Materialization& Materialization::operator=(const Materialization& other930) {
  tablesUsed = other930.tablesUsed;
  validTxnList = other930.validTxnList;
  invalidationTime = other930.invalidationTime;
  __isset = other930.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
Materialization::Materialization(const Materialization& other887) {
  materializationTable = other887.materializationTable;
  tablesUsed = other887.tablesUsed;
  invalidationTime = other887.invalidationTime;
}
Materialization& Materialization::operator=(const Materialization& other888) {
  materializationTable = other888.materializationTable;
  tablesUsed = other888.tablesUsed;
  invalidationTime = other888.invalidationTime;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
Materialization::Materialization(const Materialization& other891) {
  materializationTable = other891.materializationTable;
  tablesUsed = other891.tablesUsed;
  invalidationTime = other891.invalidationTime;
}
=======
Materialization::Materialization(const Materialization& other891) {
  materializationTable = other891.materializationTable;
  tablesUsed = other891.tablesUsed;
  invalidationTime = other891.invalidationTime;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
Materialization& Materialization::operator=(const Materialization& other892) {
  materializationTable = other892.materializationTable;
  tablesUsed = other892.tablesUsed;
  invalidationTime = other892.invalidationTime;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
Materialization::Materialization(const Materialization& other933) {
  tablesUsed = other933.tablesUsed;
  validTxnList = other933.validTxnList;
  invalidationTime = other933.invalidationTime;
  __isset = other933.__isset;
}
Materialization& Materialization::operator=(const Materialization& other934) {
  tablesUsed = other934.tablesUsed;
  validTxnList = other934.validTxnList;
  invalidationTime = other934.invalidationTime;
  __isset = other934.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void Materialization::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Materialization(";
  out << "tablesUsed=" << to_string(tablesUsed);
  out << ", " << "validTxnList="; (__isset.validTxnList ? (out << to_string(validTxnList)) : (out << "<null>"));
  out << ", " << "invalidationTime=" << to_string(invalidationTime);
  out << ")";
}


WMResourcePlan::~WMResourcePlan() throw() {
}


void WMResourcePlan::__set_name(const std::string& val) {
  this->name = val;
}

void WMResourcePlan::__set_status(const WMResourcePlanStatus::type val) {
  this->status = val;
__isset.status = true;
}

void WMResourcePlan::__set_queryParallelism(const int32_t val) {
  this->queryParallelism = val;
__isset.queryParallelism = true;
}

void WMResourcePlan::__set_defaultPoolPath(const std::string& val) {
  this->defaultPoolPath = val;
__isset.defaultPoolPath = true;
}

uint32_t WMResourcePlan::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast955;
          xfer += iprot->readI32(ecast955);
          this->status = (WMResourcePlanStatus::type)ecast955;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast931;
          xfer += iprot->readI32(ecast931);
          this->status = (WMResourcePlanStatus::type)ecast931;
=======
          int32_t ecast889;
          xfer += iprot->readI32(ecast889);
          this->status = (WMResourcePlanStatus::type)ecast889;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast893;
          xfer += iprot->readI32(ecast893);
          this->status = (WMResourcePlanStatus::type)ecast893;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast889;
          xfer += iprot->readI32(ecast889);
          this->status = (WMResourcePlanStatus::type)ecast889;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast893;
          xfer += iprot->readI32(ecast893);
          this->status = (WMResourcePlanStatus::type)ecast893;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast935;
          xfer += iprot->readI32(ecast935);
          this->status = (WMResourcePlanStatus::type)ecast935;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->queryParallelism);
          this->__isset.queryParallelism = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->defaultPoolPath);
          this->__isset.defaultPoolPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WMResourcePlan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMResourcePlan");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.queryParallelism) {
    xfer += oprot->writeFieldBegin("queryParallelism", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->queryParallelism);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.defaultPoolPath) {
    xfer += oprot->writeFieldBegin("defaultPoolPath", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->defaultPoolPath);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMResourcePlan &a, WMResourcePlan &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.status, b.status);
  swap(a.queryParallelism, b.queryParallelism);
  swap(a.defaultPoolPath, b.defaultPoolPath);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMResourcePlan::WMResourcePlan(const WMResourcePlan& other956) {
  name = other956.name;
  status = other956.status;
  queryParallelism = other956.queryParallelism;
  defaultPoolPath = other956.defaultPoolPath;
  __isset = other956.__isset;
}
WMResourcePlan& WMResourcePlan::operator=(const WMResourcePlan& other957) {
  name = other957.name;
  status = other957.status;
  queryParallelism = other957.queryParallelism;
  defaultPoolPath = other957.defaultPoolPath;
  __isset = other957.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMResourcePlan::WMResourcePlan(const WMResourcePlan& other932) {
  name = other932.name;
  status = other932.status;
  queryParallelism = other932.queryParallelism;
  defaultPoolPath = other932.defaultPoolPath;
  __isset = other932.__isset;
}
WMResourcePlan& WMResourcePlan::operator=(const WMResourcePlan& other933) {
  name = other933.name;
  status = other933.status;
  queryParallelism = other933.queryParallelism;
  defaultPoolPath = other933.defaultPoolPath;
  __isset = other933.__isset;
=======
WMResourcePlan::WMResourcePlan(const WMResourcePlan& other890) {
  name = other890.name;
  status = other890.status;
  queryParallelism = other890.queryParallelism;
  defaultPoolPath = other890.defaultPoolPath;
  __isset = other890.__isset;
}
=======
WMResourcePlan::WMResourcePlan(const WMResourcePlan& other890) {
  name = other890.name;
  status = other890.status;
  queryParallelism = other890.queryParallelism;
  defaultPoolPath = other890.defaultPoolPath;
  __isset = other890.__isset;
}
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMResourcePlan& WMResourcePlan::operator=(const WMResourcePlan& other891) {
  name = other891.name;
  status = other891.status;
  queryParallelism = other891.queryParallelism;
  defaultPoolPath = other891.defaultPoolPath;
  __isset = other891.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMResourcePlan::WMResourcePlan(const WMResourcePlan& other894) {
  name = other894.name;
  status = other894.status;
  queryParallelism = other894.queryParallelism;
  defaultPoolPath = other894.defaultPoolPath;
  __isset = other894.__isset;
}
=======
WMResourcePlan::WMResourcePlan(const WMResourcePlan& other894) {
  name = other894.name;
  status = other894.status;
  queryParallelism = other894.queryParallelism;
  defaultPoolPath = other894.defaultPoolPath;
  __isset = other894.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMResourcePlan& WMResourcePlan::operator=(const WMResourcePlan& other895) {
  name = other895.name;
  status = other895.status;
  queryParallelism = other895.queryParallelism;
  defaultPoolPath = other895.defaultPoolPath;
  __isset = other895.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMResourcePlan::WMResourcePlan(const WMResourcePlan& other936) {
  name = other936.name;
  status = other936.status;
  queryParallelism = other936.queryParallelism;
  defaultPoolPath = other936.defaultPoolPath;
  __isset = other936.__isset;
}
WMResourcePlan& WMResourcePlan::operator=(const WMResourcePlan& other937) {
  name = other937.name;
  status = other937.status;
  queryParallelism = other937.queryParallelism;
  defaultPoolPath = other937.defaultPoolPath;
  __isset = other937.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMResourcePlan::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMResourcePlan(";
  out << "name=" << to_string(name);
  out << ", " << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ", " << "queryParallelism="; (__isset.queryParallelism ? (out << to_string(queryParallelism)) : (out << "<null>"));
  out << ", " << "defaultPoolPath="; (__isset.defaultPoolPath ? (out << to_string(defaultPoolPath)) : (out << "<null>"));
  out << ")";
}


WMNullableResourcePlan::~WMNullableResourcePlan() throw() {
}


void WMNullableResourcePlan::__set_name(const std::string& val) {
  this->name = val;
}

void WMNullableResourcePlan::__set_status(const WMResourcePlanStatus::type val) {
  this->status = val;
__isset.status = true;
}

void WMNullableResourcePlan::__set_queryParallelism(const int32_t val) {
  this->queryParallelism = val;
__isset.queryParallelism = true;
}

void WMNullableResourcePlan::__set_isSetQueryParallelism(const bool val) {
  this->isSetQueryParallelism = val;
__isset.isSetQueryParallelism = true;
}

void WMNullableResourcePlan::__set_defaultPoolPath(const std::string& val) {
  this->defaultPoolPath = val;
__isset.defaultPoolPath = true;
}

void WMNullableResourcePlan::__set_isSetDefaultPoolPath(const bool val) {
  this->isSetDefaultPoolPath = val;
__isset.isSetDefaultPoolPath = true;
}

uint32_t WMNullableResourcePlan::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast958;
          xfer += iprot->readI32(ecast958);
          this->status = (WMResourcePlanStatus::type)ecast958;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
          int32_t ecast934;
          xfer += iprot->readI32(ecast934);
          this->status = (WMResourcePlanStatus::type)ecast934;
=======
          int32_t ecast892;
          xfer += iprot->readI32(ecast892);
          this->status = (WMResourcePlanStatus::type)ecast892;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast896;
          xfer += iprot->readI32(ecast896);
          this->status = (WMResourcePlanStatus::type)ecast896;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast892;
          xfer += iprot->readI32(ecast892);
          this->status = (WMResourcePlanStatus::type)ecast892;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
          int32_t ecast896;
          xfer += iprot->readI32(ecast896);
          this->status = (WMResourcePlanStatus::type)ecast896;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
          int32_t ecast938;
          xfer += iprot->readI32(ecast938);
          this->status = (WMResourcePlanStatus::type)ecast938;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->queryParallelism);
          this->__isset.queryParallelism = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isSetQueryParallelism);
          this->__isset.isSetQueryParallelism = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->defaultPoolPath);
          this->__isset.defaultPoolPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isSetDefaultPoolPath);
          this->__isset.isSetDefaultPoolPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WMNullableResourcePlan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMNullableResourcePlan");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.queryParallelism) {
    xfer += oprot->writeFieldBegin("queryParallelism", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->queryParallelism);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isSetQueryParallelism) {
    xfer += oprot->writeFieldBegin("isSetQueryParallelism", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->isSetQueryParallelism);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.defaultPoolPath) {
    xfer += oprot->writeFieldBegin("defaultPoolPath", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->defaultPoolPath);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isSetDefaultPoolPath) {
    xfer += oprot->writeFieldBegin("isSetDefaultPoolPath", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->isSetDefaultPoolPath);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMNullableResourcePlan &a, WMNullableResourcePlan &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.status, b.status);
  swap(a.queryParallelism, b.queryParallelism);
  swap(a.isSetQueryParallelism, b.isSetQueryParallelism);
  swap(a.defaultPoolPath, b.defaultPoolPath);
  swap(a.isSetDefaultPoolPath, b.isSetDefaultPoolPath);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMNullableResourcePlan::WMNullableResourcePlan(const WMNullableResourcePlan& other959) {
  name = other959.name;
  status = other959.status;
  queryParallelism = other959.queryParallelism;
  isSetQueryParallelism = other959.isSetQueryParallelism;
  defaultPoolPath = other959.defaultPoolPath;
  isSetDefaultPoolPath = other959.isSetDefaultPoolPath;
  __isset = other959.__isset;
}
WMNullableResourcePlan& WMNullableResourcePlan::operator=(const WMNullableResourcePlan& other960) {
  name = other960.name;
  status = other960.status;
  queryParallelism = other960.queryParallelism;
  isSetQueryParallelism = other960.isSetQueryParallelism;
  defaultPoolPath = other960.defaultPoolPath;
  isSetDefaultPoolPath = other960.isSetDefaultPoolPath;
  __isset = other960.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMNullableResourcePlan::WMNullableResourcePlan(const WMNullableResourcePlan& other935) {
  name = other935.name;
  status = other935.status;
  queryParallelism = other935.queryParallelism;
  isSetQueryParallelism = other935.isSetQueryParallelism;
  defaultPoolPath = other935.defaultPoolPath;
  isSetDefaultPoolPath = other935.isSetDefaultPoolPath;
  __isset = other935.__isset;
}
WMNullableResourcePlan& WMNullableResourcePlan::operator=(const WMNullableResourcePlan& other936) {
  name = other936.name;
  status = other936.status;
  queryParallelism = other936.queryParallelism;
  isSetQueryParallelism = other936.isSetQueryParallelism;
  defaultPoolPath = other936.defaultPoolPath;
  isSetDefaultPoolPath = other936.isSetDefaultPoolPath;
  __isset = other936.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMNullableResourcePlan::WMNullableResourcePlan(const WMNullableResourcePlan& other893) {
  name = other893.name;
  status = other893.status;
  queryParallelism = other893.queryParallelism;
  isSetQueryParallelism = other893.isSetQueryParallelism;
  defaultPoolPath = other893.defaultPoolPath;
  isSetDefaultPoolPath = other893.isSetDefaultPoolPath;
  __isset = other893.__isset;
}
WMNullableResourcePlan& WMNullableResourcePlan::operator=(const WMNullableResourcePlan& other894) {
  name = other894.name;
  status = other894.status;
  queryParallelism = other894.queryParallelism;
  isSetQueryParallelism = other894.isSetQueryParallelism;
  defaultPoolPath = other894.defaultPoolPath;
  isSetDefaultPoolPath = other894.isSetDefaultPoolPath;
  __isset = other894.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMNullableResourcePlan::WMNullableResourcePlan(const WMNullableResourcePlan& other897) {
  name = other897.name;
  status = other897.status;
  queryParallelism = other897.queryParallelism;
  isSetQueryParallelism = other897.isSetQueryParallelism;
  defaultPoolPath = other897.defaultPoolPath;
  isSetDefaultPoolPath = other897.isSetDefaultPoolPath;
  __isset = other897.__isset;
}
=======
WMNullableResourcePlan::WMNullableResourcePlan(const WMNullableResourcePlan& other897) {
  name = other897.name;
  status = other897.status;
  queryParallelism = other897.queryParallelism;
  isSetQueryParallelism = other897.isSetQueryParallelism;
  defaultPoolPath = other897.defaultPoolPath;
  isSetDefaultPoolPath = other897.isSetDefaultPoolPath;
  __isset = other897.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMNullableResourcePlan& WMNullableResourcePlan::operator=(const WMNullableResourcePlan& other898) {
  name = other898.name;
  status = other898.status;
  queryParallelism = other898.queryParallelism;
  isSetQueryParallelism = other898.isSetQueryParallelism;
  defaultPoolPath = other898.defaultPoolPath;
  isSetDefaultPoolPath = other898.isSetDefaultPoolPath;
  __isset = other898.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMNullableResourcePlan::WMNullableResourcePlan(const WMNullableResourcePlan& other939) {
  name = other939.name;
  status = other939.status;
  queryParallelism = other939.queryParallelism;
  isSetQueryParallelism = other939.isSetQueryParallelism;
  defaultPoolPath = other939.defaultPoolPath;
  isSetDefaultPoolPath = other939.isSetDefaultPoolPath;
  __isset = other939.__isset;
}
WMNullableResourcePlan& WMNullableResourcePlan::operator=(const WMNullableResourcePlan& other940) {
  name = other940.name;
  status = other940.status;
  queryParallelism = other940.queryParallelism;
  isSetQueryParallelism = other940.isSetQueryParallelism;
  defaultPoolPath = other940.defaultPoolPath;
  isSetDefaultPoolPath = other940.isSetDefaultPoolPath;
  __isset = other940.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMNullableResourcePlan::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMNullableResourcePlan(";
  out << "name=" << to_string(name);
  out << ", " << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ", " << "queryParallelism="; (__isset.queryParallelism ? (out << to_string(queryParallelism)) : (out << "<null>"));
  out << ", " << "isSetQueryParallelism="; (__isset.isSetQueryParallelism ? (out << to_string(isSetQueryParallelism)) : (out << "<null>"));
  out << ", " << "defaultPoolPath="; (__isset.defaultPoolPath ? (out << to_string(defaultPoolPath)) : (out << "<null>"));
  out << ", " << "isSetDefaultPoolPath="; (__isset.isSetDefaultPoolPath ? (out << to_string(isSetDefaultPoolPath)) : (out << "<null>"));
  out << ")";
}


WMPool::~WMPool() throw() {
}


void WMPool::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
}

void WMPool::__set_poolPath(const std::string& val) {
  this->poolPath = val;
}

void WMPool::__set_allocFraction(const double val) {
  this->allocFraction = val;
__isset.allocFraction = true;
}

void WMPool::__set_queryParallelism(const int32_t val) {
  this->queryParallelism = val;
__isset.queryParallelism = true;
}

void WMPool::__set_schedulingPolicy(const std::string& val) {
  this->schedulingPolicy = val;
__isset.schedulingPolicy = true;
}

uint32_t WMPool::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_resourcePlanName = false;
  bool isset_poolPath = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          isset_resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->poolPath);
          isset_poolPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->allocFraction);
          this->__isset.allocFraction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->queryParallelism);
          this->__isset.queryParallelism = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->schedulingPolicy);
          this->__isset.schedulingPolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_resourcePlanName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_poolPath)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WMPool::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMPool");

  xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->resourcePlanName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("poolPath", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->poolPath);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.allocFraction) {
    xfer += oprot->writeFieldBegin("allocFraction", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->allocFraction);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.queryParallelism) {
    xfer += oprot->writeFieldBegin("queryParallelism", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->queryParallelism);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.schedulingPolicy) {
    xfer += oprot->writeFieldBegin("schedulingPolicy", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->schedulingPolicy);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMPool &a, WMPool &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.poolPath, b.poolPath);
  swap(a.allocFraction, b.allocFraction);
  swap(a.queryParallelism, b.queryParallelism);
  swap(a.schedulingPolicy, b.schedulingPolicy);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMPool::WMPool(const WMPool& other961) {
  resourcePlanName = other961.resourcePlanName;
  poolPath = other961.poolPath;
  allocFraction = other961.allocFraction;
  queryParallelism = other961.queryParallelism;
  schedulingPolicy = other961.schedulingPolicy;
  __isset = other961.__isset;
}
WMPool& WMPool::operator=(const WMPool& other962) {
  resourcePlanName = other962.resourcePlanName;
  poolPath = other962.poolPath;
  allocFraction = other962.allocFraction;
  queryParallelism = other962.queryParallelism;
  schedulingPolicy = other962.schedulingPolicy;
  __isset = other962.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMPool::WMPool(const WMPool& other937) {
  resourcePlanName = other937.resourcePlanName;
  poolPath = other937.poolPath;
  allocFraction = other937.allocFraction;
  queryParallelism = other937.queryParallelism;
  schedulingPolicy = other937.schedulingPolicy;
  __isset = other937.__isset;
}
WMPool& WMPool::operator=(const WMPool& other938) {
  resourcePlanName = other938.resourcePlanName;
  poolPath = other938.poolPath;
  allocFraction = other938.allocFraction;
  queryParallelism = other938.queryParallelism;
  schedulingPolicy = other938.schedulingPolicy;
  __isset = other938.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMPool::WMPool(const WMPool& other895) {
  resourcePlanName = other895.resourcePlanName;
  poolPath = other895.poolPath;
  allocFraction = other895.allocFraction;
  queryParallelism = other895.queryParallelism;
  schedulingPolicy = other895.schedulingPolicy;
  __isset = other895.__isset;
}
WMPool& WMPool::operator=(const WMPool& other896) {
  resourcePlanName = other896.resourcePlanName;
  poolPath = other896.poolPath;
  allocFraction = other896.allocFraction;
  queryParallelism = other896.queryParallelism;
  schedulingPolicy = other896.schedulingPolicy;
  __isset = other896.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMPool::WMPool(const WMPool& other899) {
  resourcePlanName = other899.resourcePlanName;
  poolPath = other899.poolPath;
  allocFraction = other899.allocFraction;
  queryParallelism = other899.queryParallelism;
  schedulingPolicy = other899.schedulingPolicy;
  __isset = other899.__isset;
}
=======
WMPool::WMPool(const WMPool& other899) {
  resourcePlanName = other899.resourcePlanName;
  poolPath = other899.poolPath;
  allocFraction = other899.allocFraction;
  queryParallelism = other899.queryParallelism;
  schedulingPolicy = other899.schedulingPolicy;
  __isset = other899.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMPool& WMPool::operator=(const WMPool& other900) {
  resourcePlanName = other900.resourcePlanName;
  poolPath = other900.poolPath;
  allocFraction = other900.allocFraction;
  queryParallelism = other900.queryParallelism;
  schedulingPolicy = other900.schedulingPolicy;
  __isset = other900.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMPool::WMPool(const WMPool& other941) {
  resourcePlanName = other941.resourcePlanName;
  poolPath = other941.poolPath;
  allocFraction = other941.allocFraction;
  queryParallelism = other941.queryParallelism;
  schedulingPolicy = other941.schedulingPolicy;
  __isset = other941.__isset;
}
WMPool& WMPool::operator=(const WMPool& other942) {
  resourcePlanName = other942.resourcePlanName;
  poolPath = other942.poolPath;
  allocFraction = other942.allocFraction;
  queryParallelism = other942.queryParallelism;
  schedulingPolicy = other942.schedulingPolicy;
  __isset = other942.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMPool::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMPool(";
  out << "resourcePlanName=" << to_string(resourcePlanName);
  out << ", " << "poolPath=" << to_string(poolPath);
  out << ", " << "allocFraction="; (__isset.allocFraction ? (out << to_string(allocFraction)) : (out << "<null>"));
  out << ", " << "queryParallelism="; (__isset.queryParallelism ? (out << to_string(queryParallelism)) : (out << "<null>"));
  out << ", " << "schedulingPolicy="; (__isset.schedulingPolicy ? (out << to_string(schedulingPolicy)) : (out << "<null>"));
  out << ")";
}


WMNullablePool::~WMNullablePool() throw() {
}


void WMNullablePool::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
}

void WMNullablePool::__set_poolPath(const std::string& val) {
  this->poolPath = val;
}

void WMNullablePool::__set_allocFraction(const double val) {
  this->allocFraction = val;
__isset.allocFraction = true;
}

void WMNullablePool::__set_queryParallelism(const int32_t val) {
  this->queryParallelism = val;
__isset.queryParallelism = true;
}

void WMNullablePool::__set_schedulingPolicy(const std::string& val) {
  this->schedulingPolicy = val;
__isset.schedulingPolicy = true;
}

void WMNullablePool::__set_isSetSchedulingPolicy(const bool val) {
  this->isSetSchedulingPolicy = val;
__isset.isSetSchedulingPolicy = true;
}

uint32_t WMNullablePool::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_resourcePlanName = false;
  bool isset_poolPath = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          isset_resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->poolPath);
          isset_poolPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->allocFraction);
          this->__isset.allocFraction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->queryParallelism);
          this->__isset.queryParallelism = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->schedulingPolicy);
          this->__isset.schedulingPolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isSetSchedulingPolicy);
          this->__isset.isSetSchedulingPolicy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_resourcePlanName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_poolPath)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WMNullablePool::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMNullablePool");

  xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->resourcePlanName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("poolPath", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->poolPath);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.allocFraction) {
    xfer += oprot->writeFieldBegin("allocFraction", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->allocFraction);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.queryParallelism) {
    xfer += oprot->writeFieldBegin("queryParallelism", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->queryParallelism);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.schedulingPolicy) {
    xfer += oprot->writeFieldBegin("schedulingPolicy", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->schedulingPolicy);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isSetSchedulingPolicy) {
    xfer += oprot->writeFieldBegin("isSetSchedulingPolicy", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->isSetSchedulingPolicy);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMNullablePool &a, WMNullablePool &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.poolPath, b.poolPath);
  swap(a.allocFraction, b.allocFraction);
  swap(a.queryParallelism, b.queryParallelism);
  swap(a.schedulingPolicy, b.schedulingPolicy);
  swap(a.isSetSchedulingPolicy, b.isSetSchedulingPolicy);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMNullablePool::WMNullablePool(const WMNullablePool& other963) {
  resourcePlanName = other963.resourcePlanName;
  poolPath = other963.poolPath;
  allocFraction = other963.allocFraction;
  queryParallelism = other963.queryParallelism;
  schedulingPolicy = other963.schedulingPolicy;
  isSetSchedulingPolicy = other963.isSetSchedulingPolicy;
  __isset = other963.__isset;
}
WMNullablePool& WMNullablePool::operator=(const WMNullablePool& other964) {
  resourcePlanName = other964.resourcePlanName;
  poolPath = other964.poolPath;
  allocFraction = other964.allocFraction;
  queryParallelism = other964.queryParallelism;
  schedulingPolicy = other964.schedulingPolicy;
  isSetSchedulingPolicy = other964.isSetSchedulingPolicy;
  __isset = other964.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMNullablePool::WMNullablePool(const WMNullablePool& other939) {
  resourcePlanName = other939.resourcePlanName;
  poolPath = other939.poolPath;
  allocFraction = other939.allocFraction;
  queryParallelism = other939.queryParallelism;
  schedulingPolicy = other939.schedulingPolicy;
  isSetSchedulingPolicy = other939.isSetSchedulingPolicy;
  __isset = other939.__isset;
}
WMNullablePool& WMNullablePool::operator=(const WMNullablePool& other940) {
  resourcePlanName = other940.resourcePlanName;
  poolPath = other940.poolPath;
  allocFraction = other940.allocFraction;
  queryParallelism = other940.queryParallelism;
  schedulingPolicy = other940.schedulingPolicy;
  isSetSchedulingPolicy = other940.isSetSchedulingPolicy;
  __isset = other940.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMNullablePool::WMNullablePool(const WMNullablePool& other897) {
  resourcePlanName = other897.resourcePlanName;
  poolPath = other897.poolPath;
  allocFraction = other897.allocFraction;
  queryParallelism = other897.queryParallelism;
  schedulingPolicy = other897.schedulingPolicy;
  isSetSchedulingPolicy = other897.isSetSchedulingPolicy;
  __isset = other897.__isset;
}
WMNullablePool& WMNullablePool::operator=(const WMNullablePool& other898) {
  resourcePlanName = other898.resourcePlanName;
  poolPath = other898.poolPath;
  allocFraction = other898.allocFraction;
  queryParallelism = other898.queryParallelism;
  schedulingPolicy = other898.schedulingPolicy;
  isSetSchedulingPolicy = other898.isSetSchedulingPolicy;
  __isset = other898.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMNullablePool::WMNullablePool(const WMNullablePool& other901) {
  resourcePlanName = other901.resourcePlanName;
  poolPath = other901.poolPath;
  allocFraction = other901.allocFraction;
  queryParallelism = other901.queryParallelism;
  schedulingPolicy = other901.schedulingPolicy;
  isSetSchedulingPolicy = other901.isSetSchedulingPolicy;
  __isset = other901.__isset;
}
=======
WMNullablePool::WMNullablePool(const WMNullablePool& other901) {
  resourcePlanName = other901.resourcePlanName;
  poolPath = other901.poolPath;
  allocFraction = other901.allocFraction;
  queryParallelism = other901.queryParallelism;
  schedulingPolicy = other901.schedulingPolicy;
  isSetSchedulingPolicy = other901.isSetSchedulingPolicy;
  __isset = other901.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMNullablePool& WMNullablePool::operator=(const WMNullablePool& other902) {
  resourcePlanName = other902.resourcePlanName;
  poolPath = other902.poolPath;
  allocFraction = other902.allocFraction;
  queryParallelism = other902.queryParallelism;
  schedulingPolicy = other902.schedulingPolicy;
  isSetSchedulingPolicy = other902.isSetSchedulingPolicy;
  __isset = other902.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMNullablePool::WMNullablePool(const WMNullablePool& other943) {
  resourcePlanName = other943.resourcePlanName;
  poolPath = other943.poolPath;
  allocFraction = other943.allocFraction;
  queryParallelism = other943.queryParallelism;
  schedulingPolicy = other943.schedulingPolicy;
  isSetSchedulingPolicy = other943.isSetSchedulingPolicy;
  __isset = other943.__isset;
}
WMNullablePool& WMNullablePool::operator=(const WMNullablePool& other944) {
  resourcePlanName = other944.resourcePlanName;
  poolPath = other944.poolPath;
  allocFraction = other944.allocFraction;
  queryParallelism = other944.queryParallelism;
  schedulingPolicy = other944.schedulingPolicy;
  isSetSchedulingPolicy = other944.isSetSchedulingPolicy;
  __isset = other944.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMNullablePool::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMNullablePool(";
  out << "resourcePlanName=" << to_string(resourcePlanName);
  out << ", " << "poolPath=" << to_string(poolPath);
  out << ", " << "allocFraction="; (__isset.allocFraction ? (out << to_string(allocFraction)) : (out << "<null>"));
  out << ", " << "queryParallelism="; (__isset.queryParallelism ? (out << to_string(queryParallelism)) : (out << "<null>"));
  out << ", " << "schedulingPolicy="; (__isset.schedulingPolicy ? (out << to_string(schedulingPolicy)) : (out << "<null>"));
  out << ", " << "isSetSchedulingPolicy="; (__isset.isSetSchedulingPolicy ? (out << to_string(isSetSchedulingPolicy)) : (out << "<null>"));
  out << ")";
}


WMTrigger::~WMTrigger() throw() {
}


void WMTrigger::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
}

void WMTrigger::__set_triggerName(const std::string& val) {
  this->triggerName = val;
}

void WMTrigger::__set_triggerExpression(const std::string& val) {
  this->triggerExpression = val;
__isset.triggerExpression = true;
}

void WMTrigger::__set_actionExpression(const std::string& val) {
  this->actionExpression = val;
__isset.actionExpression = true;
}

void WMTrigger::__set_isInUnmanaged(const bool val) {
  this->isInUnmanaged = val;
__isset.isInUnmanaged = true;
}

uint32_t WMTrigger::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_resourcePlanName = false;
  bool isset_triggerName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          isset_resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->triggerName);
          isset_triggerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->triggerExpression);
          this->__isset.triggerExpression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actionExpression);
          this->__isset.actionExpression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isInUnmanaged);
          this->__isset.isInUnmanaged = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_resourcePlanName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_triggerName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WMTrigger::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMTrigger");

  xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->resourcePlanName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("triggerName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->triggerName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.triggerExpression) {
    xfer += oprot->writeFieldBegin("triggerExpression", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->triggerExpression);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.actionExpression) {
    xfer += oprot->writeFieldBegin("actionExpression", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->actionExpression);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isInUnmanaged) {
    xfer += oprot->writeFieldBegin("isInUnmanaged", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->isInUnmanaged);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMTrigger &a, WMTrigger &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.triggerName, b.triggerName);
  swap(a.triggerExpression, b.triggerExpression);
  swap(a.actionExpression, b.actionExpression);
  swap(a.isInUnmanaged, b.isInUnmanaged);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMTrigger::WMTrigger(const WMTrigger& other965) {
  resourcePlanName = other965.resourcePlanName;
  triggerName = other965.triggerName;
  triggerExpression = other965.triggerExpression;
  actionExpression = other965.actionExpression;
  isInUnmanaged = other965.isInUnmanaged;
  __isset = other965.__isset;
}
WMTrigger& WMTrigger::operator=(const WMTrigger& other966) {
  resourcePlanName = other966.resourcePlanName;
  triggerName = other966.triggerName;
  triggerExpression = other966.triggerExpression;
  actionExpression = other966.actionExpression;
  isInUnmanaged = other966.isInUnmanaged;
  __isset = other966.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMTrigger::WMTrigger(const WMTrigger& other941) {
  resourcePlanName = other941.resourcePlanName;
  triggerName = other941.triggerName;
  triggerExpression = other941.triggerExpression;
  actionExpression = other941.actionExpression;
  isInUnmanaged = other941.isInUnmanaged;
  __isset = other941.__isset;
}
WMTrigger& WMTrigger::operator=(const WMTrigger& other942) {
  resourcePlanName = other942.resourcePlanName;
  triggerName = other942.triggerName;
  triggerExpression = other942.triggerExpression;
  actionExpression = other942.actionExpression;
  isInUnmanaged = other942.isInUnmanaged;
  __isset = other942.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMTrigger::WMTrigger(const WMTrigger& other899) {
  resourcePlanName = other899.resourcePlanName;
  triggerName = other899.triggerName;
  triggerExpression = other899.triggerExpression;
  actionExpression = other899.actionExpression;
  isInUnmanaged = other899.isInUnmanaged;
  __isset = other899.__isset;
}
WMTrigger& WMTrigger::operator=(const WMTrigger& other900) {
  resourcePlanName = other900.resourcePlanName;
  triggerName = other900.triggerName;
  triggerExpression = other900.triggerExpression;
  actionExpression = other900.actionExpression;
  isInUnmanaged = other900.isInUnmanaged;
  __isset = other900.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMTrigger::WMTrigger(const WMTrigger& other903) {
  resourcePlanName = other903.resourcePlanName;
  triggerName = other903.triggerName;
  triggerExpression = other903.triggerExpression;
  actionExpression = other903.actionExpression;
  isInUnmanaged = other903.isInUnmanaged;
  __isset = other903.__isset;
}
WMTrigger& WMTrigger::operator=(const WMTrigger& other904) {
  resourcePlanName = other904.resourcePlanName;
  triggerName = other904.triggerName;
  triggerExpression = other904.triggerExpression;
  actionExpression = other904.actionExpression;
  isInUnmanaged = other904.isInUnmanaged;
  __isset = other904.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMTrigger::WMTrigger(const WMTrigger& other945) {
  resourcePlanName = other945.resourcePlanName;
  triggerName = other945.triggerName;
  triggerExpression = other945.triggerExpression;
  actionExpression = other945.actionExpression;
  isInUnmanaged = other945.isInUnmanaged;
  __isset = other945.__isset;
}
WMTrigger& WMTrigger::operator=(const WMTrigger& other946) {
  resourcePlanName = other946.resourcePlanName;
  triggerName = other946.triggerName;
  triggerExpression = other946.triggerExpression;
  actionExpression = other946.actionExpression;
  isInUnmanaged = other946.isInUnmanaged;
  __isset = other946.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMTrigger::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMTrigger(";
  out << "resourcePlanName=" << to_string(resourcePlanName);
  out << ", " << "triggerName=" << to_string(triggerName);
  out << ", " << "triggerExpression="; (__isset.triggerExpression ? (out << to_string(triggerExpression)) : (out << "<null>"));
  out << ", " << "actionExpression="; (__isset.actionExpression ? (out << to_string(actionExpression)) : (out << "<null>"));
  out << ", " << "isInUnmanaged="; (__isset.isInUnmanaged ? (out << to_string(isInUnmanaged)) : (out << "<null>"));
  out << ")";
}


WMMapping::~WMMapping() throw() {
}


void WMMapping::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
}

void WMMapping::__set_entityType(const std::string& val) {
  this->entityType = val;
}

void WMMapping::__set_entityName(const std::string& val) {
  this->entityName = val;
}

void WMMapping::__set_poolPath(const std::string& val) {
  this->poolPath = val;
__isset.poolPath = true;
}

void WMMapping::__set_ordering(const int32_t val) {
  this->ordering = val;
__isset.ordering = true;
}

uint32_t WMMapping::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_resourcePlanName = false;
  bool isset_entityType = false;
  bool isset_entityName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          isset_resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->entityType);
          isset_entityType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->entityName);
          isset_entityName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->poolPath);
          this->__isset.poolPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ordering);
          this->__isset.ordering = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_resourcePlanName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_entityType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_entityName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WMMapping::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMMapping");

  xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->resourcePlanName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("entityType", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->entityType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("entityName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->entityName);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.poolPath) {
    xfer += oprot->writeFieldBegin("poolPath", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->poolPath);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ordering) {
    xfer += oprot->writeFieldBegin("ordering", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->ordering);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMMapping &a, WMMapping &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.entityType, b.entityType);
  swap(a.entityName, b.entityName);
  swap(a.poolPath, b.poolPath);
  swap(a.ordering, b.ordering);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMMapping::WMMapping(const WMMapping& other967) {
  resourcePlanName = other967.resourcePlanName;
  entityType = other967.entityType;
  entityName = other967.entityName;
  poolPath = other967.poolPath;
  ordering = other967.ordering;
  __isset = other967.__isset;
}
WMMapping& WMMapping::operator=(const WMMapping& other968) {
  resourcePlanName = other968.resourcePlanName;
  entityType = other968.entityType;
  entityName = other968.entityName;
  poolPath = other968.poolPath;
  ordering = other968.ordering;
  __isset = other968.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMMapping::WMMapping(const WMMapping& other943) {
  resourcePlanName = other943.resourcePlanName;
  entityType = other943.entityType;
  entityName = other943.entityName;
  poolPath = other943.poolPath;
  ordering = other943.ordering;
  __isset = other943.__isset;
}
WMMapping& WMMapping::operator=(const WMMapping& other944) {
  resourcePlanName = other944.resourcePlanName;
  entityType = other944.entityType;
  entityName = other944.entityName;
  poolPath = other944.poolPath;
  ordering = other944.ordering;
  __isset = other944.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMMapping::WMMapping(const WMMapping& other901) {
  resourcePlanName = other901.resourcePlanName;
  entityType = other901.entityType;
  entityName = other901.entityName;
  poolPath = other901.poolPath;
  ordering = other901.ordering;
  __isset = other901.__isset;
}
WMMapping& WMMapping::operator=(const WMMapping& other902) {
  resourcePlanName = other902.resourcePlanName;
  entityType = other902.entityType;
  entityName = other902.entityName;
  poolPath = other902.poolPath;
  ordering = other902.ordering;
  __isset = other902.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMMapping::WMMapping(const WMMapping& other905) {
  resourcePlanName = other905.resourcePlanName;
  entityType = other905.entityType;
  entityName = other905.entityName;
  poolPath = other905.poolPath;
  ordering = other905.ordering;
  __isset = other905.__isset;
}
WMMapping& WMMapping::operator=(const WMMapping& other906) {
  resourcePlanName = other906.resourcePlanName;
  entityType = other906.entityType;
  entityName = other906.entityName;
  poolPath = other906.poolPath;
  ordering = other906.ordering;
  __isset = other906.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMMapping::WMMapping(const WMMapping& other947) {
  resourcePlanName = other947.resourcePlanName;
  entityType = other947.entityType;
  entityName = other947.entityName;
  poolPath = other947.poolPath;
  ordering = other947.ordering;
  __isset = other947.__isset;
}
WMMapping& WMMapping::operator=(const WMMapping& other948) {
  resourcePlanName = other948.resourcePlanName;
  entityType = other948.entityType;
  entityName = other948.entityName;
  poolPath = other948.poolPath;
  ordering = other948.ordering;
  __isset = other948.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMMapping::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMMapping(";
  out << "resourcePlanName=" << to_string(resourcePlanName);
  out << ", " << "entityType=" << to_string(entityType);
  out << ", " << "entityName=" << to_string(entityName);
  out << ", " << "poolPath="; (__isset.poolPath ? (out << to_string(poolPath)) : (out << "<null>"));
  out << ", " << "ordering="; (__isset.ordering ? (out << to_string(ordering)) : (out << "<null>"));
  out << ")";
}


WMPoolTrigger::~WMPoolTrigger() throw() {
}


void WMPoolTrigger::__set_pool(const std::string& val) {
  this->pool = val;
}

void WMPoolTrigger::__set_trigger(const std::string& val) {
  this->trigger = val;
}

uint32_t WMPoolTrigger::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_pool = false;
  bool isset_trigger = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pool);
          isset_pool = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->trigger);
          isset_trigger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_pool)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_trigger)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WMPoolTrigger::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMPoolTrigger");

  xfer += oprot->writeFieldBegin("pool", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->pool);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trigger", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->trigger);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMPoolTrigger &a, WMPoolTrigger &b) {
  using ::std::swap;
  swap(a.pool, b.pool);
  swap(a.trigger, b.trigger);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMPoolTrigger::WMPoolTrigger(const WMPoolTrigger& other969) {
  pool = other969.pool;
  trigger = other969.trigger;
}
WMPoolTrigger& WMPoolTrigger::operator=(const WMPoolTrigger& other970) {
  pool = other970.pool;
  trigger = other970.trigger;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMPoolTrigger::WMPoolTrigger(const WMPoolTrigger& other945) {
  pool = other945.pool;
  trigger = other945.trigger;
}
WMPoolTrigger& WMPoolTrigger::operator=(const WMPoolTrigger& other946) {
  pool = other946.pool;
  trigger = other946.trigger;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMPoolTrigger::WMPoolTrigger(const WMPoolTrigger& other903) {
  pool = other903.pool;
  trigger = other903.trigger;
}
WMPoolTrigger& WMPoolTrigger::operator=(const WMPoolTrigger& other904) {
  pool = other904.pool;
  trigger = other904.trigger;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMPoolTrigger::WMPoolTrigger(const WMPoolTrigger& other907) {
  pool = other907.pool;
  trigger = other907.trigger;
}
WMPoolTrigger& WMPoolTrigger::operator=(const WMPoolTrigger& other908) {
  pool = other908.pool;
  trigger = other908.trigger;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMPoolTrigger::WMPoolTrigger(const WMPoolTrigger& other907) {
  pool = other907.pool;
  trigger = other907.trigger;
}
WMPoolTrigger& WMPoolTrigger::operator=(const WMPoolTrigger& other908) {
  pool = other908.pool;
  trigger = other908.trigger;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMPoolTrigger::WMPoolTrigger(const WMPoolTrigger& other949) {
  pool = other949.pool;
  trigger = other949.trigger;
}
WMPoolTrigger& WMPoolTrigger::operator=(const WMPoolTrigger& other950) {
  pool = other950.pool;
  trigger = other950.trigger;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMPoolTrigger::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMPoolTrigger(";
  out << "pool=" << to_string(pool);
  out << ", " << "trigger=" << to_string(trigger);
  out << ")";
}


WMFullResourcePlan::~WMFullResourcePlan() throw() {
}


void WMFullResourcePlan::__set_plan(const WMResourcePlan& val) {
  this->plan = val;
}

void WMFullResourcePlan::__set_pools(const std::vector<WMPool> & val) {
  this->pools = val;
}

void WMFullResourcePlan::__set_mappings(const std::vector<WMMapping> & val) {
  this->mappings = val;
__isset.mappings = true;
}

void WMFullResourcePlan::__set_triggers(const std::vector<WMTrigger> & val) {
  this->triggers = val;
__isset.triggers = true;
}

void WMFullResourcePlan::__set_poolTriggers(const std::vector<WMPoolTrigger> & val) {
  this->poolTriggers = val;
__isset.poolTriggers = true;
}

uint32_t WMFullResourcePlan::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_plan = false;
  bool isset_pools = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->plan.read(iprot);
          isset_plan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pools.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size971;
            ::apache::thrift::protocol::TType _etype974;
            xfer += iprot->readListBegin(_etype974, _size971);
            this->pools.resize(_size971);
            uint32_t _i975;
            for (_i975 = 0; _i975 < _size971; ++_i975)
            {
              xfer += this->pools[_i975].read(iprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size947;
            ::apache::thrift::protocol::TType _etype950;
            xfer += iprot->readListBegin(_etype950, _size947);
            this->pools.resize(_size947);
            uint32_t _i951;
            for (_i951 = 0; _i951 < _size947; ++_i951)
            {
              xfer += this->pools[_i951].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size905;
            ::apache::thrift::protocol::TType _etype908;
            xfer += iprot->readListBegin(_etype908, _size905);
            this->pools.resize(_size905);
            uint32_t _i909;
            for (_i909 = 0; _i909 < _size905; ++_i909)
<<<<<<< HEAD
            {
              xfer += this->pools[_i909].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size909;
            ::apache::thrift::protocol::TType _etype912;
            xfer += iprot->readListBegin(_etype912, _size909);
            this->pools.resize(_size909);
            uint32_t _i913;
            for (_i913 = 0; _i913 < _size909; ++_i913)
<<<<<<< HEAD
            {
              xfer += this->pools[_i913].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              xfer += this->pools[_i909].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += this->pools[_i913].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size951;
            ::apache::thrift::protocol::TType _etype954;
            xfer += iprot->readListBegin(_etype954, _size951);
            this->pools.resize(_size951);
            uint32_t _i955;
            for (_i955 = 0; _i955 < _size951; ++_i955)
            {
              xfer += this->pools[_i955].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          isset_pools = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->mappings.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size976;
            ::apache::thrift::protocol::TType _etype979;
            xfer += iprot->readListBegin(_etype979, _size976);
            this->mappings.resize(_size976);
            uint32_t _i980;
            for (_i980 = 0; _i980 < _size976; ++_i980)
            {
              xfer += this->mappings[_i980].read(iprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size952;
            ::apache::thrift::protocol::TType _etype955;
            xfer += iprot->readListBegin(_etype955, _size952);
            this->mappings.resize(_size952);
            uint32_t _i956;
            for (_i956 = 0; _i956 < _size952; ++_i956)
            {
              xfer += this->mappings[_i956].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size910;
            ::apache::thrift::protocol::TType _etype913;
            xfer += iprot->readListBegin(_etype913, _size910);
            this->mappings.resize(_size910);
            uint32_t _i914;
            for (_i914 = 0; _i914 < _size910; ++_i914)
<<<<<<< HEAD
            {
              xfer += this->mappings[_i914].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size914;
            ::apache::thrift::protocol::TType _etype917;
            xfer += iprot->readListBegin(_etype917, _size914);
            this->mappings.resize(_size914);
            uint32_t _i918;
            for (_i918 = 0; _i918 < _size914; ++_i918)
<<<<<<< HEAD
            {
              xfer += this->mappings[_i918].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              xfer += this->mappings[_i914].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += this->mappings[_i918].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size956;
            ::apache::thrift::protocol::TType _etype959;
            xfer += iprot->readListBegin(_etype959, _size956);
            this->mappings.resize(_size956);
            uint32_t _i960;
            for (_i960 = 0; _i960 < _size956; ++_i960)
            {
              xfer += this->mappings[_i960].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.mappings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->triggers.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size981;
            ::apache::thrift::protocol::TType _etype984;
            xfer += iprot->readListBegin(_etype984, _size981);
            this->triggers.resize(_size981);
            uint32_t _i985;
            for (_i985 = 0; _i985 < _size981; ++_i985)
            {
              xfer += this->triggers[_i985].read(iprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size957;
            ::apache::thrift::protocol::TType _etype960;
            xfer += iprot->readListBegin(_etype960, _size957);
            this->triggers.resize(_size957);
            uint32_t _i961;
            for (_i961 = 0; _i961 < _size957; ++_i961)
            {
              xfer += this->triggers[_i961].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size915;
            ::apache::thrift::protocol::TType _etype918;
            xfer += iprot->readListBegin(_etype918, _size915);
            this->triggers.resize(_size915);
            uint32_t _i919;
            for (_i919 = 0; _i919 < _size915; ++_i919)
            {
              xfer += this->triggers[_i919].read(iprot);
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size919;
            ::apache::thrift::protocol::TType _etype922;
            xfer += iprot->readListBegin(_etype922, _size919);
            this->triggers.resize(_size919);
            uint32_t _i923;
            for (_i923 = 0; _i923 < _size919; ++_i923)
            {
              xfer += this->triggers[_i923].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size919;
            ::apache::thrift::protocol::TType _etype922;
            xfer += iprot->readListBegin(_etype922, _size919);
            this->triggers.resize(_size919);
            uint32_t _i923;
            for (_i923 = 0; _i923 < _size919; ++_i923)
            {
              xfer += this->triggers[_i923].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size961;
            ::apache::thrift::protocol::TType _etype964;
            xfer += iprot->readListBegin(_etype964, _size961);
            this->triggers.resize(_size961);
            uint32_t _i965;
            for (_i965 = 0; _i965 < _size961; ++_i965)
            {
              xfer += this->triggers[_i965].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.triggers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->poolTriggers.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size986;
            ::apache::thrift::protocol::TType _etype989;
            xfer += iprot->readListBegin(_etype989, _size986);
            this->poolTriggers.resize(_size986);
            uint32_t _i990;
            for (_i990 = 0; _i990 < _size986; ++_i990)
            {
              xfer += this->poolTriggers[_i990].read(iprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size962;
            ::apache::thrift::protocol::TType _etype965;
            xfer += iprot->readListBegin(_etype965, _size962);
            this->poolTriggers.resize(_size962);
            uint32_t _i966;
            for (_i966 = 0; _i966 < _size962; ++_i966)
            {
              xfer += this->poolTriggers[_i966].read(iprot);
=======
            uint32_t _size920;
            ::apache::thrift::protocol::TType _etype923;
            xfer += iprot->readListBegin(_etype923, _size920);
            this->poolTriggers.resize(_size920);
            uint32_t _i924;
            for (_i924 = 0; _i924 < _size920; ++_i924)
            {
              xfer += this->poolTriggers[_i924].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size924;
            ::apache::thrift::protocol::TType _etype927;
            xfer += iprot->readListBegin(_etype927, _size924);
            this->poolTriggers.resize(_size924);
            uint32_t _i928;
            for (_i928 = 0; _i928 < _size924; ++_i928)
<<<<<<< HEAD
            {
              xfer += this->poolTriggers[_i928].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size920;
            ::apache::thrift::protocol::TType _etype923;
            xfer += iprot->readListBegin(_etype923, _size920);
            this->poolTriggers.resize(_size920);
            uint32_t _i924;
            for (_i924 = 0; _i924 < _size920; ++_i924)
            {
              xfer += this->poolTriggers[_i924].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += this->poolTriggers[_i928].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size966;
            ::apache::thrift::protocol::TType _etype969;
            xfer += iprot->readListBegin(_etype969, _size966);
            this->poolTriggers.resize(_size966);
            uint32_t _i970;
            for (_i970 = 0; _i970 < _size966; ++_i970)
            {
              xfer += this->poolTriggers[_i970].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.poolTriggers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_plan)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pools)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t WMFullResourcePlan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMFullResourcePlan");

  xfer += oprot->writeFieldBegin("plan", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->plan.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pools", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->pools.size()));
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<WMPool> ::const_iterator _iter991;
    for (_iter991 = this->pools.begin(); _iter991 != this->pools.end(); ++_iter991)
    {
      xfer += (*_iter991).write(oprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    std::vector<WMPool> ::const_iterator _iter967;
    for (_iter967 = this->pools.begin(); _iter967 != this->pools.end(); ++_iter967)
    {
      xfer += (*_iter967).write(oprot);
=======
    std::vector<WMPool> ::const_iterator _iter925;
    for (_iter925 = this->pools.begin(); _iter925 != this->pools.end(); ++_iter925)
    {
      xfer += (*_iter925).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<WMPool> ::const_iterator _iter929;
    for (_iter929 = this->pools.begin(); _iter929 != this->pools.end(); ++_iter929)
    {
      xfer += (*_iter929).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<WMPool> ::const_iterator _iter925;
    for (_iter925 = this->pools.begin(); _iter925 != this->pools.end(); ++_iter925)
    {
      xfer += (*_iter925).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
    std::vector<WMPool> ::const_iterator _iter929;
    for (_iter929 = this->pools.begin(); _iter929 != this->pools.end(); ++_iter929)
    {
      xfer += (*_iter929).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
    std::vector<WMPool> ::const_iterator _iter971;
    for (_iter971 = this->pools.begin(); _iter971 != this->pools.end(); ++_iter971)
    {
      xfer += (*_iter971).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.mappings) {
    xfer += oprot->writeFieldBegin("mappings", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->mappings.size()));
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMMapping> ::const_iterator _iter992;
      for (_iter992 = this->mappings.begin(); _iter992 != this->mappings.end(); ++_iter992)
      {
        xfer += (*_iter992).write(oprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMMapping> ::const_iterator _iter968;
      for (_iter968 = this->mappings.begin(); _iter968 != this->mappings.end(); ++_iter968)
      {
        xfer += (*_iter968).write(oprot);
=======
      std::vector<WMMapping> ::const_iterator _iter926;
      for (_iter926 = this->mappings.begin(); _iter926 != this->mappings.end(); ++_iter926)
      {
        xfer += (*_iter926).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMMapping> ::const_iterator _iter930;
      for (_iter930 = this->mappings.begin(); _iter930 != this->mappings.end(); ++_iter930)
      {
        xfer += (*_iter930).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<WMMapping> ::const_iterator _iter926;
      for (_iter926 = this->mappings.begin(); _iter926 != this->mappings.end(); ++_iter926)
      {
        xfer += (*_iter926).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMMapping> ::const_iterator _iter930;
      for (_iter930 = this->mappings.begin(); _iter930 != this->mappings.end(); ++_iter930)
      {
        xfer += (*_iter930).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<WMMapping> ::const_iterator _iter972;
      for (_iter972 = this->mappings.begin(); _iter972 != this->mappings.end(); ++_iter972)
      {
        xfer += (*_iter972).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.triggers) {
    xfer += oprot->writeFieldBegin("triggers", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->triggers.size()));
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMTrigger> ::const_iterator _iter993;
      for (_iter993 = this->triggers.begin(); _iter993 != this->triggers.end(); ++_iter993)
      {
        xfer += (*_iter993).write(oprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMTrigger> ::const_iterator _iter969;
      for (_iter969 = this->triggers.begin(); _iter969 != this->triggers.end(); ++_iter969)
      {
        xfer += (*_iter969).write(oprot);
=======
      std::vector<WMTrigger> ::const_iterator _iter927;
      for (_iter927 = this->triggers.begin(); _iter927 != this->triggers.end(); ++_iter927)
      {
        xfer += (*_iter927).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMTrigger> ::const_iterator _iter931;
      for (_iter931 = this->triggers.begin(); _iter931 != this->triggers.end(); ++_iter931)
      {
        xfer += (*_iter931).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<WMTrigger> ::const_iterator _iter927;
      for (_iter927 = this->triggers.begin(); _iter927 != this->triggers.end(); ++_iter927)
      {
        xfer += (*_iter927).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMTrigger> ::const_iterator _iter931;
      for (_iter931 = this->triggers.begin(); _iter931 != this->triggers.end(); ++_iter931)
      {
        xfer += (*_iter931).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<WMTrigger> ::const_iterator _iter973;
      for (_iter973 = this->triggers.begin(); _iter973 != this->triggers.end(); ++_iter973)
      {
        xfer += (*_iter973).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.poolTriggers) {
    xfer += oprot->writeFieldBegin("poolTriggers", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->poolTriggers.size()));
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMPoolTrigger> ::const_iterator _iter994;
      for (_iter994 = this->poolTriggers.begin(); _iter994 != this->poolTriggers.end(); ++_iter994)
      {
        xfer += (*_iter994).write(oprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMPoolTrigger> ::const_iterator _iter970;
      for (_iter970 = this->poolTriggers.begin(); _iter970 != this->poolTriggers.end(); ++_iter970)
      {
        xfer += (*_iter970).write(oprot);
=======
      std::vector<WMPoolTrigger> ::const_iterator _iter928;
      for (_iter928 = this->poolTriggers.begin(); _iter928 != this->poolTriggers.end(); ++_iter928)
      {
        xfer += (*_iter928).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMPoolTrigger> ::const_iterator _iter932;
      for (_iter932 = this->poolTriggers.begin(); _iter932 != this->poolTriggers.end(); ++_iter932)
      {
        xfer += (*_iter932).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<WMPoolTrigger> ::const_iterator _iter928;
      for (_iter928 = this->poolTriggers.begin(); _iter928 != this->poolTriggers.end(); ++_iter928)
      {
        xfer += (*_iter928).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMPoolTrigger> ::const_iterator _iter932;
      for (_iter932 = this->poolTriggers.begin(); _iter932 != this->poolTriggers.end(); ++_iter932)
      {
        xfer += (*_iter932).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<WMPoolTrigger> ::const_iterator _iter974;
      for (_iter974 = this->poolTriggers.begin(); _iter974 != this->poolTriggers.end(); ++_iter974)
      {
        xfer += (*_iter974).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMFullResourcePlan &a, WMFullResourcePlan &b) {
  using ::std::swap;
  swap(a.plan, b.plan);
  swap(a.pools, b.pools);
  swap(a.mappings, b.mappings);
  swap(a.triggers, b.triggers);
  swap(a.poolTriggers, b.poolTriggers);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMFullResourcePlan::WMFullResourcePlan(const WMFullResourcePlan& other995) {
  plan = other995.plan;
  pools = other995.pools;
  mappings = other995.mappings;
  triggers = other995.triggers;
  poolTriggers = other995.poolTriggers;
  __isset = other995.__isset;
}
WMFullResourcePlan& WMFullResourcePlan::operator=(const WMFullResourcePlan& other996) {
  plan = other996.plan;
  pools = other996.pools;
  mappings = other996.mappings;
  triggers = other996.triggers;
  poolTriggers = other996.poolTriggers;
  __isset = other996.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMFullResourcePlan::WMFullResourcePlan(const WMFullResourcePlan& other971) {
  plan = other971.plan;
  pools = other971.pools;
  mappings = other971.mappings;
  triggers = other971.triggers;
  poolTriggers = other971.poolTriggers;
  __isset = other971.__isset;
}
WMFullResourcePlan& WMFullResourcePlan::operator=(const WMFullResourcePlan& other972) {
  plan = other972.plan;
  pools = other972.pools;
  mappings = other972.mappings;
  triggers = other972.triggers;
  poolTriggers = other972.poolTriggers;
  __isset = other972.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMFullResourcePlan::WMFullResourcePlan(const WMFullResourcePlan& other929) {
  plan = other929.plan;
  pools = other929.pools;
  mappings = other929.mappings;
  triggers = other929.triggers;
  poolTriggers = other929.poolTriggers;
  __isset = other929.__isset;
}
WMFullResourcePlan& WMFullResourcePlan::operator=(const WMFullResourcePlan& other930) {
  plan = other930.plan;
  pools = other930.pools;
  mappings = other930.mappings;
  triggers = other930.triggers;
  poolTriggers = other930.poolTriggers;
  __isset = other930.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMFullResourcePlan::WMFullResourcePlan(const WMFullResourcePlan& other933) {
  plan = other933.plan;
  pools = other933.pools;
  mappings = other933.mappings;
  triggers = other933.triggers;
  poolTriggers = other933.poolTriggers;
  __isset = other933.__isset;
}
WMFullResourcePlan& WMFullResourcePlan::operator=(const WMFullResourcePlan& other934) {
  plan = other934.plan;
  pools = other934.pools;
  mappings = other934.mappings;
  triggers = other934.triggers;
  poolTriggers = other934.poolTriggers;
  __isset = other934.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMFullResourcePlan::WMFullResourcePlan(const WMFullResourcePlan& other975) {
  plan = other975.plan;
  pools = other975.pools;
  mappings = other975.mappings;
  triggers = other975.triggers;
  poolTriggers = other975.poolTriggers;
  __isset = other975.__isset;
}
WMFullResourcePlan& WMFullResourcePlan::operator=(const WMFullResourcePlan& other976) {
  plan = other976.plan;
  pools = other976.pools;
  mappings = other976.mappings;
  triggers = other976.triggers;
  poolTriggers = other976.poolTriggers;
  __isset = other976.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMFullResourcePlan::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMFullResourcePlan(";
  out << "plan=" << to_string(plan);
  out << ", " << "pools=" << to_string(pools);
  out << ", " << "mappings="; (__isset.mappings ? (out << to_string(mappings)) : (out << "<null>"));
  out << ", " << "triggers="; (__isset.triggers ? (out << to_string(triggers)) : (out << "<null>"));
  out << ", " << "poolTriggers="; (__isset.poolTriggers ? (out << to_string(poolTriggers)) : (out << "<null>"));
  out << ")";
}


WMCreateResourcePlanRequest::~WMCreateResourcePlanRequest() throw() {
}


void WMCreateResourcePlanRequest::__set_resourcePlan(const WMResourcePlan& val) {
  this->resourcePlan = val;
__isset.resourcePlan = true;
}

void WMCreateResourcePlanRequest::__set_copyFrom(const std::string& val) {
  this->copyFrom = val;
__isset.copyFrom = true;
}

uint32_t WMCreateResourcePlanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->resourcePlan.read(iprot);
          this->__isset.resourcePlan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->copyFrom);
          this->__isset.copyFrom = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreateResourcePlanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreateResourcePlanRequest");

  if (this->__isset.resourcePlan) {
    xfer += oprot->writeFieldBegin("resourcePlan", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->resourcePlan.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.copyFrom) {
    xfer += oprot->writeFieldBegin("copyFrom", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->copyFrom);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreateResourcePlanRequest &a, WMCreateResourcePlanRequest &b) {
  using ::std::swap;
  swap(a.resourcePlan, b.resourcePlan);
  swap(a.copyFrom, b.copyFrom);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMCreateResourcePlanRequest::WMCreateResourcePlanRequest(const WMCreateResourcePlanRequest& other997) {
  resourcePlan = other997.resourcePlan;
  copyFrom = other997.copyFrom;
  __isset = other997.__isset;
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(const WMCreateResourcePlanRequest& other998) {
  resourcePlan = other998.resourcePlan;
  copyFrom = other998.copyFrom;
  __isset = other998.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateResourcePlanRequest::WMCreateResourcePlanRequest(const WMCreateResourcePlanRequest& other973) {
  resourcePlan = other973.resourcePlan;
  copyFrom = other973.copyFrom;
  __isset = other973.__isset;
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(const WMCreateResourcePlanRequest& other974) {
  resourcePlan = other974.resourcePlan;
  copyFrom = other974.copyFrom;
  __isset = other974.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMCreateResourcePlanRequest::WMCreateResourcePlanRequest(const WMCreateResourcePlanRequest& other931) {
  resourcePlan = other931.resourcePlan;
  copyFrom = other931.copyFrom;
  __isset = other931.__isset;
<<<<<<< HEAD
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(const WMCreateResourcePlanRequest& other932) {
  resourcePlan = other932.resourcePlan;
  copyFrom = other932.copyFrom;
  __isset = other932.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMCreateResourcePlanRequest::WMCreateResourcePlanRequest(const WMCreateResourcePlanRequest& other935) {
  resourcePlan = other935.resourcePlan;
  copyFrom = other935.copyFrom;
  __isset = other935.__isset;
<<<<<<< HEAD
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(const WMCreateResourcePlanRequest& other936) {
  resourcePlan = other936.resourcePlan;
  copyFrom = other936.copyFrom;
  __isset = other936.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(const WMCreateResourcePlanRequest& other932) {
  resourcePlan = other932.resourcePlan;
  copyFrom = other932.copyFrom;
  __isset = other932.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(const WMCreateResourcePlanRequest& other936) {
  resourcePlan = other936.resourcePlan;
  copyFrom = other936.copyFrom;
  __isset = other936.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreateResourcePlanRequest::WMCreateResourcePlanRequest(const WMCreateResourcePlanRequest& other977) {
  resourcePlan = other977.resourcePlan;
  copyFrom = other977.copyFrom;
  __isset = other977.__isset;
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(const WMCreateResourcePlanRequest& other978) {
  resourcePlan = other978.resourcePlan;
  copyFrom = other978.copyFrom;
  __isset = other978.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMCreateResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateResourcePlanRequest(";
  out << "resourcePlan="; (__isset.resourcePlan ? (out << to_string(resourcePlan)) : (out << "<null>"));
  out << ", " << "copyFrom="; (__isset.copyFrom ? (out << to_string(copyFrom)) : (out << "<null>"));
  out << ")";
}


WMCreateResourcePlanResponse::~WMCreateResourcePlanResponse() throw() {
}


uint32_t WMCreateResourcePlanResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreateResourcePlanResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreateResourcePlanResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreateResourcePlanResponse &a, WMCreateResourcePlanResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
WMCreateResourcePlanResponse::WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse& other999) {
  (void) other999;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(const WMCreateResourcePlanResponse& other1000) {
  (void) other1000;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateResourcePlanResponse::WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse& other975) {
  (void) other975;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(const WMCreateResourcePlanResponse& other976) {
  (void) other976;
=======
WMCreateResourcePlanResponse::WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse& other933) {
  (void) other933;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(const WMCreateResourcePlanResponse& other934) {
  (void) other934;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateResourcePlanResponse::WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse& other937) {
  (void) other937;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(const WMCreateResourcePlanResponse& other938) {
  (void) other938;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreateResourcePlanResponse::WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse& other933) {
  (void) other933;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(const WMCreateResourcePlanResponse& other934) {
  (void) other934;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateResourcePlanResponse::WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse& other937) {
  (void) other937;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(const WMCreateResourcePlanResponse& other938) {
  (void) other938;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreateResourcePlanResponse::WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse& other979) {
  (void) other979;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(const WMCreateResourcePlanResponse& other980) {
  (void) other980;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMCreateResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateResourcePlanResponse(";
  out << ")";
}


WMGetActiveResourcePlanRequest::~WMGetActiveResourcePlanRequest() throw() {
}


uint32_t WMGetActiveResourcePlanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMGetActiveResourcePlanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMGetActiveResourcePlanRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMGetActiveResourcePlanRequest &a, WMGetActiveResourcePlanRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest& other1001) {
  (void) other1001;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(const WMGetActiveResourcePlanRequest& other1002) {
  (void) other1002;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest& other977) {
  (void) other977;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(const WMGetActiveResourcePlanRequest& other978) {
  (void) other978;
=======
WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest& other935) {
  (void) other935;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(const WMGetActiveResourcePlanRequest& other936) {
  (void) other936;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest& other939) {
  (void) other939;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(const WMGetActiveResourcePlanRequest& other940) {
  (void) other940;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest& other935) {
  (void) other935;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(const WMGetActiveResourcePlanRequest& other936) {
  (void) other936;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest& other939) {
  (void) other939;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(const WMGetActiveResourcePlanRequest& other940) {
  (void) other940;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest& other981) {
  (void) other981;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(const WMGetActiveResourcePlanRequest& other982) {
  (void) other982;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMGetActiveResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetActiveResourcePlanRequest(";
  out << ")";
}


WMGetActiveResourcePlanResponse::~WMGetActiveResourcePlanResponse() throw() {
}


void WMGetActiveResourcePlanResponse::__set_resourcePlan(const WMFullResourcePlan& val) {
  this->resourcePlan = val;
__isset.resourcePlan = true;
}

uint32_t WMGetActiveResourcePlanResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->resourcePlan.read(iprot);
          this->__isset.resourcePlan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMGetActiveResourcePlanResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMGetActiveResourcePlanResponse");

  if (this->__isset.resourcePlan) {
    xfer += oprot->writeFieldBegin("resourcePlan", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->resourcePlan.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMGetActiveResourcePlanResponse &a, WMGetActiveResourcePlanResponse &b) {
  using ::std::swap;
  swap(a.resourcePlan, b.resourcePlan);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse& other1003) {
  resourcePlan = other1003.resourcePlan;
  __isset = other1003.__isset;
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(const WMGetActiveResourcePlanResponse& other1004) {
  resourcePlan = other1004.resourcePlan;
  __isset = other1004.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse& other979) {
  resourcePlan = other979.resourcePlan;
  __isset = other979.__isset;
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(const WMGetActiveResourcePlanResponse& other980) {
  resourcePlan = other980.resourcePlan;
  __isset = other980.__isset;
=======
WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse& other937) {
  resourcePlan = other937.resourcePlan;
  __isset = other937.__isset;
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(const WMGetActiveResourcePlanResponse& other938) {
  resourcePlan = other938.resourcePlan;
  __isset = other938.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse& other941) {
  resourcePlan = other941.resourcePlan;
  __isset = other941.__isset;
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(const WMGetActiveResourcePlanResponse& other942) {
  resourcePlan = other942.resourcePlan;
  __isset = other942.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse& other937) {
  resourcePlan = other937.resourcePlan;
  __isset = other937.__isset;
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(const WMGetActiveResourcePlanResponse& other938) {
  resourcePlan = other938.resourcePlan;
  __isset = other938.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse& other941) {
  resourcePlan = other941.resourcePlan;
  __isset = other941.__isset;
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(const WMGetActiveResourcePlanResponse& other942) {
  resourcePlan = other942.resourcePlan;
  __isset = other942.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse& other983) {
  resourcePlan = other983.resourcePlan;
  __isset = other983.__isset;
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(const WMGetActiveResourcePlanResponse& other984) {
  resourcePlan = other984.resourcePlan;
  __isset = other984.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMGetActiveResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetActiveResourcePlanResponse(";
  out << "resourcePlan="; (__isset.resourcePlan ? (out << to_string(resourcePlan)) : (out << "<null>"));
  out << ")";
}


WMGetResourcePlanRequest::~WMGetResourcePlanRequest() throw() {
}


void WMGetResourcePlanRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

uint32_t WMGetResourcePlanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          this->__isset.resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMGetResourcePlanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMGetResourcePlanRequest");

  if (this->__isset.resourcePlanName) {
    xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->resourcePlanName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMGetResourcePlanRequest &a, WMGetResourcePlanRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMGetResourcePlanRequest::WMGetResourcePlanRequest(const WMGetResourcePlanRequest& other1005) {
  resourcePlanName = other1005.resourcePlanName;
  __isset = other1005.__isset;
}
WMGetResourcePlanRequest& WMGetResourcePlanRequest::operator=(const WMGetResourcePlanRequest& other1006) {
  resourcePlanName = other1006.resourcePlanName;
  __isset = other1006.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetResourcePlanRequest::WMGetResourcePlanRequest(const WMGetResourcePlanRequest& other981) {
  resourcePlanName = other981.resourcePlanName;
  __isset = other981.__isset;
}
WMGetResourcePlanRequest& WMGetResourcePlanRequest::operator=(const WMGetResourcePlanRequest& other982) {
  resourcePlanName = other982.resourcePlanName;
  __isset = other982.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMGetResourcePlanRequest::WMGetResourcePlanRequest(const WMGetResourcePlanRequest& other939) {
  resourcePlanName = other939.resourcePlanName;
  __isset = other939.__isset;
}
WMGetResourcePlanRequest& WMGetResourcePlanRequest::operator=(const WMGetResourcePlanRequest& other940) {
  resourcePlanName = other940.resourcePlanName;
  __isset = other940.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetResourcePlanRequest::WMGetResourcePlanRequest(const WMGetResourcePlanRequest& other943) {
  resourcePlanName = other943.resourcePlanName;
  __isset = other943.__isset;
}
WMGetResourcePlanRequest& WMGetResourcePlanRequest::operator=(const WMGetResourcePlanRequest& other944) {
  resourcePlanName = other944.resourcePlanName;
  __isset = other944.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetResourcePlanRequest::WMGetResourcePlanRequest(const WMGetResourcePlanRequest& other943) {
  resourcePlanName = other943.resourcePlanName;
  __isset = other943.__isset;
}
WMGetResourcePlanRequest& WMGetResourcePlanRequest::operator=(const WMGetResourcePlanRequest& other944) {
  resourcePlanName = other944.resourcePlanName;
  __isset = other944.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetResourcePlanRequest::WMGetResourcePlanRequest(const WMGetResourcePlanRequest& other985) {
  resourcePlanName = other985.resourcePlanName;
  __isset = other985.__isset;
}
WMGetResourcePlanRequest& WMGetResourcePlanRequest::operator=(const WMGetResourcePlanRequest& other986) {
  resourcePlanName = other986.resourcePlanName;
  __isset = other986.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMGetResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetResourcePlanRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ")";
}


WMGetResourcePlanResponse::~WMGetResourcePlanResponse() throw() {
}


void WMGetResourcePlanResponse::__set_resourcePlan(const WMFullResourcePlan& val) {
  this->resourcePlan = val;
__isset.resourcePlan = true;
}

uint32_t WMGetResourcePlanResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->resourcePlan.read(iprot);
          this->__isset.resourcePlan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMGetResourcePlanResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMGetResourcePlanResponse");

  if (this->__isset.resourcePlan) {
    xfer += oprot->writeFieldBegin("resourcePlan", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->resourcePlan.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMGetResourcePlanResponse &a, WMGetResourcePlanResponse &b) {
  using ::std::swap;
  swap(a.resourcePlan, b.resourcePlan);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMGetResourcePlanResponse::WMGetResourcePlanResponse(const WMGetResourcePlanResponse& other1007) {
  resourcePlan = other1007.resourcePlan;
  __isset = other1007.__isset;
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(const WMGetResourcePlanResponse& other1008) {
  resourcePlan = other1008.resourcePlan;
  __isset = other1008.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetResourcePlanResponse::WMGetResourcePlanResponse(const WMGetResourcePlanResponse& other983) {
  resourcePlan = other983.resourcePlan;
  __isset = other983.__isset;
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(const WMGetResourcePlanResponse& other984) {
  resourcePlan = other984.resourcePlan;
  __isset = other984.__isset;
=======
WMGetResourcePlanResponse::WMGetResourcePlanResponse(const WMGetResourcePlanResponse& other941) {
  resourcePlan = other941.resourcePlan;
  __isset = other941.__isset;
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(const WMGetResourcePlanResponse& other942) {
  resourcePlan = other942.resourcePlan;
  __isset = other942.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetResourcePlanResponse::WMGetResourcePlanResponse(const WMGetResourcePlanResponse& other945) {
  resourcePlan = other945.resourcePlan;
  __isset = other945.__isset;
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(const WMGetResourcePlanResponse& other946) {
  resourcePlan = other946.resourcePlan;
  __isset = other946.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetResourcePlanResponse::WMGetResourcePlanResponse(const WMGetResourcePlanResponse& other941) {
  resourcePlan = other941.resourcePlan;
  __isset = other941.__isset;
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(const WMGetResourcePlanResponse& other942) {
  resourcePlan = other942.resourcePlan;
  __isset = other942.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetResourcePlanResponse::WMGetResourcePlanResponse(const WMGetResourcePlanResponse& other945) {
  resourcePlan = other945.resourcePlan;
  __isset = other945.__isset;
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(const WMGetResourcePlanResponse& other946) {
  resourcePlan = other946.resourcePlan;
  __isset = other946.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetResourcePlanResponse::WMGetResourcePlanResponse(const WMGetResourcePlanResponse& other987) {
  resourcePlan = other987.resourcePlan;
  __isset = other987.__isset;
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(const WMGetResourcePlanResponse& other988) {
  resourcePlan = other988.resourcePlan;
  __isset = other988.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMGetResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetResourcePlanResponse(";
  out << "resourcePlan="; (__isset.resourcePlan ? (out << to_string(resourcePlan)) : (out << "<null>"));
  out << ")";
}


WMGetAllResourcePlanRequest::~WMGetAllResourcePlanRequest() throw() {
}


uint32_t WMGetAllResourcePlanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMGetAllResourcePlanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMGetAllResourcePlanRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMGetAllResourcePlanRequest &a, WMGetAllResourcePlanRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest& other1009) {
  (void) other1009;
}
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other1010) {
  (void) other1010;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest& other985) {
  (void) other985;
}
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other986) {
  (void) other986;
=======
WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest& other943) {
  (void) other943;
}
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other944) {
  (void) other944;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest& other947) {
  (void) other947;
}
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other948) {
  (void) other948;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest& other943) {
  (void) other943;
}
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other944) {
  (void) other944;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest& other947) {
  (void) other947;
}
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other948) {
  (void) other948;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest& other989) {
  (void) other989;
}
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other990) {
  (void) other990;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMGetAllResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetAllResourcePlanRequest(";
  out << ")";
}


WMGetAllResourcePlanResponse::~WMGetAllResourcePlanResponse() throw() {
}


void WMGetAllResourcePlanResponse::__set_resourcePlans(const std::vector<WMResourcePlan> & val) {
  this->resourcePlans = val;
__isset.resourcePlans = true;
}

uint32_t WMGetAllResourcePlanResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->resourcePlans.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size1011;
            ::apache::thrift::protocol::TType _etype1014;
            xfer += iprot->readListBegin(_etype1014, _size1011);
            this->resourcePlans.resize(_size1011);
            uint32_t _i1015;
            for (_i1015 = 0; _i1015 < _size1011; ++_i1015)
            {
              xfer += this->resourcePlans[_i1015].read(iprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size987;
            ::apache::thrift::protocol::TType _etype990;
            xfer += iprot->readListBegin(_etype990, _size987);
            this->resourcePlans.resize(_size987);
            uint32_t _i991;
            for (_i991 = 0; _i991 < _size987; ++_i991)
            {
              xfer += this->resourcePlans[_i991].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size945;
            ::apache::thrift::protocol::TType _etype948;
            xfer += iprot->readListBegin(_etype948, _size945);
            this->resourcePlans.resize(_size945);
            uint32_t _i949;
            for (_i949 = 0; _i949 < _size945; ++_i949)
<<<<<<< HEAD
            {
              xfer += this->resourcePlans[_i949].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size949;
            ::apache::thrift::protocol::TType _etype952;
            xfer += iprot->readListBegin(_etype952, _size949);
            this->resourcePlans.resize(_size949);
            uint32_t _i953;
            for (_i953 = 0; _i953 < _size949; ++_i953)
<<<<<<< HEAD
            {
              xfer += this->resourcePlans[_i953].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              xfer += this->resourcePlans[_i949].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += this->resourcePlans[_i953].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size991;
            ::apache::thrift::protocol::TType _etype994;
            xfer += iprot->readListBegin(_etype994, _size991);
            this->resourcePlans.resize(_size991);
            uint32_t _i995;
            for (_i995 = 0; _i995 < _size991; ++_i995)
            {
              xfer += this->resourcePlans[_i995].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.resourcePlans = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMGetAllResourcePlanResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMGetAllResourcePlanResponse");

  if (this->__isset.resourcePlans) {
    xfer += oprot->writeFieldBegin("resourcePlans", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->resourcePlans.size()));
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMResourcePlan> ::const_iterator _iter1016;
      for (_iter1016 = this->resourcePlans.begin(); _iter1016 != this->resourcePlans.end(); ++_iter1016)
      {
        xfer += (*_iter1016).write(oprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMResourcePlan> ::const_iterator _iter992;
      for (_iter992 = this->resourcePlans.begin(); _iter992 != this->resourcePlans.end(); ++_iter992)
      {
        xfer += (*_iter992).write(oprot);
=======
      std::vector<WMResourcePlan> ::const_iterator _iter950;
      for (_iter950 = this->resourcePlans.begin(); _iter950 != this->resourcePlans.end(); ++_iter950)
      {
        xfer += (*_iter950).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMResourcePlan> ::const_iterator _iter954;
      for (_iter954 = this->resourcePlans.begin(); _iter954 != this->resourcePlans.end(); ++_iter954)
      {
        xfer += (*_iter954).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<WMResourcePlan> ::const_iterator _iter950;
      for (_iter950 = this->resourcePlans.begin(); _iter950 != this->resourcePlans.end(); ++_iter950)
      {
        xfer += (*_iter950).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMResourcePlan> ::const_iterator _iter954;
      for (_iter954 = this->resourcePlans.begin(); _iter954 != this->resourcePlans.end(); ++_iter954)
      {
        xfer += (*_iter954).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<WMResourcePlan> ::const_iterator _iter996;
      for (_iter996 = this->resourcePlans.begin(); _iter996 != this->resourcePlans.end(); ++_iter996)
      {
        xfer += (*_iter996).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMGetAllResourcePlanResponse &a, WMGetAllResourcePlanResponse &b) {
  using ::std::swap;
  swap(a.resourcePlans, b.resourcePlans);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse& other1017) {
  resourcePlans = other1017.resourcePlans;
  __isset = other1017.__isset;
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(const WMGetAllResourcePlanResponse& other1018) {
  resourcePlans = other1018.resourcePlans;
  __isset = other1018.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse& other993) {
  resourcePlans = other993.resourcePlans;
  __isset = other993.__isset;
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(const WMGetAllResourcePlanResponse& other994) {
  resourcePlans = other994.resourcePlans;
  __isset = other994.__isset;
=======
WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse& other951) {
  resourcePlans = other951.resourcePlans;
  __isset = other951.__isset;
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(const WMGetAllResourcePlanResponse& other952) {
  resourcePlans = other952.resourcePlans;
  __isset = other952.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse& other955) {
  resourcePlans = other955.resourcePlans;
  __isset = other955.__isset;
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(const WMGetAllResourcePlanResponse& other956) {
  resourcePlans = other956.resourcePlans;
  __isset = other956.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse& other951) {
  resourcePlans = other951.resourcePlans;
  __isset = other951.__isset;
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(const WMGetAllResourcePlanResponse& other952) {
  resourcePlans = other952.resourcePlans;
  __isset = other952.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse& other955) {
  resourcePlans = other955.resourcePlans;
  __isset = other955.__isset;
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(const WMGetAllResourcePlanResponse& other956) {
  resourcePlans = other956.resourcePlans;
  __isset = other956.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse& other997) {
  resourcePlans = other997.resourcePlans;
  __isset = other997.__isset;
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(const WMGetAllResourcePlanResponse& other998) {
  resourcePlans = other998.resourcePlans;
  __isset = other998.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMGetAllResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetAllResourcePlanResponse(";
  out << "resourcePlans="; (__isset.resourcePlans ? (out << to_string(resourcePlans)) : (out << "<null>"));
  out << ")";
}


WMAlterResourcePlanRequest::~WMAlterResourcePlanRequest() throw() {
}


void WMAlterResourcePlanRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

void WMAlterResourcePlanRequest::__set_resourcePlan(const WMNullableResourcePlan& val) {
  this->resourcePlan = val;
__isset.resourcePlan = true;
}

void WMAlterResourcePlanRequest::__set_isEnableAndActivate(const bool val) {
  this->isEnableAndActivate = val;
__isset.isEnableAndActivate = true;
}

void WMAlterResourcePlanRequest::__set_isForceDeactivate(const bool val) {
  this->isForceDeactivate = val;
__isset.isForceDeactivate = true;
}

void WMAlterResourcePlanRequest::__set_isReplace(const bool val) {
  this->isReplace = val;
__isset.isReplace = true;
}

uint32_t WMAlterResourcePlanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          this->__isset.resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->resourcePlan.read(iprot);
          this->__isset.resourcePlan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isEnableAndActivate);
          this->__isset.isEnableAndActivate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isForceDeactivate);
          this->__isset.isForceDeactivate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isReplace);
          this->__isset.isReplace = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMAlterResourcePlanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMAlterResourcePlanRequest");

  if (this->__isset.resourcePlanName) {
    xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->resourcePlanName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resourcePlan) {
    xfer += oprot->writeFieldBegin("resourcePlan", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->resourcePlan.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isEnableAndActivate) {
    xfer += oprot->writeFieldBegin("isEnableAndActivate", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->isEnableAndActivate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isForceDeactivate) {
    xfer += oprot->writeFieldBegin("isForceDeactivate", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->isForceDeactivate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isReplace) {
    xfer += oprot->writeFieldBegin("isReplace", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->isReplace);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMAlterResourcePlanRequest &a, WMAlterResourcePlanRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.resourcePlan, b.resourcePlan);
  swap(a.isEnableAndActivate, b.isEnableAndActivate);
  swap(a.isForceDeactivate, b.isForceDeactivate);
  swap(a.isReplace, b.isReplace);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMAlterResourcePlanRequest::WMAlterResourcePlanRequest(const WMAlterResourcePlanRequest& other1019) {
  resourcePlanName = other1019.resourcePlanName;
  resourcePlan = other1019.resourcePlan;
  isEnableAndActivate = other1019.isEnableAndActivate;
  isForceDeactivate = other1019.isForceDeactivate;
  isReplace = other1019.isReplace;
  __isset = other1019.__isset;
}
WMAlterResourcePlanRequest& WMAlterResourcePlanRequest::operator=(const WMAlterResourcePlanRequest& other1020) {
  resourcePlanName = other1020.resourcePlanName;
  resourcePlan = other1020.resourcePlan;
  isEnableAndActivate = other1020.isEnableAndActivate;
  isForceDeactivate = other1020.isForceDeactivate;
  isReplace = other1020.isReplace;
  __isset = other1020.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMAlterResourcePlanRequest::WMAlterResourcePlanRequest(const WMAlterResourcePlanRequest& other995) {
  resourcePlanName = other995.resourcePlanName;
  resourcePlan = other995.resourcePlan;
  isEnableAndActivate = other995.isEnableAndActivate;
  isForceDeactivate = other995.isForceDeactivate;
  isReplace = other995.isReplace;
  __isset = other995.__isset;
}
WMAlterResourcePlanRequest& WMAlterResourcePlanRequest::operator=(const WMAlterResourcePlanRequest& other996) {
  resourcePlanName = other996.resourcePlanName;
  resourcePlan = other996.resourcePlan;
  isEnableAndActivate = other996.isEnableAndActivate;
  isForceDeactivate = other996.isForceDeactivate;
  isReplace = other996.isReplace;
  __isset = other996.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMAlterResourcePlanRequest::WMAlterResourcePlanRequest(const WMAlterResourcePlanRequest& other953) {
  resourcePlanName = other953.resourcePlanName;
  resourcePlan = other953.resourcePlan;
  isEnableAndActivate = other953.isEnableAndActivate;
  isForceDeactivate = other953.isForceDeactivate;
  isReplace = other953.isReplace;
  __isset = other953.__isset;
}
WMAlterResourcePlanRequest& WMAlterResourcePlanRequest::operator=(const WMAlterResourcePlanRequest& other954) {
  resourcePlanName = other954.resourcePlanName;
  resourcePlan = other954.resourcePlan;
  isEnableAndActivate = other954.isEnableAndActivate;
  isForceDeactivate = other954.isForceDeactivate;
  isReplace = other954.isReplace;
  __isset = other954.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMAlterResourcePlanRequest::WMAlterResourcePlanRequest(const WMAlterResourcePlanRequest& other957) {
  resourcePlanName = other957.resourcePlanName;
  resourcePlan = other957.resourcePlan;
  isEnableAndActivate = other957.isEnableAndActivate;
  isForceDeactivate = other957.isForceDeactivate;
  isReplace = other957.isReplace;
  __isset = other957.__isset;
}
WMAlterResourcePlanRequest& WMAlterResourcePlanRequest::operator=(const WMAlterResourcePlanRequest& other958) {
  resourcePlanName = other958.resourcePlanName;
  resourcePlan = other958.resourcePlan;
  isEnableAndActivate = other958.isEnableAndActivate;
  isForceDeactivate = other958.isForceDeactivate;
  isReplace = other958.isReplace;
  __isset = other958.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMAlterResourcePlanRequest::WMAlterResourcePlanRequest(const WMAlterResourcePlanRequest& other999) {
  resourcePlanName = other999.resourcePlanName;
  resourcePlan = other999.resourcePlan;
  isEnableAndActivate = other999.isEnableAndActivate;
  isForceDeactivate = other999.isForceDeactivate;
  isReplace = other999.isReplace;
  __isset = other999.__isset;
}
WMAlterResourcePlanRequest& WMAlterResourcePlanRequest::operator=(const WMAlterResourcePlanRequest& other1000) {
  resourcePlanName = other1000.resourcePlanName;
  resourcePlan = other1000.resourcePlan;
  isEnableAndActivate = other1000.isEnableAndActivate;
  isForceDeactivate = other1000.isForceDeactivate;
  isReplace = other1000.isReplace;
  __isset = other1000.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMAlterResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMAlterResourcePlanRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ", " << "resourcePlan="; (__isset.resourcePlan ? (out << to_string(resourcePlan)) : (out << "<null>"));
  out << ", " << "isEnableAndActivate="; (__isset.isEnableAndActivate ? (out << to_string(isEnableAndActivate)) : (out << "<null>"));
  out << ", " << "isForceDeactivate="; (__isset.isForceDeactivate ? (out << to_string(isForceDeactivate)) : (out << "<null>"));
  out << ", " << "isReplace="; (__isset.isReplace ? (out << to_string(isReplace)) : (out << "<null>"));
  out << ")";
}


WMAlterResourcePlanResponse::~WMAlterResourcePlanResponse() throw() {
}


void WMAlterResourcePlanResponse::__set_fullResourcePlan(const WMFullResourcePlan& val) {
  this->fullResourcePlan = val;
__isset.fullResourcePlan = true;
}

uint32_t WMAlterResourcePlanResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fullResourcePlan.read(iprot);
          this->__isset.fullResourcePlan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMAlterResourcePlanResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMAlterResourcePlanResponse");

  if (this->__isset.fullResourcePlan) {
    xfer += oprot->writeFieldBegin("fullResourcePlan", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->fullResourcePlan.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMAlterResourcePlanResponse &a, WMAlterResourcePlanResponse &b) {
  using ::std::swap;
  swap(a.fullResourcePlan, b.fullResourcePlan);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMAlterResourcePlanResponse::WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse& other1021) {
  fullResourcePlan = other1021.fullResourcePlan;
  __isset = other1021.__isset;
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(const WMAlterResourcePlanResponse& other1022) {
  fullResourcePlan = other1022.fullResourcePlan;
  __isset = other1022.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMAlterResourcePlanResponse::WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse& other997) {
  fullResourcePlan = other997.fullResourcePlan;
  __isset = other997.__isset;
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(const WMAlterResourcePlanResponse& other998) {
  fullResourcePlan = other998.fullResourcePlan;
  __isset = other998.__isset;
=======
WMAlterResourcePlanResponse::WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse& other955) {
  fullResourcePlan = other955.fullResourcePlan;
  __isset = other955.__isset;
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(const WMAlterResourcePlanResponse& other956) {
  fullResourcePlan = other956.fullResourcePlan;
  __isset = other956.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMAlterResourcePlanResponse::WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse& other959) {
  fullResourcePlan = other959.fullResourcePlan;
  __isset = other959.__isset;
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(const WMAlterResourcePlanResponse& other960) {
  fullResourcePlan = other960.fullResourcePlan;
  __isset = other960.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMAlterResourcePlanResponse::WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse& other955) {
  fullResourcePlan = other955.fullResourcePlan;
  __isset = other955.__isset;
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(const WMAlterResourcePlanResponse& other956) {
  fullResourcePlan = other956.fullResourcePlan;
  __isset = other956.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMAlterResourcePlanResponse::WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse& other959) {
  fullResourcePlan = other959.fullResourcePlan;
  __isset = other959.__isset;
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(const WMAlterResourcePlanResponse& other960) {
  fullResourcePlan = other960.fullResourcePlan;
  __isset = other960.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMAlterResourcePlanResponse::WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse& other1001) {
  fullResourcePlan = other1001.fullResourcePlan;
  __isset = other1001.__isset;
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(const WMAlterResourcePlanResponse& other1002) {
  fullResourcePlan = other1002.fullResourcePlan;
  __isset = other1002.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMAlterResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMAlterResourcePlanResponse(";
  out << "fullResourcePlan="; (__isset.fullResourcePlan ? (out << to_string(fullResourcePlan)) : (out << "<null>"));
  out << ")";
}


WMValidateResourcePlanRequest::~WMValidateResourcePlanRequest() throw() {
}


void WMValidateResourcePlanRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

uint32_t WMValidateResourcePlanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          this->__isset.resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMValidateResourcePlanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMValidateResourcePlanRequest");

  if (this->__isset.resourcePlanName) {
    xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->resourcePlanName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMValidateResourcePlanRequest &a, WMValidateResourcePlanRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMValidateResourcePlanRequest::WMValidateResourcePlanRequest(const WMValidateResourcePlanRequest& other1023) {
  resourcePlanName = other1023.resourcePlanName;
  __isset = other1023.__isset;
}
WMValidateResourcePlanRequest& WMValidateResourcePlanRequest::operator=(const WMValidateResourcePlanRequest& other1024) {
  resourcePlanName = other1024.resourcePlanName;
  __isset = other1024.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMValidateResourcePlanRequest::WMValidateResourcePlanRequest(const WMValidateResourcePlanRequest& other999) {
  resourcePlanName = other999.resourcePlanName;
  __isset = other999.__isset;
}
WMValidateResourcePlanRequest& WMValidateResourcePlanRequest::operator=(const WMValidateResourcePlanRequest& other1000) {
  resourcePlanName = other1000.resourcePlanName;
  __isset = other1000.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMValidateResourcePlanRequest::WMValidateResourcePlanRequest(const WMValidateResourcePlanRequest& other957) {
  resourcePlanName = other957.resourcePlanName;
  __isset = other957.__isset;
}
WMValidateResourcePlanRequest& WMValidateResourcePlanRequest::operator=(const WMValidateResourcePlanRequest& other958) {
  resourcePlanName = other958.resourcePlanName;
  __isset = other958.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMValidateResourcePlanRequest::WMValidateResourcePlanRequest(const WMValidateResourcePlanRequest& other961) {
  resourcePlanName = other961.resourcePlanName;
  __isset = other961.__isset;
}
WMValidateResourcePlanRequest& WMValidateResourcePlanRequest::operator=(const WMValidateResourcePlanRequest& other962) {
  resourcePlanName = other962.resourcePlanName;
  __isset = other962.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMValidateResourcePlanRequest::WMValidateResourcePlanRequest(const WMValidateResourcePlanRequest& other961) {
  resourcePlanName = other961.resourcePlanName;
  __isset = other961.__isset;
}
WMValidateResourcePlanRequest& WMValidateResourcePlanRequest::operator=(const WMValidateResourcePlanRequest& other962) {
  resourcePlanName = other962.resourcePlanName;
  __isset = other962.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMValidateResourcePlanRequest::WMValidateResourcePlanRequest(const WMValidateResourcePlanRequest& other1003) {
  resourcePlanName = other1003.resourcePlanName;
  __isset = other1003.__isset;
}
WMValidateResourcePlanRequest& WMValidateResourcePlanRequest::operator=(const WMValidateResourcePlanRequest& other1004) {
  resourcePlanName = other1004.resourcePlanName;
  __isset = other1004.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMValidateResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMValidateResourcePlanRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ")";
}


WMValidateResourcePlanResponse::~WMValidateResourcePlanResponse() throw() {
}


void WMValidateResourcePlanResponse::__set_errors(const std::vector<std::string> & val) {
  this->errors = val;
__isset.errors = true;
}

void WMValidateResourcePlanResponse::__set_warnings(const std::vector<std::string> & val) {
  this->warnings = val;
__isset.warnings = true;
}

uint32_t WMValidateResourcePlanResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->errors.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size1025;
            ::apache::thrift::protocol::TType _etype1028;
            xfer += iprot->readListBegin(_etype1028, _size1025);
            this->errors.resize(_size1025);
            uint32_t _i1029;
            for (_i1029 = 0; _i1029 < _size1025; ++_i1029)
            {
              xfer += iprot->readString(this->errors[_i1029]);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size1001;
            ::apache::thrift::protocol::TType _etype1004;
            xfer += iprot->readListBegin(_etype1004, _size1001);
            this->errors.resize(_size1001);
            uint32_t _i1005;
            for (_i1005 = 0; _i1005 < _size1001; ++_i1005)
            {
              xfer += iprot->readString(this->errors[_i1005]);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size959;
            ::apache::thrift::protocol::TType _etype962;
            xfer += iprot->readListBegin(_etype962, _size959);
            this->errors.resize(_size959);
            uint32_t _i963;
            for (_i963 = 0; _i963 < _size959; ++_i963)
<<<<<<< HEAD
            {
              xfer += iprot->readString(this->errors[_i963]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size963;
            ::apache::thrift::protocol::TType _etype966;
            xfer += iprot->readListBegin(_etype966, _size963);
            this->errors.resize(_size963);
            uint32_t _i967;
            for (_i967 = 0; _i967 < _size963; ++_i967)
<<<<<<< HEAD
            {
              xfer += iprot->readString(this->errors[_i967]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              xfer += iprot->readString(this->errors[_i963]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += iprot->readString(this->errors[_i967]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size1005;
            ::apache::thrift::protocol::TType _etype1008;
            xfer += iprot->readListBegin(_etype1008, _size1005);
            this->errors.resize(_size1005);
            uint32_t _i1009;
            for (_i1009 = 0; _i1009 < _size1005; ++_i1009)
            {
              xfer += iprot->readString(this->errors[_i1009]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.errors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->warnings.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size1030;
            ::apache::thrift::protocol::TType _etype1033;
            xfer += iprot->readListBegin(_etype1033, _size1030);
            this->warnings.resize(_size1030);
            uint32_t _i1034;
            for (_i1034 = 0; _i1034 < _size1030; ++_i1034)
            {
              xfer += iprot->readString(this->warnings[_i1034]);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size1006;
            ::apache::thrift::protocol::TType _etype1009;
            xfer += iprot->readListBegin(_etype1009, _size1006);
            this->warnings.resize(_size1006);
            uint32_t _i1010;
            for (_i1010 = 0; _i1010 < _size1006; ++_i1010)
            {
              xfer += iprot->readString(this->warnings[_i1010]);
=======
            uint32_t _size964;
            ::apache::thrift::protocol::TType _etype967;
            xfer += iprot->readListBegin(_etype967, _size964);
            this->warnings.resize(_size964);
            uint32_t _i968;
            for (_i968 = 0; _i968 < _size964; ++_i968)
            {
              xfer += iprot->readString(this->warnings[_i968]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
            uint32_t _size968;
            ::apache::thrift::protocol::TType _etype971;
            xfer += iprot->readListBegin(_etype971, _size968);
            this->warnings.resize(_size968);
            uint32_t _i972;
            for (_i972 = 0; _i972 < _size968; ++_i972)
<<<<<<< HEAD
            {
              xfer += iprot->readString(this->warnings[_i972]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size964;
            ::apache::thrift::protocol::TType _etype967;
            xfer += iprot->readListBegin(_etype967, _size964);
            this->warnings.resize(_size964);
            uint32_t _i968;
            for (_i968 = 0; _i968 < _size964; ++_i968)
            {
              xfer += iprot->readString(this->warnings[_i968]);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            {
              xfer += iprot->readString(this->warnings[_i972]);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size1010;
            ::apache::thrift::protocol::TType _etype1013;
            xfer += iprot->readListBegin(_etype1013, _size1010);
            this->warnings.resize(_size1010);
            uint32_t _i1014;
            for (_i1014 = 0; _i1014 < _size1010; ++_i1014)
            {
              xfer += iprot->readString(this->warnings[_i1014]);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.warnings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMValidateResourcePlanResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMValidateResourcePlanResponse");

  if (this->__isset.errors) {
    xfer += oprot->writeFieldBegin("errors", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->errors.size()));
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter1035;
      for (_iter1035 = this->errors.begin(); _iter1035 != this->errors.end(); ++_iter1035)
      {
        xfer += oprot->writeString((*_iter1035));
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter1011;
      for (_iter1011 = this->errors.begin(); _iter1011 != this->errors.end(); ++_iter1011)
      {
        xfer += oprot->writeString((*_iter1011));
=======
      std::vector<std::string> ::const_iterator _iter969;
      for (_iter969 = this->errors.begin(); _iter969 != this->errors.end(); ++_iter969)
      {
        xfer += oprot->writeString((*_iter969));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter973;
      for (_iter973 = this->errors.begin(); _iter973 != this->errors.end(); ++_iter973)
      {
        xfer += oprot->writeString((*_iter973));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<std::string> ::const_iterator _iter969;
      for (_iter969 = this->errors.begin(); _iter969 != this->errors.end(); ++_iter969)
      {
        xfer += oprot->writeString((*_iter969));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter973;
      for (_iter973 = this->errors.begin(); _iter973 != this->errors.end(); ++_iter973)
      {
        xfer += oprot->writeString((*_iter973));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<std::string> ::const_iterator _iter1015;
      for (_iter1015 = this->errors.begin(); _iter1015 != this->errors.end(); ++_iter1015)
      {
        xfer += oprot->writeString((*_iter1015));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.warnings) {
    xfer += oprot->writeFieldBegin("warnings", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->warnings.size()));
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter1036;
      for (_iter1036 = this->warnings.begin(); _iter1036 != this->warnings.end(); ++_iter1036)
      {
        xfer += oprot->writeString((*_iter1036));
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<std::string> ::const_iterator _iter1012;
      for (_iter1012 = this->warnings.begin(); _iter1012 != this->warnings.end(); ++_iter1012)
      {
        xfer += oprot->writeString((*_iter1012));
=======
      std::vector<std::string> ::const_iterator _iter970;
      for (_iter970 = this->warnings.begin(); _iter970 != this->warnings.end(); ++_iter970)
      {
        xfer += oprot->writeString((*_iter970));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter974;
      for (_iter974 = this->warnings.begin(); _iter974 != this->warnings.end(); ++_iter974)
      {
        xfer += oprot->writeString((*_iter974));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<std::string> ::const_iterator _iter970;
      for (_iter970 = this->warnings.begin(); _iter970 != this->warnings.end(); ++_iter970)
      {
        xfer += oprot->writeString((*_iter970));
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<std::string> ::const_iterator _iter974;
      for (_iter974 = this->warnings.begin(); _iter974 != this->warnings.end(); ++_iter974)
      {
        xfer += oprot->writeString((*_iter974));
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<std::string> ::const_iterator _iter1016;
      for (_iter1016 = this->warnings.begin(); _iter1016 != this->warnings.end(); ++_iter1016)
      {
        xfer += oprot->writeString((*_iter1016));
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMValidateResourcePlanResponse &a, WMValidateResourcePlanResponse &b) {
  using ::std::swap;
  swap(a.errors, b.errors);
  swap(a.warnings, b.warnings);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMValidateResourcePlanResponse::WMValidateResourcePlanResponse(const WMValidateResourcePlanResponse& other1037) {
  errors = other1037.errors;
  warnings = other1037.warnings;
  __isset = other1037.__isset;
}
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other1038) {
  errors = other1038.errors;
  warnings = other1038.warnings;
  __isset = other1038.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMValidateResourcePlanResponse::WMValidateResourcePlanResponse(const WMValidateResourcePlanResponse& other1013) {
  errors = other1013.errors;
  warnings = other1013.warnings;
  __isset = other1013.__isset;
}
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other1014) {
  errors = other1014.errors;
  warnings = other1014.warnings;
  __isset = other1014.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMValidateResourcePlanResponse::WMValidateResourcePlanResponse(const WMValidateResourcePlanResponse& other971) {
  errors = other971.errors;
  warnings = other971.warnings;
  __isset = other971.__isset;
<<<<<<< HEAD
}
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other972) {
  errors = other972.errors;
  warnings = other972.warnings;
  __isset = other972.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMValidateResourcePlanResponse::WMValidateResourcePlanResponse(const WMValidateResourcePlanResponse& other975) {
  errors = other975.errors;
  warnings = other975.warnings;
  __isset = other975.__isset;
<<<<<<< HEAD
}
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other976) {
  errors = other976.errors;
  warnings = other976.warnings;
  __isset = other976.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
}
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other972) {
  errors = other972.errors;
  warnings = other972.warnings;
  __isset = other972.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
}
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other976) {
  errors = other976.errors;
  warnings = other976.warnings;
  __isset = other976.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMValidateResourcePlanResponse::WMValidateResourcePlanResponse(const WMValidateResourcePlanResponse& other1017) {
  errors = other1017.errors;
  warnings = other1017.warnings;
  __isset = other1017.__isset;
}
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other1018) {
  errors = other1018.errors;
  warnings = other1018.warnings;
  __isset = other1018.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMValidateResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMValidateResourcePlanResponse(";
  out << "errors="; (__isset.errors ? (out << to_string(errors)) : (out << "<null>"));
  out << ", " << "warnings="; (__isset.warnings ? (out << to_string(warnings)) : (out << "<null>"));
  out << ")";
}


WMDropResourcePlanRequest::~WMDropResourcePlanRequest() throw() {
}


void WMDropResourcePlanRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

uint32_t WMDropResourcePlanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          this->__isset.resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMDropResourcePlanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMDropResourcePlanRequest");

  if (this->__isset.resourcePlanName) {
    xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->resourcePlanName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMDropResourcePlanRequest &a, WMDropResourcePlanRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMDropResourcePlanRequest::WMDropResourcePlanRequest(const WMDropResourcePlanRequest& other1039) {
  resourcePlanName = other1039.resourcePlanName;
  __isset = other1039.__isset;
}
WMDropResourcePlanRequest& WMDropResourcePlanRequest::operator=(const WMDropResourcePlanRequest& other1040) {
  resourcePlanName = other1040.resourcePlanName;
  __isset = other1040.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropResourcePlanRequest::WMDropResourcePlanRequest(const WMDropResourcePlanRequest& other1015) {
  resourcePlanName = other1015.resourcePlanName;
  __isset = other1015.__isset;
}
WMDropResourcePlanRequest& WMDropResourcePlanRequest::operator=(const WMDropResourcePlanRequest& other1016) {
  resourcePlanName = other1016.resourcePlanName;
  __isset = other1016.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMDropResourcePlanRequest::WMDropResourcePlanRequest(const WMDropResourcePlanRequest& other973) {
  resourcePlanName = other973.resourcePlanName;
  __isset = other973.__isset;
}
WMDropResourcePlanRequest& WMDropResourcePlanRequest::operator=(const WMDropResourcePlanRequest& other974) {
  resourcePlanName = other974.resourcePlanName;
  __isset = other974.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropResourcePlanRequest::WMDropResourcePlanRequest(const WMDropResourcePlanRequest& other977) {
  resourcePlanName = other977.resourcePlanName;
  __isset = other977.__isset;
}
WMDropResourcePlanRequest& WMDropResourcePlanRequest::operator=(const WMDropResourcePlanRequest& other978) {
  resourcePlanName = other978.resourcePlanName;
  __isset = other978.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropResourcePlanRequest::WMDropResourcePlanRequest(const WMDropResourcePlanRequest& other977) {
  resourcePlanName = other977.resourcePlanName;
  __isset = other977.__isset;
}
WMDropResourcePlanRequest& WMDropResourcePlanRequest::operator=(const WMDropResourcePlanRequest& other978) {
  resourcePlanName = other978.resourcePlanName;
  __isset = other978.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMDropResourcePlanRequest::WMDropResourcePlanRequest(const WMDropResourcePlanRequest& other1019) {
  resourcePlanName = other1019.resourcePlanName;
  __isset = other1019.__isset;
}
WMDropResourcePlanRequest& WMDropResourcePlanRequest::operator=(const WMDropResourcePlanRequest& other1020) {
  resourcePlanName = other1020.resourcePlanName;
  __isset = other1020.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMDropResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropResourcePlanRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ")";
}


WMDropResourcePlanResponse::~WMDropResourcePlanResponse() throw() {
}


uint32_t WMDropResourcePlanResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMDropResourcePlanResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMDropResourcePlanResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMDropResourcePlanResponse &a, WMDropResourcePlanResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
WMDropResourcePlanResponse::WMDropResourcePlanResponse(const WMDropResourcePlanResponse& other1041) {
  (void) other1041;
}
WMDropResourcePlanResponse& WMDropResourcePlanResponse::operator=(const WMDropResourcePlanResponse& other1042) {
  (void) other1042;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropResourcePlanResponse::WMDropResourcePlanResponse(const WMDropResourcePlanResponse& other1017) {
  (void) other1017;
}
WMDropResourcePlanResponse& WMDropResourcePlanResponse::operator=(const WMDropResourcePlanResponse& other1018) {
  (void) other1018;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMDropResourcePlanResponse::WMDropResourcePlanResponse(const WMDropResourcePlanResponse& other975) {
  (void) other975;
}
WMDropResourcePlanResponse& WMDropResourcePlanResponse::operator=(const WMDropResourcePlanResponse& other976) {
  (void) other976;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropResourcePlanResponse::WMDropResourcePlanResponse(const WMDropResourcePlanResponse& other979) {
  (void) other979;
}
WMDropResourcePlanResponse& WMDropResourcePlanResponse::operator=(const WMDropResourcePlanResponse& other980) {
  (void) other980;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropResourcePlanResponse::WMDropResourcePlanResponse(const WMDropResourcePlanResponse& other979) {
  (void) other979;
}
WMDropResourcePlanResponse& WMDropResourcePlanResponse::operator=(const WMDropResourcePlanResponse& other980) {
  (void) other980;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMDropResourcePlanResponse::WMDropResourcePlanResponse(const WMDropResourcePlanResponse& other1021) {
  (void) other1021;
}
WMDropResourcePlanResponse& WMDropResourcePlanResponse::operator=(const WMDropResourcePlanResponse& other1022) {
  (void) other1022;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMDropResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropResourcePlanResponse(";
  out << ")";
}


WMCreateTriggerRequest::~WMCreateTriggerRequest() throw() {
}


void WMCreateTriggerRequest::__set_trigger(const WMTrigger& val) {
  this->trigger = val;
__isset.trigger = true;
}

uint32_t WMCreateTriggerRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->trigger.read(iprot);
          this->__isset.trigger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreateTriggerRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreateTriggerRequest");

  if (this->__isset.trigger) {
    xfer += oprot->writeFieldBegin("trigger", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->trigger.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreateTriggerRequest &a, WMCreateTriggerRequest &b) {
  using ::std::swap;
  swap(a.trigger, b.trigger);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMCreateTriggerRequest::WMCreateTriggerRequest(const WMCreateTriggerRequest& other1043) {
  trigger = other1043.trigger;
  __isset = other1043.__isset;
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(const WMCreateTriggerRequest& other1044) {
  trigger = other1044.trigger;
  __isset = other1044.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateTriggerRequest::WMCreateTriggerRequest(const WMCreateTriggerRequest& other1019) {
  trigger = other1019.trigger;
  __isset = other1019.__isset;
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(const WMCreateTriggerRequest& other1020) {
  trigger = other1020.trigger;
  __isset = other1020.__isset;
=======
WMCreateTriggerRequest::WMCreateTriggerRequest(const WMCreateTriggerRequest& other977) {
  trigger = other977.trigger;
  __isset = other977.__isset;
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(const WMCreateTriggerRequest& other978) {
  trigger = other978.trigger;
  __isset = other978.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateTriggerRequest::WMCreateTriggerRequest(const WMCreateTriggerRequest& other981) {
  trigger = other981.trigger;
  __isset = other981.__isset;
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(const WMCreateTriggerRequest& other982) {
  trigger = other982.trigger;
  __isset = other982.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreateTriggerRequest::WMCreateTriggerRequest(const WMCreateTriggerRequest& other977) {
  trigger = other977.trigger;
  __isset = other977.__isset;
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(const WMCreateTriggerRequest& other978) {
  trigger = other978.trigger;
  __isset = other978.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateTriggerRequest::WMCreateTriggerRequest(const WMCreateTriggerRequest& other981) {
  trigger = other981.trigger;
  __isset = other981.__isset;
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(const WMCreateTriggerRequest& other982) {
  trigger = other982.trigger;
  __isset = other982.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreateTriggerRequest::WMCreateTriggerRequest(const WMCreateTriggerRequest& other1023) {
  trigger = other1023.trigger;
  __isset = other1023.__isset;
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(const WMCreateTriggerRequest& other1024) {
  trigger = other1024.trigger;
  __isset = other1024.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMCreateTriggerRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateTriggerRequest(";
  out << "trigger="; (__isset.trigger ? (out << to_string(trigger)) : (out << "<null>"));
  out << ")";
}


WMCreateTriggerResponse::~WMCreateTriggerResponse() throw() {
}


uint32_t WMCreateTriggerResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreateTriggerResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreateTriggerResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreateTriggerResponse &a, WMCreateTriggerResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
WMCreateTriggerResponse::WMCreateTriggerResponse(const WMCreateTriggerResponse& other1045) {
  (void) other1045;
}
WMCreateTriggerResponse& WMCreateTriggerResponse::operator=(const WMCreateTriggerResponse& other1046) {
  (void) other1046;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateTriggerResponse::WMCreateTriggerResponse(const WMCreateTriggerResponse& other1021) {
  (void) other1021;
}
WMCreateTriggerResponse& WMCreateTriggerResponse::operator=(const WMCreateTriggerResponse& other1022) {
  (void) other1022;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMCreateTriggerResponse::WMCreateTriggerResponse(const WMCreateTriggerResponse& other979) {
  (void) other979;
}
WMCreateTriggerResponse& WMCreateTriggerResponse::operator=(const WMCreateTriggerResponse& other980) {
  (void) other980;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateTriggerResponse::WMCreateTriggerResponse(const WMCreateTriggerResponse& other983) {
  (void) other983;
}
WMCreateTriggerResponse& WMCreateTriggerResponse::operator=(const WMCreateTriggerResponse& other984) {
  (void) other984;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateTriggerResponse::WMCreateTriggerResponse(const WMCreateTriggerResponse& other983) {
  (void) other983;
}
WMCreateTriggerResponse& WMCreateTriggerResponse::operator=(const WMCreateTriggerResponse& other984) {
  (void) other984;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreateTriggerResponse::WMCreateTriggerResponse(const WMCreateTriggerResponse& other1025) {
  (void) other1025;
}
WMCreateTriggerResponse& WMCreateTriggerResponse::operator=(const WMCreateTriggerResponse& other1026) {
  (void) other1026;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMCreateTriggerResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateTriggerResponse(";
  out << ")";
}


WMAlterTriggerRequest::~WMAlterTriggerRequest() throw() {
}


void WMAlterTriggerRequest::__set_trigger(const WMTrigger& val) {
  this->trigger = val;
__isset.trigger = true;
}

uint32_t WMAlterTriggerRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->trigger.read(iprot);
          this->__isset.trigger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMAlterTriggerRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMAlterTriggerRequest");

  if (this->__isset.trigger) {
    xfer += oprot->writeFieldBegin("trigger", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->trigger.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMAlterTriggerRequest &a, WMAlterTriggerRequest &b) {
  using ::std::swap;
  swap(a.trigger, b.trigger);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMAlterTriggerRequest::WMAlterTriggerRequest(const WMAlterTriggerRequest& other1047) {
  trigger = other1047.trigger;
  __isset = other1047.__isset;
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(const WMAlterTriggerRequest& other1048) {
  trigger = other1048.trigger;
  __isset = other1048.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMAlterTriggerRequest::WMAlterTriggerRequest(const WMAlterTriggerRequest& other1023) {
  trigger = other1023.trigger;
  __isset = other1023.__isset;
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(const WMAlterTriggerRequest& other1024) {
  trigger = other1024.trigger;
  __isset = other1024.__isset;
=======
WMAlterTriggerRequest::WMAlterTriggerRequest(const WMAlterTriggerRequest& other981) {
  trigger = other981.trigger;
  __isset = other981.__isset;
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(const WMAlterTriggerRequest& other982) {
  trigger = other982.trigger;
  __isset = other982.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMAlterTriggerRequest::WMAlterTriggerRequest(const WMAlterTriggerRequest& other985) {
  trigger = other985.trigger;
  __isset = other985.__isset;
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(const WMAlterTriggerRequest& other986) {
  trigger = other986.trigger;
  __isset = other986.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMAlterTriggerRequest::WMAlterTriggerRequest(const WMAlterTriggerRequest& other981) {
  trigger = other981.trigger;
  __isset = other981.__isset;
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(const WMAlterTriggerRequest& other982) {
  trigger = other982.trigger;
  __isset = other982.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMAlterTriggerRequest::WMAlterTriggerRequest(const WMAlterTriggerRequest& other985) {
  trigger = other985.trigger;
  __isset = other985.__isset;
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(const WMAlterTriggerRequest& other986) {
  trigger = other986.trigger;
  __isset = other986.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMAlterTriggerRequest::WMAlterTriggerRequest(const WMAlterTriggerRequest& other1027) {
  trigger = other1027.trigger;
  __isset = other1027.__isset;
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(const WMAlterTriggerRequest& other1028) {
  trigger = other1028.trigger;
  __isset = other1028.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMAlterTriggerRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMAlterTriggerRequest(";
  out << "trigger="; (__isset.trigger ? (out << to_string(trigger)) : (out << "<null>"));
  out << ")";
}


WMAlterTriggerResponse::~WMAlterTriggerResponse() throw() {
}


uint32_t WMAlterTriggerResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMAlterTriggerResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMAlterTriggerResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMAlterTriggerResponse &a, WMAlterTriggerResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
WMAlterTriggerResponse::WMAlterTriggerResponse(const WMAlterTriggerResponse& other1049) {
  (void) other1049;
}
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other1050) {
  (void) other1050;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMAlterTriggerResponse::WMAlterTriggerResponse(const WMAlterTriggerResponse& other1025) {
  (void) other1025;
}
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other1026) {
  (void) other1026;
=======
WMAlterTriggerResponse::WMAlterTriggerResponse(const WMAlterTriggerResponse& other983) {
  (void) other983;
}
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other984) {
  (void) other984;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMAlterTriggerResponse::WMAlterTriggerResponse(const WMAlterTriggerResponse& other987) {
  (void) other987;
}
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other988) {
  (void) other988;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMAlterTriggerResponse::WMAlterTriggerResponse(const WMAlterTriggerResponse& other983) {
  (void) other983;
}
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other984) {
  (void) other984;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMAlterTriggerResponse::WMAlterTriggerResponse(const WMAlterTriggerResponse& other987) {
  (void) other987;
}
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other988) {
  (void) other988;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMAlterTriggerResponse::WMAlterTriggerResponse(const WMAlterTriggerResponse& other1029) {
  (void) other1029;
}
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other1030) {
  (void) other1030;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMAlterTriggerResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMAlterTriggerResponse(";
  out << ")";
}


WMDropTriggerRequest::~WMDropTriggerRequest() throw() {
}


void WMDropTriggerRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

void WMDropTriggerRequest::__set_triggerName(const std::string& val) {
  this->triggerName = val;
__isset.triggerName = true;
}

uint32_t WMDropTriggerRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          this->__isset.resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->triggerName);
          this->__isset.triggerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMDropTriggerRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMDropTriggerRequest");

  if (this->__isset.resourcePlanName) {
    xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->resourcePlanName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.triggerName) {
    xfer += oprot->writeFieldBegin("triggerName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->triggerName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMDropTriggerRequest &a, WMDropTriggerRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.triggerName, b.triggerName);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMDropTriggerRequest::WMDropTriggerRequest(const WMDropTriggerRequest& other1051) {
  resourcePlanName = other1051.resourcePlanName;
  triggerName = other1051.triggerName;
  __isset = other1051.__isset;
}
WMDropTriggerRequest& WMDropTriggerRequest::operator=(const WMDropTriggerRequest& other1052) {
  resourcePlanName = other1052.resourcePlanName;
  triggerName = other1052.triggerName;
  __isset = other1052.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropTriggerRequest::WMDropTriggerRequest(const WMDropTriggerRequest& other1027) {
  resourcePlanName = other1027.resourcePlanName;
  triggerName = other1027.triggerName;
  __isset = other1027.__isset;
}
WMDropTriggerRequest& WMDropTriggerRequest::operator=(const WMDropTriggerRequest& other1028) {
  resourcePlanName = other1028.resourcePlanName;
  triggerName = other1028.triggerName;
  __isset = other1028.__isset;
=======
WMDropTriggerRequest::WMDropTriggerRequest(const WMDropTriggerRequest& other985) {
  resourcePlanName = other985.resourcePlanName;
  triggerName = other985.triggerName;
  __isset = other985.__isset;
}
=======
WMDropTriggerRequest::WMDropTriggerRequest(const WMDropTriggerRequest& other985) {
  resourcePlanName = other985.resourcePlanName;
  triggerName = other985.triggerName;
  __isset = other985.__isset;
}
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMDropTriggerRequest& WMDropTriggerRequest::operator=(const WMDropTriggerRequest& other986) {
  resourcePlanName = other986.resourcePlanName;
  triggerName = other986.triggerName;
  __isset = other986.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropTriggerRequest::WMDropTriggerRequest(const WMDropTriggerRequest& other989) {
  resourcePlanName = other989.resourcePlanName;
  triggerName = other989.triggerName;
  __isset = other989.__isset;
}
=======
WMDropTriggerRequest::WMDropTriggerRequest(const WMDropTriggerRequest& other989) {
  resourcePlanName = other989.resourcePlanName;
  triggerName = other989.triggerName;
  __isset = other989.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMDropTriggerRequest& WMDropTriggerRequest::operator=(const WMDropTriggerRequest& other990) {
  resourcePlanName = other990.resourcePlanName;
  triggerName = other990.triggerName;
  __isset = other990.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMDropTriggerRequest::WMDropTriggerRequest(const WMDropTriggerRequest& other1031) {
  resourcePlanName = other1031.resourcePlanName;
  triggerName = other1031.triggerName;
  __isset = other1031.__isset;
}
WMDropTriggerRequest& WMDropTriggerRequest::operator=(const WMDropTriggerRequest& other1032) {
  resourcePlanName = other1032.resourcePlanName;
  triggerName = other1032.triggerName;
  __isset = other1032.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMDropTriggerRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropTriggerRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ", " << "triggerName="; (__isset.triggerName ? (out << to_string(triggerName)) : (out << "<null>"));
  out << ")";
}


WMDropTriggerResponse::~WMDropTriggerResponse() throw() {
}


uint32_t WMDropTriggerResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMDropTriggerResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMDropTriggerResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMDropTriggerResponse &a, WMDropTriggerResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
WMDropTriggerResponse::WMDropTriggerResponse(const WMDropTriggerResponse& other1053) {
  (void) other1053;
}
WMDropTriggerResponse& WMDropTriggerResponse::operator=(const WMDropTriggerResponse& other1054) {
  (void) other1054;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropTriggerResponse::WMDropTriggerResponse(const WMDropTriggerResponse& other1029) {
  (void) other1029;
}
WMDropTriggerResponse& WMDropTriggerResponse::operator=(const WMDropTriggerResponse& other1030) {
  (void) other1030;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMDropTriggerResponse::WMDropTriggerResponse(const WMDropTriggerResponse& other987) {
  (void) other987;
}
WMDropTriggerResponse& WMDropTriggerResponse::operator=(const WMDropTriggerResponse& other988) {
  (void) other988;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropTriggerResponse::WMDropTriggerResponse(const WMDropTriggerResponse& other991) {
  (void) other991;
}
WMDropTriggerResponse& WMDropTriggerResponse::operator=(const WMDropTriggerResponse& other992) {
  (void) other992;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropTriggerResponse::WMDropTriggerResponse(const WMDropTriggerResponse& other991) {
  (void) other991;
}
WMDropTriggerResponse& WMDropTriggerResponse::operator=(const WMDropTriggerResponse& other992) {
  (void) other992;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMDropTriggerResponse::WMDropTriggerResponse(const WMDropTriggerResponse& other1033) {
  (void) other1033;
}
WMDropTriggerResponse& WMDropTriggerResponse::operator=(const WMDropTriggerResponse& other1034) {
  (void) other1034;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMDropTriggerResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropTriggerResponse(";
  out << ")";
}


WMGetTriggersForResourePlanRequest::~WMGetTriggersForResourePlanRequest() throw() {
}


void WMGetTriggersForResourePlanRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

uint32_t WMGetTriggersForResourePlanRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          this->__isset.resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMGetTriggersForResourePlanRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMGetTriggersForResourePlanRequest");

  if (this->__isset.resourcePlanName) {
    xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->resourcePlanName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMGetTriggersForResourePlanRequest &a, WMGetTriggersForResourePlanRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest& other1055) {
  resourcePlanName = other1055.resourcePlanName;
  __isset = other1055.__isset;
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(const WMGetTriggersForResourePlanRequest& other1056) {
  resourcePlanName = other1056.resourcePlanName;
  __isset = other1056.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest& other1031) {
  resourcePlanName = other1031.resourcePlanName;
  __isset = other1031.__isset;
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(const WMGetTriggersForResourePlanRequest& other1032) {
  resourcePlanName = other1032.resourcePlanName;
  __isset = other1032.__isset;
=======
WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest& other989) {
  resourcePlanName = other989.resourcePlanName;
  __isset = other989.__isset;
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(const WMGetTriggersForResourePlanRequest& other990) {
  resourcePlanName = other990.resourcePlanName;
  __isset = other990.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest& other993) {
  resourcePlanName = other993.resourcePlanName;
  __isset = other993.__isset;
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(const WMGetTriggersForResourePlanRequest& other994) {
  resourcePlanName = other994.resourcePlanName;
  __isset = other994.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest& other989) {
  resourcePlanName = other989.resourcePlanName;
  __isset = other989.__isset;
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(const WMGetTriggersForResourePlanRequest& other990) {
  resourcePlanName = other990.resourcePlanName;
  __isset = other990.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest& other993) {
  resourcePlanName = other993.resourcePlanName;
  __isset = other993.__isset;
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(const WMGetTriggersForResourePlanRequest& other994) {
  resourcePlanName = other994.resourcePlanName;
  __isset = other994.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest& other1035) {
  resourcePlanName = other1035.resourcePlanName;
  __isset = other1035.__isset;
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(const WMGetTriggersForResourePlanRequest& other1036) {
  resourcePlanName = other1036.resourcePlanName;
  __isset = other1036.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMGetTriggersForResourePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetTriggersForResourePlanRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ")";
}


WMGetTriggersForResourePlanResponse::~WMGetTriggersForResourePlanResponse() throw() {
}


void WMGetTriggersForResourePlanResponse::__set_triggers(const std::vector<WMTrigger> & val) {
  this->triggers = val;
__isset.triggers = true;
}

uint32_t WMGetTriggersForResourePlanResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->triggers.clear();
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size1057;
            ::apache::thrift::protocol::TType _etype1060;
            xfer += iprot->readListBegin(_etype1060, _size1057);
            this->triggers.resize(_size1057);
            uint32_t _i1061;
            for (_i1061 = 0; _i1061 < _size1057; ++_i1061)
            {
              xfer += this->triggers[_i1061].read(iprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
            uint32_t _size1033;
            ::apache::thrift::protocol::TType _etype1036;
            xfer += iprot->readListBegin(_etype1036, _size1033);
            this->triggers.resize(_size1033);
            uint32_t _i1037;
            for (_i1037 = 0; _i1037 < _size1033; ++_i1037)
            {
              xfer += this->triggers[_i1037].read(iprot);
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
            uint32_t _size991;
            ::apache::thrift::protocol::TType _etype994;
            xfer += iprot->readListBegin(_etype994, _size991);
            this->triggers.resize(_size991);
            uint32_t _i995;
            for (_i995 = 0; _i995 < _size991; ++_i995)
<<<<<<< HEAD
            {
              xfer += this->triggers[_i995].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size995;
            ::apache::thrift::protocol::TType _etype998;
            xfer += iprot->readListBegin(_etype998, _size995);
            this->triggers.resize(_size995);
            uint32_t _i999;
            for (_i999 = 0; _i999 < _size995; ++_i999)
            {
              xfer += this->triggers[_i999].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            {
              xfer += this->triggers[_i995].read(iprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
            uint32_t _size995;
            ::apache::thrift::protocol::TType _etype998;
            xfer += iprot->readListBegin(_etype998, _size995);
            this->triggers.resize(_size995);
            uint32_t _i999;
            for (_i999 = 0; _i999 < _size995; ++_i999)
            {
              xfer += this->triggers[_i999].read(iprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
            uint32_t _size1037;
            ::apache::thrift::protocol::TType _etype1040;
            xfer += iprot->readListBegin(_etype1040, _size1037);
            this->triggers.resize(_size1037);
            uint32_t _i1041;
            for (_i1041 = 0; _i1041 < _size1037; ++_i1041)
            {
              xfer += this->triggers[_i1041].read(iprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.triggers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMGetTriggersForResourePlanResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMGetTriggersForResourePlanResponse");

  if (this->__isset.triggers) {
    xfer += oprot->writeFieldBegin("triggers", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->triggers.size()));
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMTrigger> ::const_iterator _iter1062;
      for (_iter1062 = this->triggers.begin(); _iter1062 != this->triggers.end(); ++_iter1062)
      {
        xfer += (*_iter1062).write(oprot);
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      std::vector<WMTrigger> ::const_iterator _iter1038;
      for (_iter1038 = this->triggers.begin(); _iter1038 != this->triggers.end(); ++_iter1038)
      {
        xfer += (*_iter1038).write(oprot);
=======
      std::vector<WMTrigger> ::const_iterator _iter996;
      for (_iter996 = this->triggers.begin(); _iter996 != this->triggers.end(); ++_iter996)
      {
        xfer += (*_iter996).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMTrigger> ::const_iterator _iter1000;
      for (_iter1000 = this->triggers.begin(); _iter1000 != this->triggers.end(); ++_iter1000)
      {
        xfer += (*_iter1000).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<WMTrigger> ::const_iterator _iter996;
      for (_iter996 = this->triggers.begin(); _iter996 != this->triggers.end(); ++_iter996)
      {
        xfer += (*_iter996).write(oprot);
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
      std::vector<WMTrigger> ::const_iterator _iter1000;
      for (_iter1000 = this->triggers.begin(); _iter1000 != this->triggers.end(); ++_iter1000)
      {
        xfer += (*_iter1000).write(oprot);
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
      std::vector<WMTrigger> ::const_iterator _iter1042;
      for (_iter1042 = this->triggers.begin(); _iter1042 != this->triggers.end(); ++_iter1042)
      {
        xfer += (*_iter1042).write(oprot);
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMGetTriggersForResourePlanResponse &a, WMGetTriggersForResourePlanResponse &b) {
  using ::std::swap;
  swap(a.triggers, b.triggers);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse& other1063) {
  triggers = other1063.triggers;
  __isset = other1063.__isset;
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(const WMGetTriggersForResourePlanResponse& other1064) {
  triggers = other1064.triggers;
  __isset = other1064.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse& other1039) {
  triggers = other1039.triggers;
  __isset = other1039.__isset;
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(const WMGetTriggersForResourePlanResponse& other1040) {
  triggers = other1040.triggers;
  __isset = other1040.__isset;
=======
WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse& other997) {
  triggers = other997.triggers;
  __isset = other997.__isset;
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(const WMGetTriggersForResourePlanResponse& other998) {
  triggers = other998.triggers;
  __isset = other998.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse& other1001) {
  triggers = other1001.triggers;
  __isset = other1001.__isset;
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(const WMGetTriggersForResourePlanResponse& other1002) {
  triggers = other1002.triggers;
  __isset = other1002.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse& other997) {
  triggers = other997.triggers;
  __isset = other997.__isset;
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(const WMGetTriggersForResourePlanResponse& other998) {
  triggers = other998.triggers;
  __isset = other998.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse& other1001) {
  triggers = other1001.triggers;
  __isset = other1001.__isset;
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(const WMGetTriggersForResourePlanResponse& other1002) {
  triggers = other1002.triggers;
  __isset = other1002.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse& other1043) {
  triggers = other1043.triggers;
  __isset = other1043.__isset;
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(const WMGetTriggersForResourePlanResponse& other1044) {
  triggers = other1044.triggers;
  __isset = other1044.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMGetTriggersForResourePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetTriggersForResourePlanResponse(";
  out << "triggers="; (__isset.triggers ? (out << to_string(triggers)) : (out << "<null>"));
  out << ")";
}


WMCreatePoolRequest::~WMCreatePoolRequest() throw() {
}


void WMCreatePoolRequest::__set_pool(const WMPool& val) {
  this->pool = val;
__isset.pool = true;
}

uint32_t WMCreatePoolRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pool.read(iprot);
          this->__isset.pool = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreatePoolRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreatePoolRequest");

  if (this->__isset.pool) {
    xfer += oprot->writeFieldBegin("pool", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pool.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreatePoolRequest &a, WMCreatePoolRequest &b) {
  using ::std::swap;
  swap(a.pool, b.pool);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMCreatePoolRequest::WMCreatePoolRequest(const WMCreatePoolRequest& other1065) {
  pool = other1065.pool;
  __isset = other1065.__isset;
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(const WMCreatePoolRequest& other1066) {
  pool = other1066.pool;
  __isset = other1066.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreatePoolRequest::WMCreatePoolRequest(const WMCreatePoolRequest& other1041) {
  pool = other1041.pool;
  __isset = other1041.__isset;
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(const WMCreatePoolRequest& other1042) {
  pool = other1042.pool;
  __isset = other1042.__isset;
=======
WMCreatePoolRequest::WMCreatePoolRequest(const WMCreatePoolRequest& other999) {
  pool = other999.pool;
  __isset = other999.__isset;
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(const WMCreatePoolRequest& other1000) {
  pool = other1000.pool;
  __isset = other1000.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreatePoolRequest::WMCreatePoolRequest(const WMCreatePoolRequest& other1003) {
  pool = other1003.pool;
  __isset = other1003.__isset;
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(const WMCreatePoolRequest& other1004) {
  pool = other1004.pool;
  __isset = other1004.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreatePoolRequest::WMCreatePoolRequest(const WMCreatePoolRequest& other999) {
  pool = other999.pool;
  __isset = other999.__isset;
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(const WMCreatePoolRequest& other1000) {
  pool = other1000.pool;
  __isset = other1000.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreatePoolRequest::WMCreatePoolRequest(const WMCreatePoolRequest& other1003) {
  pool = other1003.pool;
  __isset = other1003.__isset;
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(const WMCreatePoolRequest& other1004) {
  pool = other1004.pool;
  __isset = other1004.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreatePoolRequest::WMCreatePoolRequest(const WMCreatePoolRequest& other1045) {
  pool = other1045.pool;
  __isset = other1045.__isset;
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(const WMCreatePoolRequest& other1046) {
  pool = other1046.pool;
  __isset = other1046.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMCreatePoolRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreatePoolRequest(";
  out << "pool="; (__isset.pool ? (out << to_string(pool)) : (out << "<null>"));
  out << ")";
}


WMCreatePoolResponse::~WMCreatePoolResponse() throw() {
}


uint32_t WMCreatePoolResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreatePoolResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreatePoolResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreatePoolResponse &a, WMCreatePoolResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
WMCreatePoolResponse::WMCreatePoolResponse(const WMCreatePoolResponse& other1067) {
  (void) other1067;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(const WMCreatePoolResponse& other1068) {
  (void) other1068;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreatePoolResponse::WMCreatePoolResponse(const WMCreatePoolResponse& other1043) {
  (void) other1043;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(const WMCreatePoolResponse& other1044) {
  (void) other1044;
=======
WMCreatePoolResponse::WMCreatePoolResponse(const WMCreatePoolResponse& other1001) {
  (void) other1001;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(const WMCreatePoolResponse& other1002) {
  (void) other1002;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreatePoolResponse::WMCreatePoolResponse(const WMCreatePoolResponse& other1005) {
  (void) other1005;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(const WMCreatePoolResponse& other1006) {
  (void) other1006;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreatePoolResponse::WMCreatePoolResponse(const WMCreatePoolResponse& other1001) {
  (void) other1001;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(const WMCreatePoolResponse& other1002) {
  (void) other1002;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreatePoolResponse::WMCreatePoolResponse(const WMCreatePoolResponse& other1005) {
  (void) other1005;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(const WMCreatePoolResponse& other1006) {
  (void) other1006;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreatePoolResponse::WMCreatePoolResponse(const WMCreatePoolResponse& other1047) {
  (void) other1047;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(const WMCreatePoolResponse& other1048) {
  (void) other1048;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMCreatePoolResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreatePoolResponse(";
  out << ")";
}


WMAlterPoolRequest::~WMAlterPoolRequest() throw() {
}


void WMAlterPoolRequest::__set_pool(const WMNullablePool& val) {
  this->pool = val;
__isset.pool = true;
}

void WMAlterPoolRequest::__set_poolPath(const std::string& val) {
  this->poolPath = val;
__isset.poolPath = true;
}

uint32_t WMAlterPoolRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pool.read(iprot);
          this->__isset.pool = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->poolPath);
          this->__isset.poolPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMAlterPoolRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMAlterPoolRequest");

  if (this->__isset.pool) {
    xfer += oprot->writeFieldBegin("pool", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->pool.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.poolPath) {
    xfer += oprot->writeFieldBegin("poolPath", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->poolPath);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMAlterPoolRequest &a, WMAlterPoolRequest &b) {
  using ::std::swap;
  swap(a.pool, b.pool);
  swap(a.poolPath, b.poolPath);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMAlterPoolRequest::WMAlterPoolRequest(const WMAlterPoolRequest& other1069) {
  pool = other1069.pool;
  poolPath = other1069.poolPath;
  __isset = other1069.__isset;
}
WMAlterPoolRequest& WMAlterPoolRequest::operator=(const WMAlterPoolRequest& other1070) {
  pool = other1070.pool;
  poolPath = other1070.poolPath;
  __isset = other1070.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMAlterPoolRequest::WMAlterPoolRequest(const WMAlterPoolRequest& other1045) {
  pool = other1045.pool;
  poolPath = other1045.poolPath;
  __isset = other1045.__isset;
}
WMAlterPoolRequest& WMAlterPoolRequest::operator=(const WMAlterPoolRequest& other1046) {
  pool = other1046.pool;
  poolPath = other1046.poolPath;
  __isset = other1046.__isset;
=======
WMAlterPoolRequest::WMAlterPoolRequest(const WMAlterPoolRequest& other1003) {
  pool = other1003.pool;
  poolPath = other1003.poolPath;
  __isset = other1003.__isset;
}
=======
WMAlterPoolRequest::WMAlterPoolRequest(const WMAlterPoolRequest& other1003) {
  pool = other1003.pool;
  poolPath = other1003.poolPath;
  __isset = other1003.__isset;
}
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMAlterPoolRequest& WMAlterPoolRequest::operator=(const WMAlterPoolRequest& other1004) {
  pool = other1004.pool;
  poolPath = other1004.poolPath;
  __isset = other1004.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMAlterPoolRequest::WMAlterPoolRequest(const WMAlterPoolRequest& other1007) {
  pool = other1007.pool;
  poolPath = other1007.poolPath;
  __isset = other1007.__isset;
}
=======
WMAlterPoolRequest::WMAlterPoolRequest(const WMAlterPoolRequest& other1007) {
  pool = other1007.pool;
  poolPath = other1007.poolPath;
  __isset = other1007.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMAlterPoolRequest& WMAlterPoolRequest::operator=(const WMAlterPoolRequest& other1008) {
  pool = other1008.pool;
  poolPath = other1008.poolPath;
  __isset = other1008.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMAlterPoolRequest::WMAlterPoolRequest(const WMAlterPoolRequest& other1049) {
  pool = other1049.pool;
  poolPath = other1049.poolPath;
  __isset = other1049.__isset;
}
WMAlterPoolRequest& WMAlterPoolRequest::operator=(const WMAlterPoolRequest& other1050) {
  pool = other1050.pool;
  poolPath = other1050.poolPath;
  __isset = other1050.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMAlterPoolRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMAlterPoolRequest(";
  out << "pool="; (__isset.pool ? (out << to_string(pool)) : (out << "<null>"));
  out << ", " << "poolPath="; (__isset.poolPath ? (out << to_string(poolPath)) : (out << "<null>"));
  out << ")";
}


WMAlterPoolResponse::~WMAlterPoolResponse() throw() {
}


uint32_t WMAlterPoolResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMAlterPoolResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMAlterPoolResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMAlterPoolResponse &a, WMAlterPoolResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
WMAlterPoolResponse::WMAlterPoolResponse(const WMAlterPoolResponse& other1071) {
  (void) other1071;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(const WMAlterPoolResponse& other1072) {
  (void) other1072;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMAlterPoolResponse::WMAlterPoolResponse(const WMAlterPoolResponse& other1047) {
  (void) other1047;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(const WMAlterPoolResponse& other1048) {
  (void) other1048;
=======
WMAlterPoolResponse::WMAlterPoolResponse(const WMAlterPoolResponse& other1005) {
  (void) other1005;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(const WMAlterPoolResponse& other1006) {
  (void) other1006;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMAlterPoolResponse::WMAlterPoolResponse(const WMAlterPoolResponse& other1009) {
  (void) other1009;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(const WMAlterPoolResponse& other1010) {
  (void) other1010;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMAlterPoolResponse::WMAlterPoolResponse(const WMAlterPoolResponse& other1005) {
  (void) other1005;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(const WMAlterPoolResponse& other1006) {
  (void) other1006;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMAlterPoolResponse::WMAlterPoolResponse(const WMAlterPoolResponse& other1009) {
  (void) other1009;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(const WMAlterPoolResponse& other1010) {
  (void) other1010;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMAlterPoolResponse::WMAlterPoolResponse(const WMAlterPoolResponse& other1051) {
  (void) other1051;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(const WMAlterPoolResponse& other1052) {
  (void) other1052;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMAlterPoolResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMAlterPoolResponse(";
  out << ")";
}


WMDropPoolRequest::~WMDropPoolRequest() throw() {
}


void WMDropPoolRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

void WMDropPoolRequest::__set_poolPath(const std::string& val) {
  this->poolPath = val;
__isset.poolPath = true;
}

uint32_t WMDropPoolRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          this->__isset.resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->poolPath);
          this->__isset.poolPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMDropPoolRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMDropPoolRequest");

  if (this->__isset.resourcePlanName) {
    xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->resourcePlanName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.poolPath) {
    xfer += oprot->writeFieldBegin("poolPath", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->poolPath);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMDropPoolRequest &a, WMDropPoolRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.poolPath, b.poolPath);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMDropPoolRequest::WMDropPoolRequest(const WMDropPoolRequest& other1073) {
  resourcePlanName = other1073.resourcePlanName;
  poolPath = other1073.poolPath;
  __isset = other1073.__isset;
}
WMDropPoolRequest& WMDropPoolRequest::operator=(const WMDropPoolRequest& other1074) {
  resourcePlanName = other1074.resourcePlanName;
  poolPath = other1074.poolPath;
  __isset = other1074.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropPoolRequest::WMDropPoolRequest(const WMDropPoolRequest& other1049) {
  resourcePlanName = other1049.resourcePlanName;
  poolPath = other1049.poolPath;
  __isset = other1049.__isset;
}
WMDropPoolRequest& WMDropPoolRequest::operator=(const WMDropPoolRequest& other1050) {
  resourcePlanName = other1050.resourcePlanName;
  poolPath = other1050.poolPath;
  __isset = other1050.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMDropPoolRequest::WMDropPoolRequest(const WMDropPoolRequest& other1007) {
  resourcePlanName = other1007.resourcePlanName;
  poolPath = other1007.poolPath;
  __isset = other1007.__isset;
}
WMDropPoolRequest& WMDropPoolRequest::operator=(const WMDropPoolRequest& other1008) {
  resourcePlanName = other1008.resourcePlanName;
  poolPath = other1008.poolPath;
  __isset = other1008.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropPoolRequest::WMDropPoolRequest(const WMDropPoolRequest& other1011) {
  resourcePlanName = other1011.resourcePlanName;
  poolPath = other1011.poolPath;
  __isset = other1011.__isset;
}
=======
WMDropPoolRequest::WMDropPoolRequest(const WMDropPoolRequest& other1011) {
  resourcePlanName = other1011.resourcePlanName;
  poolPath = other1011.poolPath;
  __isset = other1011.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMDropPoolRequest& WMDropPoolRequest::operator=(const WMDropPoolRequest& other1012) {
  resourcePlanName = other1012.resourcePlanName;
  poolPath = other1012.poolPath;
  __isset = other1012.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMDropPoolRequest::WMDropPoolRequest(const WMDropPoolRequest& other1053) {
  resourcePlanName = other1053.resourcePlanName;
  poolPath = other1053.poolPath;
  __isset = other1053.__isset;
}
WMDropPoolRequest& WMDropPoolRequest::operator=(const WMDropPoolRequest& other1054) {
  resourcePlanName = other1054.resourcePlanName;
  poolPath = other1054.poolPath;
  __isset = other1054.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMDropPoolRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropPoolRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ", " << "poolPath="; (__isset.poolPath ? (out << to_string(poolPath)) : (out << "<null>"));
  out << ")";
}


WMDropPoolResponse::~WMDropPoolResponse() throw() {
}


uint32_t WMDropPoolResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMDropPoolResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMDropPoolResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMDropPoolResponse &a, WMDropPoolResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
WMDropPoolResponse::WMDropPoolResponse(const WMDropPoolResponse& other1075) {
  (void) other1075;
}
WMDropPoolResponse& WMDropPoolResponse::operator=(const WMDropPoolResponse& other1076) {
  (void) other1076;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropPoolResponse::WMDropPoolResponse(const WMDropPoolResponse& other1051) {
  (void) other1051;
}
WMDropPoolResponse& WMDropPoolResponse::operator=(const WMDropPoolResponse& other1052) {
  (void) other1052;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMDropPoolResponse::WMDropPoolResponse(const WMDropPoolResponse& other1009) {
  (void) other1009;
}
WMDropPoolResponse& WMDropPoolResponse::operator=(const WMDropPoolResponse& other1010) {
  (void) other1010;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropPoolResponse::WMDropPoolResponse(const WMDropPoolResponse& other1013) {
  (void) other1013;
}
WMDropPoolResponse& WMDropPoolResponse::operator=(const WMDropPoolResponse& other1014) {
  (void) other1014;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropPoolResponse::WMDropPoolResponse(const WMDropPoolResponse& other1013) {
  (void) other1013;
}
WMDropPoolResponse& WMDropPoolResponse::operator=(const WMDropPoolResponse& other1014) {
  (void) other1014;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMDropPoolResponse::WMDropPoolResponse(const WMDropPoolResponse& other1055) {
  (void) other1055;
}
WMDropPoolResponse& WMDropPoolResponse::operator=(const WMDropPoolResponse& other1056) {
  (void) other1056;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMDropPoolResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropPoolResponse(";
  out << ")";
}


WMCreateOrUpdateMappingRequest::~WMCreateOrUpdateMappingRequest() throw() {
}


void WMCreateOrUpdateMappingRequest::__set_mapping(const WMMapping& val) {
  this->mapping = val;
__isset.mapping = true;
}

void WMCreateOrUpdateMappingRequest::__set_update(const bool val) {
  this->update = val;
__isset.update = true;
}

uint32_t WMCreateOrUpdateMappingRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mapping.read(iprot);
          this->__isset.mapping = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->update);
          this->__isset.update = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreateOrUpdateMappingRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreateOrUpdateMappingRequest");

  if (this->__isset.mapping) {
    xfer += oprot->writeFieldBegin("mapping", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->mapping.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.update) {
    xfer += oprot->writeFieldBegin("update", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->update);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreateOrUpdateMappingRequest &a, WMCreateOrUpdateMappingRequest &b) {
  using ::std::swap;
  swap(a.mapping, b.mapping);
  swap(a.update, b.update);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMCreateOrUpdateMappingRequest::WMCreateOrUpdateMappingRequest(const WMCreateOrUpdateMappingRequest& other1077) {
  mapping = other1077.mapping;
  update = other1077.update;
  __isset = other1077.__isset;
}
WMCreateOrUpdateMappingRequest& WMCreateOrUpdateMappingRequest::operator=(const WMCreateOrUpdateMappingRequest& other1078) {
  mapping = other1078.mapping;
  update = other1078.update;
  __isset = other1078.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateOrUpdateMappingRequest::WMCreateOrUpdateMappingRequest(const WMCreateOrUpdateMappingRequest& other1053) {
  mapping = other1053.mapping;
  update = other1053.update;
  __isset = other1053.__isset;
}
WMCreateOrUpdateMappingRequest& WMCreateOrUpdateMappingRequest::operator=(const WMCreateOrUpdateMappingRequest& other1054) {
  mapping = other1054.mapping;
  update = other1054.update;
  __isset = other1054.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMCreateOrUpdateMappingRequest::WMCreateOrUpdateMappingRequest(const WMCreateOrUpdateMappingRequest& other1011) {
  mapping = other1011.mapping;
  update = other1011.update;
  __isset = other1011.__isset;
}
WMCreateOrUpdateMappingRequest& WMCreateOrUpdateMappingRequest::operator=(const WMCreateOrUpdateMappingRequest& other1012) {
  mapping = other1012.mapping;
  update = other1012.update;
  __isset = other1012.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateOrUpdateMappingRequest::WMCreateOrUpdateMappingRequest(const WMCreateOrUpdateMappingRequest& other1015) {
  mapping = other1015.mapping;
  update = other1015.update;
  __isset = other1015.__isset;
}
=======
WMCreateOrUpdateMappingRequest::WMCreateOrUpdateMappingRequest(const WMCreateOrUpdateMappingRequest& other1015) {
  mapping = other1015.mapping;
  update = other1015.update;
  __isset = other1015.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMCreateOrUpdateMappingRequest& WMCreateOrUpdateMappingRequest::operator=(const WMCreateOrUpdateMappingRequest& other1016) {
  mapping = other1016.mapping;
  update = other1016.update;
  __isset = other1016.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreateOrUpdateMappingRequest::WMCreateOrUpdateMappingRequest(const WMCreateOrUpdateMappingRequest& other1057) {
  mapping = other1057.mapping;
  update = other1057.update;
  __isset = other1057.__isset;
}
WMCreateOrUpdateMappingRequest& WMCreateOrUpdateMappingRequest::operator=(const WMCreateOrUpdateMappingRequest& other1058) {
  mapping = other1058.mapping;
  update = other1058.update;
  __isset = other1058.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMCreateOrUpdateMappingRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateOrUpdateMappingRequest(";
  out << "mapping="; (__isset.mapping ? (out << to_string(mapping)) : (out << "<null>"));
  out << ", " << "update="; (__isset.update ? (out << to_string(update)) : (out << "<null>"));
  out << ")";
}


WMCreateOrUpdateMappingResponse::~WMCreateOrUpdateMappingResponse() throw() {
}


uint32_t WMCreateOrUpdateMappingResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreateOrUpdateMappingResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreateOrUpdateMappingResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreateOrUpdateMappingResponse &a, WMCreateOrUpdateMappingResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse& other1079) {
  (void) other1079;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(const WMCreateOrUpdateMappingResponse& other1080) {
  (void) other1080;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse& other1055) {
  (void) other1055;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(const WMCreateOrUpdateMappingResponse& other1056) {
  (void) other1056;
=======
WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse& other1013) {
  (void) other1013;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(const WMCreateOrUpdateMappingResponse& other1014) {
  (void) other1014;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse& other1017) {
  (void) other1017;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(const WMCreateOrUpdateMappingResponse& other1018) {
  (void) other1018;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse& other1013) {
  (void) other1013;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(const WMCreateOrUpdateMappingResponse& other1014) {
  (void) other1014;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse& other1017) {
  (void) other1017;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(const WMCreateOrUpdateMappingResponse& other1018) {
  (void) other1018;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse& other1059) {
  (void) other1059;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(const WMCreateOrUpdateMappingResponse& other1060) {
  (void) other1060;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMCreateOrUpdateMappingResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateOrUpdateMappingResponse(";
  out << ")";
}


WMDropMappingRequest::~WMDropMappingRequest() throw() {
}


void WMDropMappingRequest::__set_mapping(const WMMapping& val) {
  this->mapping = val;
__isset.mapping = true;
}

uint32_t WMDropMappingRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mapping.read(iprot);
          this->__isset.mapping = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMDropMappingRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMDropMappingRequest");

  if (this->__isset.mapping) {
    xfer += oprot->writeFieldBegin("mapping", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->mapping.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMDropMappingRequest &a, WMDropMappingRequest &b) {
  using ::std::swap;
  swap(a.mapping, b.mapping);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMDropMappingRequest::WMDropMappingRequest(const WMDropMappingRequest& other1081) {
  mapping = other1081.mapping;
  __isset = other1081.__isset;
}
WMDropMappingRequest& WMDropMappingRequest::operator=(const WMDropMappingRequest& other1082) {
  mapping = other1082.mapping;
  __isset = other1082.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropMappingRequest::WMDropMappingRequest(const WMDropMappingRequest& other1057) {
  mapping = other1057.mapping;
  __isset = other1057.__isset;
}
WMDropMappingRequest& WMDropMappingRequest::operator=(const WMDropMappingRequest& other1058) {
  mapping = other1058.mapping;
  __isset = other1058.__isset;
=======
WMDropMappingRequest::WMDropMappingRequest(const WMDropMappingRequest& other1015) {
  mapping = other1015.mapping;
  __isset = other1015.__isset;
}
WMDropMappingRequest& WMDropMappingRequest::operator=(const WMDropMappingRequest& other1016) {
  mapping = other1016.mapping;
  __isset = other1016.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropMappingRequest::WMDropMappingRequest(const WMDropMappingRequest& other1019) {
  mapping = other1019.mapping;
  __isset = other1019.__isset;
}
WMDropMappingRequest& WMDropMappingRequest::operator=(const WMDropMappingRequest& other1020) {
  mapping = other1020.mapping;
  __isset = other1020.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMDropMappingRequest::WMDropMappingRequest(const WMDropMappingRequest& other1015) {
  mapping = other1015.mapping;
  __isset = other1015.__isset;
}
WMDropMappingRequest& WMDropMappingRequest::operator=(const WMDropMappingRequest& other1016) {
  mapping = other1016.mapping;
  __isset = other1016.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropMappingRequest::WMDropMappingRequest(const WMDropMappingRequest& other1019) {
  mapping = other1019.mapping;
  __isset = other1019.__isset;
}
WMDropMappingRequest& WMDropMappingRequest::operator=(const WMDropMappingRequest& other1020) {
  mapping = other1020.mapping;
  __isset = other1020.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMDropMappingRequest::WMDropMappingRequest(const WMDropMappingRequest& other1061) {
  mapping = other1061.mapping;
  __isset = other1061.__isset;
}
WMDropMappingRequest& WMDropMappingRequest::operator=(const WMDropMappingRequest& other1062) {
  mapping = other1062.mapping;
  __isset = other1062.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMDropMappingRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropMappingRequest(";
  out << "mapping="; (__isset.mapping ? (out << to_string(mapping)) : (out << "<null>"));
  out << ")";
}


WMDropMappingResponse::~WMDropMappingResponse() throw() {
}


uint32_t WMDropMappingResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMDropMappingResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMDropMappingResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMDropMappingResponse &a, WMDropMappingResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1083) {
  (void) other1083;
}
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1084) {
  (void) other1084;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1059) {
  (void) other1059;
}
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1060) {
  (void) other1060;
=======
WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1017) {
  (void) other1017;
}
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1018) {
  (void) other1018;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1021) {
  (void) other1021;
}
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1022) {
  (void) other1022;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1017) {
  (void) other1017;
}
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1018) {
  (void) other1018;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1021) {
  (void) other1021;
}
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1022) {
  (void) other1022;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1063) {
  (void) other1063;
}
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1064) {
  (void) other1064;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMDropMappingResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropMappingResponse(";
  out << ")";
}


WMCreateOrDropTriggerToPoolMappingRequest::~WMCreateOrDropTriggerToPoolMappingRequest() throw() {
}


void WMCreateOrDropTriggerToPoolMappingRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

void WMCreateOrDropTriggerToPoolMappingRequest::__set_triggerName(const std::string& val) {
  this->triggerName = val;
__isset.triggerName = true;
}

void WMCreateOrDropTriggerToPoolMappingRequest::__set_poolPath(const std::string& val) {
  this->poolPath = val;
__isset.poolPath = true;
}

void WMCreateOrDropTriggerToPoolMappingRequest::__set_drop(const bool val) {
  this->drop = val;
__isset.drop = true;
}

uint32_t WMCreateOrDropTriggerToPoolMappingRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resourcePlanName);
          this->__isset.resourcePlanName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->triggerName);
          this->__isset.triggerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->poolPath);
          this->__isset.poolPath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->drop);
          this->__isset.drop = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreateOrDropTriggerToPoolMappingRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreateOrDropTriggerToPoolMappingRequest");

  if (this->__isset.resourcePlanName) {
    xfer += oprot->writeFieldBegin("resourcePlanName", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->resourcePlanName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.triggerName) {
    xfer += oprot->writeFieldBegin("triggerName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->triggerName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.poolPath) {
    xfer += oprot->writeFieldBegin("poolPath", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->poolPath);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.drop) {
    xfer += oprot->writeFieldBegin("drop", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->drop);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreateOrDropTriggerToPoolMappingRequest &a, WMCreateOrDropTriggerToPoolMappingRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.triggerName, b.triggerName);
  swap(a.poolPath, b.poolPath);
  swap(a.drop, b.drop);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
WMCreateOrDropTriggerToPoolMappingRequest::WMCreateOrDropTriggerToPoolMappingRequest(const WMCreateOrDropTriggerToPoolMappingRequest& other1085) {
  resourcePlanName = other1085.resourcePlanName;
  triggerName = other1085.triggerName;
  poolPath = other1085.poolPath;
  drop = other1085.drop;
  __isset = other1085.__isset;
}
WMCreateOrDropTriggerToPoolMappingRequest& WMCreateOrDropTriggerToPoolMappingRequest::operator=(const WMCreateOrDropTriggerToPoolMappingRequest& other1086) {
  resourcePlanName = other1086.resourcePlanName;
  triggerName = other1086.triggerName;
  poolPath = other1086.poolPath;
  drop = other1086.drop;
  __isset = other1086.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateOrDropTriggerToPoolMappingRequest::WMCreateOrDropTriggerToPoolMappingRequest(const WMCreateOrDropTriggerToPoolMappingRequest& other1061) {
  resourcePlanName = other1061.resourcePlanName;
  triggerName = other1061.triggerName;
  poolPath = other1061.poolPath;
  drop = other1061.drop;
  __isset = other1061.__isset;
}
WMCreateOrDropTriggerToPoolMappingRequest& WMCreateOrDropTriggerToPoolMappingRequest::operator=(const WMCreateOrDropTriggerToPoolMappingRequest& other1062) {
  resourcePlanName = other1062.resourcePlanName;
  triggerName = other1062.triggerName;
  poolPath = other1062.poolPath;
  drop = other1062.drop;
  __isset = other1062.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMCreateOrDropTriggerToPoolMappingRequest::WMCreateOrDropTriggerToPoolMappingRequest(const WMCreateOrDropTriggerToPoolMappingRequest& other1019) {
  resourcePlanName = other1019.resourcePlanName;
  triggerName = other1019.triggerName;
  poolPath = other1019.poolPath;
  drop = other1019.drop;
  __isset = other1019.__isset;
}
WMCreateOrDropTriggerToPoolMappingRequest& WMCreateOrDropTriggerToPoolMappingRequest::operator=(const WMCreateOrDropTriggerToPoolMappingRequest& other1020) {
  resourcePlanName = other1020.resourcePlanName;
  triggerName = other1020.triggerName;
  poolPath = other1020.poolPath;
  drop = other1020.drop;
  __isset = other1020.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateOrDropTriggerToPoolMappingRequest::WMCreateOrDropTriggerToPoolMappingRequest(const WMCreateOrDropTriggerToPoolMappingRequest& other1023) {
  resourcePlanName = other1023.resourcePlanName;
  triggerName = other1023.triggerName;
  poolPath = other1023.poolPath;
  drop = other1023.drop;
  __isset = other1023.__isset;
}
=======
WMCreateOrDropTriggerToPoolMappingRequest::WMCreateOrDropTriggerToPoolMappingRequest(const WMCreateOrDropTriggerToPoolMappingRequest& other1023) {
  resourcePlanName = other1023.resourcePlanName;
  triggerName = other1023.triggerName;
  poolPath = other1023.poolPath;
  drop = other1023.drop;
  __isset = other1023.__isset;
}
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
WMCreateOrDropTriggerToPoolMappingRequest& WMCreateOrDropTriggerToPoolMappingRequest::operator=(const WMCreateOrDropTriggerToPoolMappingRequest& other1024) {
  resourcePlanName = other1024.resourcePlanName;
  triggerName = other1024.triggerName;
  poolPath = other1024.poolPath;
  drop = other1024.drop;
  __isset = other1024.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreateOrDropTriggerToPoolMappingRequest::WMCreateOrDropTriggerToPoolMappingRequest(const WMCreateOrDropTriggerToPoolMappingRequest& other1065) {
  resourcePlanName = other1065.resourcePlanName;
  triggerName = other1065.triggerName;
  poolPath = other1065.poolPath;
  drop = other1065.drop;
  __isset = other1065.__isset;
}
WMCreateOrDropTriggerToPoolMappingRequest& WMCreateOrDropTriggerToPoolMappingRequest::operator=(const WMCreateOrDropTriggerToPoolMappingRequest& other1066) {
  resourcePlanName = other1066.resourcePlanName;
  triggerName = other1066.triggerName;
  poolPath = other1066.poolPath;
  drop = other1066.drop;
  __isset = other1066.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMCreateOrDropTriggerToPoolMappingRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateOrDropTriggerToPoolMappingRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ", " << "triggerName="; (__isset.triggerName ? (out << to_string(triggerName)) : (out << "<null>"));
  out << ", " << "poolPath="; (__isset.poolPath ? (out << to_string(poolPath)) : (out << "<null>"));
  out << ", " << "drop="; (__isset.drop ? (out << to_string(drop)) : (out << "<null>"));
  out << ")";
}


WMCreateOrDropTriggerToPoolMappingResponse::~WMCreateOrDropTriggerToPoolMappingResponse() throw() {
}


uint32_t WMCreateOrDropTriggerToPoolMappingResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WMCreateOrDropTriggerToPoolMappingResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WMCreateOrDropTriggerToPoolMappingResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WMCreateOrDropTriggerToPoolMappingResponse &a, WMCreateOrDropTriggerToPoolMappingResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

<<<<<<< HEAD
<<<<<<< HEAD
WMCreateOrDropTriggerToPoolMappingResponse::WMCreateOrDropTriggerToPoolMappingResponse(const WMCreateOrDropTriggerToPoolMappingResponse& other1087) {
  (void) other1087;
}
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(const WMCreateOrDropTriggerToPoolMappingResponse& other1088) {
  (void) other1088;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
WMCreateOrDropTriggerToPoolMappingResponse::WMCreateOrDropTriggerToPoolMappingResponse(const WMCreateOrDropTriggerToPoolMappingResponse& other1063) {
  (void) other1063;
}
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(const WMCreateOrDropTriggerToPoolMappingResponse& other1064) {
  (void) other1064;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
WMCreateOrDropTriggerToPoolMappingResponse::WMCreateOrDropTriggerToPoolMappingResponse(const WMCreateOrDropTriggerToPoolMappingResponse& other1021) {
  (void) other1021;
}
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(const WMCreateOrDropTriggerToPoolMappingResponse& other1022) {
  (void) other1022;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateOrDropTriggerToPoolMappingResponse::WMCreateOrDropTriggerToPoolMappingResponse(const WMCreateOrDropTriggerToPoolMappingResponse& other1025) {
  (void) other1025;
}
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(const WMCreateOrDropTriggerToPoolMappingResponse& other1026) {
  (void) other1026;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
WMCreateOrDropTriggerToPoolMappingResponse::WMCreateOrDropTriggerToPoolMappingResponse(const WMCreateOrDropTriggerToPoolMappingResponse& other1025) {
  (void) other1025;
}
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(const WMCreateOrDropTriggerToPoolMappingResponse& other1026) {
  (void) other1026;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
WMCreateOrDropTriggerToPoolMappingResponse::WMCreateOrDropTriggerToPoolMappingResponse(const WMCreateOrDropTriggerToPoolMappingResponse& other1067) {
  (void) other1067;
}
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(const WMCreateOrDropTriggerToPoolMappingResponse& other1068) {
  (void) other1068;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void WMCreateOrDropTriggerToPoolMappingResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateOrDropTriggerToPoolMappingResponse(";
  out << ")";
}


MetaException::~MetaException() throw() {
}


void MetaException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t MetaException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MetaException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MetaException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MetaException &a, MetaException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
MetaException::MetaException(const MetaException& other1089) : TException() {
  message = other1089.message;
  __isset = other1089.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1090) {
  message = other1090.message;
  __isset = other1090.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
MetaException::MetaException(const MetaException& other1065) : TException() {
  message = other1065.message;
  __isset = other1065.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1066) {
  message = other1066.message;
  __isset = other1066.__isset;
=======
MetaException::MetaException(const MetaException& other1023) : TException() {
  message = other1023.message;
  __isset = other1023.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1024) {
  message = other1024.message;
  __isset = other1024.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
MetaException::MetaException(const MetaException& other1027) : TException() {
  message = other1027.message;
  __isset = other1027.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1028) {
  message = other1028.message;
  __isset = other1028.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
MetaException::MetaException(const MetaException& other1023) : TException() {
  message = other1023.message;
  __isset = other1023.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1024) {
  message = other1024.message;
  __isset = other1024.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
MetaException::MetaException(const MetaException& other1027) : TException() {
  message = other1027.message;
  __isset = other1027.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1028) {
  message = other1028.message;
  __isset = other1028.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
MetaException::MetaException(const MetaException& other1069) : TException() {
  message = other1069.message;
  __isset = other1069.__isset;
}
MetaException& MetaException::operator=(const MetaException& other1070) {
  message = other1070.message;
  __isset = other1070.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void MetaException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MetaException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* MetaException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: MetaException";
  }
}


UnknownTableException::~UnknownTableException() throw() {
}


void UnknownTableException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t UnknownTableException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UnknownTableException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UnknownTableException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UnknownTableException &a, UnknownTableException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
UnknownTableException::UnknownTableException(const UnknownTableException& other1091) : TException() {
  message = other1091.message;
  __isset = other1091.__isset;
}
UnknownTableException& UnknownTableException::operator=(const UnknownTableException& other1092) {
  message = other1092.message;
  __isset = other1092.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
UnknownTableException::UnknownTableException(const UnknownTableException& other1067) : TException() {
  message = other1067.message;
  __isset = other1067.__isset;
}
UnknownTableException& UnknownTableException::operator=(const UnknownTableException& other1068) {
  message = other1068.message;
  __isset = other1068.__isset;
=======
UnknownTableException::UnknownTableException(const UnknownTableException& other1025) : TException() {
  message = other1025.message;
  __isset = other1025.__isset;
}
UnknownTableException& UnknownTableException::operator=(const UnknownTableException& other1026) {
  message = other1026.message;
  __isset = other1026.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
UnknownTableException::UnknownTableException(const UnknownTableException& other1029) : TException() {
  message = other1029.message;
  __isset = other1029.__isset;
}
UnknownTableException& UnknownTableException::operator=(const UnknownTableException& other1030) {
  message = other1030.message;
  __isset = other1030.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
UnknownTableException::UnknownTableException(const UnknownTableException& other1025) : TException() {
  message = other1025.message;
  __isset = other1025.__isset;
}
UnknownTableException& UnknownTableException::operator=(const UnknownTableException& other1026) {
  message = other1026.message;
  __isset = other1026.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
UnknownTableException::UnknownTableException(const UnknownTableException& other1029) : TException() {
  message = other1029.message;
  __isset = other1029.__isset;
}
UnknownTableException& UnknownTableException::operator=(const UnknownTableException& other1030) {
  message = other1030.message;
  __isset = other1030.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
UnknownTableException::UnknownTableException(const UnknownTableException& other1071) : TException() {
  message = other1071.message;
  __isset = other1071.__isset;
}
UnknownTableException& UnknownTableException::operator=(const UnknownTableException& other1072) {
  message = other1072.message;
  __isset = other1072.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void UnknownTableException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UnknownTableException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* UnknownTableException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: UnknownTableException";
  }
}


UnknownDBException::~UnknownDBException() throw() {
}


void UnknownDBException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t UnknownDBException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UnknownDBException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UnknownDBException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UnknownDBException &a, UnknownDBException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
UnknownDBException::UnknownDBException(const UnknownDBException& other1093) : TException() {
  message = other1093.message;
  __isset = other1093.__isset;
}
UnknownDBException& UnknownDBException::operator=(const UnknownDBException& other1094) {
  message = other1094.message;
  __isset = other1094.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
UnknownDBException::UnknownDBException(const UnknownDBException& other1069) : TException() {
  message = other1069.message;
  __isset = other1069.__isset;
}
UnknownDBException& UnknownDBException::operator=(const UnknownDBException& other1070) {
  message = other1070.message;
  __isset = other1070.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
UnknownDBException::UnknownDBException(const UnknownDBException& other1027) : TException() {
  message = other1027.message;
  __isset = other1027.__isset;
}
UnknownDBException& UnknownDBException::operator=(const UnknownDBException& other1028) {
  message = other1028.message;
  __isset = other1028.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
UnknownDBException::UnknownDBException(const UnknownDBException& other1031) : TException() {
  message = other1031.message;
  __isset = other1031.__isset;
}
UnknownDBException& UnknownDBException::operator=(const UnknownDBException& other1032) {
  message = other1032.message;
  __isset = other1032.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
UnknownDBException::UnknownDBException(const UnknownDBException& other1031) : TException() {
  message = other1031.message;
  __isset = other1031.__isset;
}
UnknownDBException& UnknownDBException::operator=(const UnknownDBException& other1032) {
  message = other1032.message;
  __isset = other1032.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
UnknownDBException::UnknownDBException(const UnknownDBException& other1073) : TException() {
  message = other1073.message;
  __isset = other1073.__isset;
}
UnknownDBException& UnknownDBException::operator=(const UnknownDBException& other1074) {
  message = other1074.message;
  __isset = other1074.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void UnknownDBException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UnknownDBException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* UnknownDBException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: UnknownDBException";
  }
}


AlreadyExistsException::~AlreadyExistsException() throw() {
}


void AlreadyExistsException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t AlreadyExistsException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AlreadyExistsException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AlreadyExistsException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AlreadyExistsException &a, AlreadyExistsException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
AlreadyExistsException::AlreadyExistsException(const AlreadyExistsException& other1095) : TException() {
  message = other1095.message;
  __isset = other1095.__isset;
}
AlreadyExistsException& AlreadyExistsException::operator=(const AlreadyExistsException& other1096) {
  message = other1096.message;
  __isset = other1096.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
AlreadyExistsException::AlreadyExistsException(const AlreadyExistsException& other1071) : TException() {
  message = other1071.message;
  __isset = other1071.__isset;
}
AlreadyExistsException& AlreadyExistsException::operator=(const AlreadyExistsException& other1072) {
  message = other1072.message;
  __isset = other1072.__isset;
=======
AlreadyExistsException::AlreadyExistsException(const AlreadyExistsException& other1029) : TException() {
  message = other1029.message;
  __isset = other1029.__isset;
}
AlreadyExistsException& AlreadyExistsException::operator=(const AlreadyExistsException& other1030) {
  message = other1030.message;
  __isset = other1030.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
AlreadyExistsException::AlreadyExistsException(const AlreadyExistsException& other1033) : TException() {
  message = other1033.message;
  __isset = other1033.__isset;
}
AlreadyExistsException& AlreadyExistsException::operator=(const AlreadyExistsException& other1034) {
  message = other1034.message;
  __isset = other1034.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
AlreadyExistsException::AlreadyExistsException(const AlreadyExistsException& other1029) : TException() {
  message = other1029.message;
  __isset = other1029.__isset;
}
AlreadyExistsException& AlreadyExistsException::operator=(const AlreadyExistsException& other1030) {
  message = other1030.message;
  __isset = other1030.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
AlreadyExistsException::AlreadyExistsException(const AlreadyExistsException& other1033) : TException() {
  message = other1033.message;
  __isset = other1033.__isset;
}
AlreadyExistsException& AlreadyExistsException::operator=(const AlreadyExistsException& other1034) {
  message = other1034.message;
  __isset = other1034.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
AlreadyExistsException::AlreadyExistsException(const AlreadyExistsException& other1075) : TException() {
  message = other1075.message;
  __isset = other1075.__isset;
}
AlreadyExistsException& AlreadyExistsException::operator=(const AlreadyExistsException& other1076) {
  message = other1076.message;
  __isset = other1076.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void AlreadyExistsException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AlreadyExistsException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* AlreadyExistsException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: AlreadyExistsException";
  }
}


InvalidPartitionException::~InvalidPartitionException() throw() {
}


void InvalidPartitionException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t InvalidPartitionException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidPartitionException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InvalidPartitionException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidPartitionException &a, InvalidPartitionException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
InvalidPartitionException::InvalidPartitionException(const InvalidPartitionException& other1097) : TException() {
  message = other1097.message;
  __isset = other1097.__isset;
}
InvalidPartitionException& InvalidPartitionException::operator=(const InvalidPartitionException& other1098) {
  message = other1098.message;
  __isset = other1098.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
InvalidPartitionException::InvalidPartitionException(const InvalidPartitionException& other1073) : TException() {
  message = other1073.message;
  __isset = other1073.__isset;
}
InvalidPartitionException& InvalidPartitionException::operator=(const InvalidPartitionException& other1074) {
  message = other1074.message;
  __isset = other1074.__isset;
=======
InvalidPartitionException::InvalidPartitionException(const InvalidPartitionException& other1031) : TException() {
  message = other1031.message;
  __isset = other1031.__isset;
}
InvalidPartitionException& InvalidPartitionException::operator=(const InvalidPartitionException& other1032) {
  message = other1032.message;
  __isset = other1032.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
InvalidPartitionException::InvalidPartitionException(const InvalidPartitionException& other1035) : TException() {
  message = other1035.message;
  __isset = other1035.__isset;
}
InvalidPartitionException& InvalidPartitionException::operator=(const InvalidPartitionException& other1036) {
  message = other1036.message;
  __isset = other1036.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
InvalidPartitionException::InvalidPartitionException(const InvalidPartitionException& other1031) : TException() {
  message = other1031.message;
  __isset = other1031.__isset;
}
InvalidPartitionException& InvalidPartitionException::operator=(const InvalidPartitionException& other1032) {
  message = other1032.message;
  __isset = other1032.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
InvalidPartitionException::InvalidPartitionException(const InvalidPartitionException& other1035) : TException() {
  message = other1035.message;
  __isset = other1035.__isset;
}
InvalidPartitionException& InvalidPartitionException::operator=(const InvalidPartitionException& other1036) {
  message = other1036.message;
  __isset = other1036.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
InvalidPartitionException::InvalidPartitionException(const InvalidPartitionException& other1077) : TException() {
  message = other1077.message;
  __isset = other1077.__isset;
}
InvalidPartitionException& InvalidPartitionException::operator=(const InvalidPartitionException& other1078) {
  message = other1078.message;
  __isset = other1078.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void InvalidPartitionException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidPartitionException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* InvalidPartitionException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidPartitionException";
  }
}


UnknownPartitionException::~UnknownPartitionException() throw() {
}


void UnknownPartitionException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t UnknownPartitionException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UnknownPartitionException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UnknownPartitionException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UnknownPartitionException &a, UnknownPartitionException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
UnknownPartitionException::UnknownPartitionException(const UnknownPartitionException& other1099) : TException() {
  message = other1099.message;
  __isset = other1099.__isset;
}
UnknownPartitionException& UnknownPartitionException::operator=(const UnknownPartitionException& other1100) {
  message = other1100.message;
  __isset = other1100.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
UnknownPartitionException::UnknownPartitionException(const UnknownPartitionException& other1075) : TException() {
  message = other1075.message;
  __isset = other1075.__isset;
}
UnknownPartitionException& UnknownPartitionException::operator=(const UnknownPartitionException& other1076) {
  message = other1076.message;
  __isset = other1076.__isset;
=======
UnknownPartitionException::UnknownPartitionException(const UnknownPartitionException& other1033) : TException() {
  message = other1033.message;
  __isset = other1033.__isset;
}
UnknownPartitionException& UnknownPartitionException::operator=(const UnknownPartitionException& other1034) {
  message = other1034.message;
  __isset = other1034.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
UnknownPartitionException::UnknownPartitionException(const UnknownPartitionException& other1037) : TException() {
  message = other1037.message;
  __isset = other1037.__isset;
}
UnknownPartitionException& UnknownPartitionException::operator=(const UnknownPartitionException& other1038) {
  message = other1038.message;
  __isset = other1038.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
UnknownPartitionException::UnknownPartitionException(const UnknownPartitionException& other1033) : TException() {
  message = other1033.message;
  __isset = other1033.__isset;
}
UnknownPartitionException& UnknownPartitionException::operator=(const UnknownPartitionException& other1034) {
  message = other1034.message;
  __isset = other1034.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
UnknownPartitionException::UnknownPartitionException(const UnknownPartitionException& other1037) : TException() {
  message = other1037.message;
  __isset = other1037.__isset;
}
UnknownPartitionException& UnknownPartitionException::operator=(const UnknownPartitionException& other1038) {
  message = other1038.message;
  __isset = other1038.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
UnknownPartitionException::UnknownPartitionException(const UnknownPartitionException& other1079) : TException() {
  message = other1079.message;
  __isset = other1079.__isset;
}
UnknownPartitionException& UnknownPartitionException::operator=(const UnknownPartitionException& other1080) {
  message = other1080.message;
  __isset = other1080.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void UnknownPartitionException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UnknownPartitionException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* UnknownPartitionException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: UnknownPartitionException";
  }
}


InvalidObjectException::~InvalidObjectException() throw() {
}


void InvalidObjectException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t InvalidObjectException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidObjectException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InvalidObjectException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidObjectException &a, InvalidObjectException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
InvalidObjectException::InvalidObjectException(const InvalidObjectException& other1101) : TException() {
  message = other1101.message;
  __isset = other1101.__isset;
}
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other1102) {
  message = other1102.message;
  __isset = other1102.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
InvalidObjectException::InvalidObjectException(const InvalidObjectException& other1077) : TException() {
  message = other1077.message;
  __isset = other1077.__isset;
}
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other1078) {
  message = other1078.message;
  __isset = other1078.__isset;
=======
InvalidObjectException::InvalidObjectException(const InvalidObjectException& other1035) : TException() {
  message = other1035.message;
  __isset = other1035.__isset;
}
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other1036) {
  message = other1036.message;
  __isset = other1036.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
InvalidObjectException::InvalidObjectException(const InvalidObjectException& other1039) : TException() {
  message = other1039.message;
  __isset = other1039.__isset;
}
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other1040) {
  message = other1040.message;
  __isset = other1040.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
InvalidObjectException::InvalidObjectException(const InvalidObjectException& other1035) : TException() {
  message = other1035.message;
  __isset = other1035.__isset;
}
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other1036) {
  message = other1036.message;
  __isset = other1036.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
InvalidObjectException::InvalidObjectException(const InvalidObjectException& other1039) : TException() {
  message = other1039.message;
  __isset = other1039.__isset;
}
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other1040) {
  message = other1040.message;
  __isset = other1040.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
InvalidObjectException::InvalidObjectException(const InvalidObjectException& other1081) : TException() {
  message = other1081.message;
  __isset = other1081.__isset;
}
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other1082) {
  message = other1082.message;
  __isset = other1082.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void InvalidObjectException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidObjectException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* InvalidObjectException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidObjectException";
  }
}


NoSuchObjectException::~NoSuchObjectException() throw() {
}


void NoSuchObjectException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t NoSuchObjectException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NoSuchObjectException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NoSuchObjectException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NoSuchObjectException &a, NoSuchObjectException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
NoSuchObjectException::NoSuchObjectException(const NoSuchObjectException& other1103) : TException() {
  message = other1103.message;
  __isset = other1103.__isset;
}
NoSuchObjectException& NoSuchObjectException::operator=(const NoSuchObjectException& other1104) {
  message = other1104.message;
  __isset = other1104.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NoSuchObjectException::NoSuchObjectException(const NoSuchObjectException& other1079) : TException() {
  message = other1079.message;
  __isset = other1079.__isset;
}
NoSuchObjectException& NoSuchObjectException::operator=(const NoSuchObjectException& other1080) {
  message = other1080.message;
  __isset = other1080.__isset;
=======
NoSuchObjectException::NoSuchObjectException(const NoSuchObjectException& other1037) : TException() {
  message = other1037.message;
  __isset = other1037.__isset;
}
NoSuchObjectException& NoSuchObjectException::operator=(const NoSuchObjectException& other1038) {
  message = other1038.message;
  __isset = other1038.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NoSuchObjectException::NoSuchObjectException(const NoSuchObjectException& other1041) : TException() {
  message = other1041.message;
  __isset = other1041.__isset;
}
NoSuchObjectException& NoSuchObjectException::operator=(const NoSuchObjectException& other1042) {
  message = other1042.message;
  __isset = other1042.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
NoSuchObjectException::NoSuchObjectException(const NoSuchObjectException& other1037) : TException() {
  message = other1037.message;
  __isset = other1037.__isset;
}
NoSuchObjectException& NoSuchObjectException::operator=(const NoSuchObjectException& other1038) {
  message = other1038.message;
  __isset = other1038.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NoSuchObjectException::NoSuchObjectException(const NoSuchObjectException& other1041) : TException() {
  message = other1041.message;
  __isset = other1041.__isset;
}
NoSuchObjectException& NoSuchObjectException::operator=(const NoSuchObjectException& other1042) {
  message = other1042.message;
  __isset = other1042.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
NoSuchObjectException::NoSuchObjectException(const NoSuchObjectException& other1083) : TException() {
  message = other1083.message;
  __isset = other1083.__isset;
}
NoSuchObjectException& NoSuchObjectException::operator=(const NoSuchObjectException& other1084) {
  message = other1084.message;
  __isset = other1084.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void NoSuchObjectException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NoSuchObjectException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* NoSuchObjectException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: NoSuchObjectException";
  }
}


IndexAlreadyExistsException::~IndexAlreadyExistsException() throw() {
}


void IndexAlreadyExistsException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t IndexAlreadyExistsException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IndexAlreadyExistsException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IndexAlreadyExistsException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IndexAlreadyExistsException &a, IndexAlreadyExistsException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
IndexAlreadyExistsException::IndexAlreadyExistsException(const IndexAlreadyExistsException& other1105) : TException() {
  message = other1105.message;
  __isset = other1105.__isset;
}
IndexAlreadyExistsException& IndexAlreadyExistsException::operator=(const IndexAlreadyExistsException& other1106) {
  message = other1106.message;
  __isset = other1106.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
IndexAlreadyExistsException::IndexAlreadyExistsException(const IndexAlreadyExistsException& other1081) : TException() {
  message = other1081.message;
  __isset = other1081.__isset;
}
IndexAlreadyExistsException& IndexAlreadyExistsException::operator=(const IndexAlreadyExistsException& other1082) {
  message = other1082.message;
  __isset = other1082.__isset;
=======
IndexAlreadyExistsException::IndexAlreadyExistsException(const IndexAlreadyExistsException& other1039) : TException() {
  message = other1039.message;
  __isset = other1039.__isset;
}
IndexAlreadyExistsException& IndexAlreadyExistsException::operator=(const IndexAlreadyExistsException& other1040) {
  message = other1040.message;
  __isset = other1040.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
IndexAlreadyExistsException::IndexAlreadyExistsException(const IndexAlreadyExistsException& other1043) : TException() {
  message = other1043.message;
  __isset = other1043.__isset;
}
IndexAlreadyExistsException& IndexAlreadyExistsException::operator=(const IndexAlreadyExistsException& other1044) {
  message = other1044.message;
  __isset = other1044.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
IndexAlreadyExistsException::IndexAlreadyExistsException(const IndexAlreadyExistsException& other1039) : TException() {
  message = other1039.message;
  __isset = other1039.__isset;
}
IndexAlreadyExistsException& IndexAlreadyExistsException::operator=(const IndexAlreadyExistsException& other1040) {
  message = other1040.message;
  __isset = other1040.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
IndexAlreadyExistsException::IndexAlreadyExistsException(const IndexAlreadyExistsException& other1043) : TException() {
  message = other1043.message;
  __isset = other1043.__isset;
}
IndexAlreadyExistsException& IndexAlreadyExistsException::operator=(const IndexAlreadyExistsException& other1044) {
  message = other1044.message;
  __isset = other1044.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
IndexAlreadyExistsException::IndexAlreadyExistsException(const IndexAlreadyExistsException& other1085) : TException() {
  message = other1085.message;
  __isset = other1085.__isset;
}
IndexAlreadyExistsException& IndexAlreadyExistsException::operator=(const IndexAlreadyExistsException& other1086) {
  message = other1086.message;
  __isset = other1086.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void IndexAlreadyExistsException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IndexAlreadyExistsException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* IndexAlreadyExistsException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: IndexAlreadyExistsException";
  }
}


InvalidOperationException::~InvalidOperationException() throw() {
}


void InvalidOperationException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t InvalidOperationException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidOperationException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InvalidOperationException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidOperationException &a, InvalidOperationException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
InvalidOperationException::InvalidOperationException(const InvalidOperationException& other1107) : TException() {
  message = other1107.message;
  __isset = other1107.__isset;
}
InvalidOperationException& InvalidOperationException::operator=(const InvalidOperationException& other1108) {
  message = other1108.message;
  __isset = other1108.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
InvalidOperationException::InvalidOperationException(const InvalidOperationException& other1083) : TException() {
  message = other1083.message;
  __isset = other1083.__isset;
}
InvalidOperationException& InvalidOperationException::operator=(const InvalidOperationException& other1084) {
  message = other1084.message;
  __isset = other1084.__isset;
=======
InvalidOperationException::InvalidOperationException(const InvalidOperationException& other1041) : TException() {
  message = other1041.message;
  __isset = other1041.__isset;
}
InvalidOperationException& InvalidOperationException::operator=(const InvalidOperationException& other1042) {
  message = other1042.message;
  __isset = other1042.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
InvalidOperationException::InvalidOperationException(const InvalidOperationException& other1045) : TException() {
  message = other1045.message;
  __isset = other1045.__isset;
}
InvalidOperationException& InvalidOperationException::operator=(const InvalidOperationException& other1046) {
  message = other1046.message;
  __isset = other1046.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
InvalidOperationException::InvalidOperationException(const InvalidOperationException& other1041) : TException() {
  message = other1041.message;
  __isset = other1041.__isset;
}
InvalidOperationException& InvalidOperationException::operator=(const InvalidOperationException& other1042) {
  message = other1042.message;
  __isset = other1042.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
InvalidOperationException::InvalidOperationException(const InvalidOperationException& other1045) : TException() {
  message = other1045.message;
  __isset = other1045.__isset;
}
InvalidOperationException& InvalidOperationException::operator=(const InvalidOperationException& other1046) {
  message = other1046.message;
  __isset = other1046.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
InvalidOperationException::InvalidOperationException(const InvalidOperationException& other1087) : TException() {
  message = other1087.message;
  __isset = other1087.__isset;
}
InvalidOperationException& InvalidOperationException::operator=(const InvalidOperationException& other1088) {
  message = other1088.message;
  __isset = other1088.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void InvalidOperationException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidOperationException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* InvalidOperationException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidOperationException";
  }
}


ConfigValSecurityException::~ConfigValSecurityException() throw() {
}


void ConfigValSecurityException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t ConfigValSecurityException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConfigValSecurityException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ConfigValSecurityException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ConfigValSecurityException &a, ConfigValSecurityException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
ConfigValSecurityException::ConfigValSecurityException(const ConfigValSecurityException& other1109) : TException() {
  message = other1109.message;
  __isset = other1109.__isset;
}
ConfigValSecurityException& ConfigValSecurityException::operator=(const ConfigValSecurityException& other1110) {
  message = other1110.message;
  __isset = other1110.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ConfigValSecurityException::ConfigValSecurityException(const ConfigValSecurityException& other1085) : TException() {
  message = other1085.message;
  __isset = other1085.__isset;
}
ConfigValSecurityException& ConfigValSecurityException::operator=(const ConfigValSecurityException& other1086) {
  message = other1086.message;
  __isset = other1086.__isset;
=======
ConfigValSecurityException::ConfigValSecurityException(const ConfigValSecurityException& other1043) : TException() {
  message = other1043.message;
  __isset = other1043.__isset;
}
ConfigValSecurityException& ConfigValSecurityException::operator=(const ConfigValSecurityException& other1044) {
  message = other1044.message;
  __isset = other1044.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ConfigValSecurityException::ConfigValSecurityException(const ConfigValSecurityException& other1047) : TException() {
  message = other1047.message;
  __isset = other1047.__isset;
}
ConfigValSecurityException& ConfigValSecurityException::operator=(const ConfigValSecurityException& other1048) {
  message = other1048.message;
  __isset = other1048.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
ConfigValSecurityException::ConfigValSecurityException(const ConfigValSecurityException& other1043) : TException() {
  message = other1043.message;
  __isset = other1043.__isset;
}
ConfigValSecurityException& ConfigValSecurityException::operator=(const ConfigValSecurityException& other1044) {
  message = other1044.message;
  __isset = other1044.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
ConfigValSecurityException::ConfigValSecurityException(const ConfigValSecurityException& other1047) : TException() {
  message = other1047.message;
  __isset = other1047.__isset;
}
ConfigValSecurityException& ConfigValSecurityException::operator=(const ConfigValSecurityException& other1048) {
  message = other1048.message;
  __isset = other1048.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
ConfigValSecurityException::ConfigValSecurityException(const ConfigValSecurityException& other1089) : TException() {
  message = other1089.message;
  __isset = other1089.__isset;
}
ConfigValSecurityException& ConfigValSecurityException::operator=(const ConfigValSecurityException& other1090) {
  message = other1090.message;
  __isset = other1090.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void ConfigValSecurityException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ConfigValSecurityException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* ConfigValSecurityException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: ConfigValSecurityException";
  }
}


InvalidInputException::~InvalidInputException() throw() {
}


void InvalidInputException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t InvalidInputException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidInputException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InvalidInputException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidInputException &a, InvalidInputException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
InvalidInputException::InvalidInputException(const InvalidInputException& other1111) : TException() {
  message = other1111.message;
  __isset = other1111.__isset;
}
InvalidInputException& InvalidInputException::operator=(const InvalidInputException& other1112) {
  message = other1112.message;
  __isset = other1112.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
InvalidInputException::InvalidInputException(const InvalidInputException& other1087) : TException() {
  message = other1087.message;
  __isset = other1087.__isset;
}
InvalidInputException& InvalidInputException::operator=(const InvalidInputException& other1088) {
  message = other1088.message;
  __isset = other1088.__isset;
=======
InvalidInputException::InvalidInputException(const InvalidInputException& other1045) : TException() {
  message = other1045.message;
  __isset = other1045.__isset;
}
InvalidInputException& InvalidInputException::operator=(const InvalidInputException& other1046) {
  message = other1046.message;
  __isset = other1046.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
InvalidInputException::InvalidInputException(const InvalidInputException& other1049) : TException() {
  message = other1049.message;
  __isset = other1049.__isset;
}
InvalidInputException& InvalidInputException::operator=(const InvalidInputException& other1050) {
  message = other1050.message;
  __isset = other1050.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
InvalidInputException::InvalidInputException(const InvalidInputException& other1045) : TException() {
  message = other1045.message;
  __isset = other1045.__isset;
}
InvalidInputException& InvalidInputException::operator=(const InvalidInputException& other1046) {
  message = other1046.message;
  __isset = other1046.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
InvalidInputException::InvalidInputException(const InvalidInputException& other1049) : TException() {
  message = other1049.message;
  __isset = other1049.__isset;
}
InvalidInputException& InvalidInputException::operator=(const InvalidInputException& other1050) {
  message = other1050.message;
  __isset = other1050.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
InvalidInputException::InvalidInputException(const InvalidInputException& other1091) : TException() {
  message = other1091.message;
  __isset = other1091.__isset;
}
InvalidInputException& InvalidInputException::operator=(const InvalidInputException& other1092) {
  message = other1092.message;
  __isset = other1092.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void InvalidInputException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidInputException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* InvalidInputException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidInputException";
  }
}


NoSuchTxnException::~NoSuchTxnException() throw() {
}


void NoSuchTxnException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t NoSuchTxnException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NoSuchTxnException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NoSuchTxnException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NoSuchTxnException &a, NoSuchTxnException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
NoSuchTxnException::NoSuchTxnException(const NoSuchTxnException& other1113) : TException() {
  message = other1113.message;
  __isset = other1113.__isset;
}
NoSuchTxnException& NoSuchTxnException::operator=(const NoSuchTxnException& other1114) {
  message = other1114.message;
  __isset = other1114.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NoSuchTxnException::NoSuchTxnException(const NoSuchTxnException& other1089) : TException() {
  message = other1089.message;
  __isset = other1089.__isset;
}
NoSuchTxnException& NoSuchTxnException::operator=(const NoSuchTxnException& other1090) {
  message = other1090.message;
  __isset = other1090.__isset;
=======
NoSuchTxnException::NoSuchTxnException(const NoSuchTxnException& other1047) : TException() {
  message = other1047.message;
  __isset = other1047.__isset;
}
NoSuchTxnException& NoSuchTxnException::operator=(const NoSuchTxnException& other1048) {
  message = other1048.message;
  __isset = other1048.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NoSuchTxnException::NoSuchTxnException(const NoSuchTxnException& other1051) : TException() {
  message = other1051.message;
  __isset = other1051.__isset;
}
NoSuchTxnException& NoSuchTxnException::operator=(const NoSuchTxnException& other1052) {
  message = other1052.message;
  __isset = other1052.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
NoSuchTxnException::NoSuchTxnException(const NoSuchTxnException& other1047) : TException() {
  message = other1047.message;
  __isset = other1047.__isset;
}
NoSuchTxnException& NoSuchTxnException::operator=(const NoSuchTxnException& other1048) {
  message = other1048.message;
  __isset = other1048.__isset;
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NoSuchTxnException::NoSuchTxnException(const NoSuchTxnException& other1051) : TException() {
  message = other1051.message;
  __isset = other1051.__isset;
}
NoSuchTxnException& NoSuchTxnException::operator=(const NoSuchTxnException& other1052) {
  message = other1052.message;
  __isset = other1052.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
NoSuchTxnException::NoSuchTxnException(const NoSuchTxnException& other1093) : TException() {
  message = other1093.message;
  __isset = other1093.__isset;
}
NoSuchTxnException& NoSuchTxnException::operator=(const NoSuchTxnException& other1094) {
  message = other1094.message;
  __isset = other1094.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void NoSuchTxnException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NoSuchTxnException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* NoSuchTxnException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: NoSuchTxnException";
  }
}


TxnAbortedException::~TxnAbortedException() throw() {
}


void TxnAbortedException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t TxnAbortedException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TxnAbortedException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TxnAbortedException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TxnAbortedException &a, TxnAbortedException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
TxnAbortedException::TxnAbortedException(const TxnAbortedException& other1115) : TException() {
  message = other1115.message;
  __isset = other1115.__isset;
}
TxnAbortedException& TxnAbortedException::operator=(const TxnAbortedException& other1116) {
  message = other1116.message;
  __isset = other1116.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
TxnAbortedException::TxnAbortedException(const TxnAbortedException& other1091) : TException() {
  message = other1091.message;
  __isset = other1091.__isset;
}
TxnAbortedException& TxnAbortedException::operator=(const TxnAbortedException& other1092) {
  message = other1092.message;
  __isset = other1092.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
TxnAbortedException::TxnAbortedException(const TxnAbortedException& other1049) : TException() {
  message = other1049.message;
  __isset = other1049.__isset;
}
TxnAbortedException& TxnAbortedException::operator=(const TxnAbortedException& other1050) {
  message = other1050.message;
  __isset = other1050.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
TxnAbortedException::TxnAbortedException(const TxnAbortedException& other1053) : TException() {
  message = other1053.message;
  __isset = other1053.__isset;
}
TxnAbortedException& TxnAbortedException::operator=(const TxnAbortedException& other1054) {
  message = other1054.message;
  __isset = other1054.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
TxnAbortedException::TxnAbortedException(const TxnAbortedException& other1053) : TException() {
  message = other1053.message;
  __isset = other1053.__isset;
}
TxnAbortedException& TxnAbortedException::operator=(const TxnAbortedException& other1054) {
  message = other1054.message;
  __isset = other1054.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
TxnAbortedException::TxnAbortedException(const TxnAbortedException& other1095) : TException() {
  message = other1095.message;
  __isset = other1095.__isset;
}
TxnAbortedException& TxnAbortedException::operator=(const TxnAbortedException& other1096) {
  message = other1096.message;
  __isset = other1096.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void TxnAbortedException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TxnAbortedException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* TxnAbortedException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: TxnAbortedException";
  }
}


TxnOpenException::~TxnOpenException() throw() {
}


void TxnOpenException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t TxnOpenException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TxnOpenException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TxnOpenException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TxnOpenException &a, TxnOpenException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
TxnOpenException::TxnOpenException(const TxnOpenException& other1117) : TException() {
  message = other1117.message;
  __isset = other1117.__isset;
}
TxnOpenException& TxnOpenException::operator=(const TxnOpenException& other1118) {
  message = other1118.message;
  __isset = other1118.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
TxnOpenException::TxnOpenException(const TxnOpenException& other1093) : TException() {
  message = other1093.message;
  __isset = other1093.__isset;
}
TxnOpenException& TxnOpenException::operator=(const TxnOpenException& other1094) {
  message = other1094.message;
  __isset = other1094.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
TxnOpenException::TxnOpenException(const TxnOpenException& other1051) : TException() {
  message = other1051.message;
  __isset = other1051.__isset;
}
TxnOpenException& TxnOpenException::operator=(const TxnOpenException& other1052) {
  message = other1052.message;
  __isset = other1052.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
TxnOpenException::TxnOpenException(const TxnOpenException& other1055) : TException() {
  message = other1055.message;
  __isset = other1055.__isset;
}
TxnOpenException& TxnOpenException::operator=(const TxnOpenException& other1056) {
  message = other1056.message;
  __isset = other1056.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
TxnOpenException::TxnOpenException(const TxnOpenException& other1055) : TException() {
  message = other1055.message;
  __isset = other1055.__isset;
}
TxnOpenException& TxnOpenException::operator=(const TxnOpenException& other1056) {
  message = other1056.message;
  __isset = other1056.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
TxnOpenException::TxnOpenException(const TxnOpenException& other1097) : TException() {
  message = other1097.message;
  __isset = other1097.__isset;
}
TxnOpenException& TxnOpenException::operator=(const TxnOpenException& other1098) {
  message = other1098.message;
  __isset = other1098.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void TxnOpenException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TxnOpenException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* TxnOpenException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: TxnOpenException";
  }
}


NoSuchLockException::~NoSuchLockException() throw() {
}


void NoSuchLockException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t NoSuchLockException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NoSuchLockException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NoSuchLockException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NoSuchLockException &a, NoSuchLockException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

<<<<<<< HEAD
<<<<<<< HEAD
NoSuchLockException::NoSuchLockException(const NoSuchLockException& other1119) : TException() {
  message = other1119.message;
  __isset = other1119.__isset;
}
NoSuchLockException& NoSuchLockException::operator=(const NoSuchLockException& other1120) {
  message = other1120.message;
  __isset = other1120.__isset;
=======
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
NoSuchLockException::NoSuchLockException(const NoSuchLockException& other1095) : TException() {
  message = other1095.message;
  __isset = other1095.__isset;
}
NoSuchLockException& NoSuchLockException::operator=(const NoSuchLockException& other1096) {
  message = other1096.message;
  __isset = other1096.__isset;
=======
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
NoSuchLockException::NoSuchLockException(const NoSuchLockException& other1053) : TException() {
  message = other1053.message;
  __isset = other1053.__isset;
}
NoSuchLockException& NoSuchLockException::operator=(const NoSuchLockException& other1054) {
  message = other1054.message;
  __isset = other1054.__isset;
<<<<<<< HEAD
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NoSuchLockException::NoSuchLockException(const NoSuchLockException& other1057) : TException() {
  message = other1057.message;
  __isset = other1057.__isset;
}
NoSuchLockException& NoSuchLockException::operator=(const NoSuchLockException& other1058) {
  message = other1058.message;
  __isset = other1058.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
>>>>>>> HIVE-18679 : create/replicate open transaction event : After Sankar's review comment fix
=======
NoSuchLockException::NoSuchLockException(const NoSuchLockException& other1057) : TException() {
  message = other1057.message;
  __isset = other1057.__isset;
}
NoSuchLockException& NoSuchLockException::operator=(const NoSuchLockException& other1058) {
  message = other1058.message;
  __isset = other1058.__isset;
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
>>>>>>> HIVE-18720 : Replicate Commit Txn operation (without writes)
=======
NoSuchLockException::NoSuchLockException(const NoSuchLockException& other1099) : TException() {
  message = other1099.message;
  __isset = other1099.__isset;
}
NoSuchLockException& NoSuchLockException::operator=(const NoSuchLockException& other1100) {
  message = other1100.message;
  __isset = other1100.__isset;
>>>>>>> HIVE-18781 : Create/Replicate Abort Txn event
  return *this;
}
void NoSuchLockException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NoSuchLockException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* NoSuchLockException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: NoSuchLockException";
  }
}

}}} // namespace
